<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=us-ascii" /><meta http-equiv="Content-Type" content="text/html; charset=us-ascii" /><title>Project Jigsaw: Quick Start Guide</title><link rel="shortcut icon" href="../../images/nanoduke.ico" /><link rel="stylesheet" type="text/css" href="../../page.css" /><script type="text/javascript" src="../../page.js"><noscript></noscript></script><style type="text/css">
/**/
      PRE { font-size: 9pt; }
/**/
</style></head><body><div id="main">
<h1>Project Jigsaw: Module System Quick-Start Guide</h1>
This document provides a few simple examples to get developers
started with modules.
<p>The file paths in the examples use forward slashes, and the path
separators are colons. Developers on Microsoft Windows should use
file paths with back slashes and a semi-colon as the path
separator.</p>
<ul>
<li><a href="#greetings">Greetings</a></li>
<li><a href="#greetingsworld">Greetings world</a></li>
<li><a href="#multimodulecompile">Multi-module compilation</a></li>
<li><a href="#packaging">Packaging</a></li>
<li><a href="#missing">Missing requires or missing exports</a></li>
<li><a href="#services">Services</a></li>
<li><a href="#linker">The linker</a></li>
<li><a href="#xoverride">--patch-module</a></li>
</ul>
<a name="greetings" id="greetings"></a>
<h2>Greetings</h2>
This first example is a module named <code>com.greetings</code>
that simply prints "Greetings!". The module consists of two source
files: the module declaration (<code>module-info.java</code>) and
the main class.
<p>By convention, the source code for the module is in a directory
that is the name of the module.</p>
<pre>
    src/com.greetings/com/greetings/Main.java
    src/com.greetings/module-info.java

    $ cat src/com.greetings/module-info.java
    module com.greetings { }

    $ cat src/com.greetings/com/greetings/Main.java
    package com.greetings;
    public class Main {
        public static void main(String[] args) {
            System.out.println("Greetings!");
        }
    }
</pre>
The source code is compiled to the directory
<code>mods/com.greetings</code> with the following commands:
<pre>
    $ mkdir -p mods/com.greetings

    $ javac -d mods/com.greetings \
        src/com.greetings/module-info.java \
        src/com.greetings/com/greetings/Main.java
</pre>
Now we run the example with the following command:
<pre>
    $ java --module-path mods -m com.greetings/com.greetings.Main
</pre>
<code>--module-path</code> is the module path, its value is one or
more directories that contain modules. The <code>-m</code> option
specifies the main module, the value after the slash is the class
name of the main class in the module. <a name="greetingsworld" id="greetingsworld"></a>
<h2>Greetings world</h2>
This second example updates the module declaration to declare a
dependency on module <code>org.astro</code>. Module
<code>org.astro</code> exports the API package
<code>org.astro</code>.
<pre>
    src/org.astro/module-info.java
    src/org.astro/org/astro/World.java
    src/com.greetings/com/greetings/Main.java
    src/com.greetings/module-info.java

    $ cat src/org.astro/module-info.java
    module org.astro {
        exports org.astro;
    }

    $ cat src/org.astro/org/astro/World.java
    package org.astro;
    public class World {
        public static String name() {
            return "world";
        }
    }

    $ cat src/com.greetings/module-info.java
    module com.greetings {
        requires org.astro;
    }

    $ cat src/com.greetings/com/greetings/Main.java
    package com.greetings;
    import org.astro.World;
    public class Main {
        public static void main(String[] args) {
            System.out.format("Greetings %s!%n", World.name());
        }
    }
</pre>
The modules are compiled, one at a time. The <code>javac</code>
command to compile module <code>com.greetings</code> specifies a
module path so that the reference to module <code>org.astro</code>
and the types in its exported packages can be resolved.
<pre>
    $ mkdir -p mods/org.astro mods/com.greetings

    $ javac -d mods/org.astro \
        src/org.astro/module-info.java src/org.astro/org/astro/World.java

    $ javac --module-path mods -d mods/com.greetings \
        src/com.greetings/module-info.java src/com.greetings/com/greetings/Main.java
</pre>
The example is run in exactly the same way as the first example:
<pre>
    $ java --module-path mods -m com.greetings/com.greetings.Main
    Greetings world!
</pre>
<a name="multimodulecompile" id="multimodulecompile"></a>
<h2>Multi-module compilation</h2>
In the previous example then module <code>com.greetings</code> and
module <code>org.astro</code> were compiled separately. It is also
possible to compile multiple modules with one <code>javac</code>
command:
<pre>
    $ mkdir mods

    $ javac -d mods --module-source-path src $(find src -name "*.java")

    $ find mods -type f
    mods/com.greetings/com/greetings/Main.class
    mods/com.greetings/module-info.class
    mods/org.astro/module-info.class
    mods/org.astro/org/astro/World.class
</pre>
<a name="packaging" id="packaging"></a>
<h2>Packaging</h2>
In the examples so far then the contents of the compiled modules
are exploded on the file system. For transportation and deployment
purposes then it is usually more convenient to package a module as
a <i>modular JAR</i>. A modular JAR is a regular JAR file that has
a <code>module-info.class</code> in its top-level directory. The
following example creates <code>org.astro@1.0.jar</code> and
<code>com.greetings.jar</code> in directory <code>mlib</code>.
<pre>
    $ mkdir mlib

    $ jar --create --file=mlib/org.astro@1.0.jar \
        --module-version=1.0 -C mods/org.astro .

    $ jar --create --file=mlib/com.greetings.jar \
        --main-class=com.greetings.Main -C mods/com.greetings .

    $ ls mlib
    com.greetings.jar   org.astro@1.0.jar
</pre>
In this example, then module <code>org.astro</code> is packaged to
indicate that its version is <code>1.0</code>. Module
<code>com.greetings</code> has been packaged to indicate that its
main class is <code>com.greetings.Main</code>. We can now execute
module <code>com.greetings</code> without needing to specify its
main class:
<pre>
    $ java -p mlib -m com.greetings
    Greetings world!
</pre>
The command line is also shortened by using <code>-p</code> as an
alternative to <code>--module-path</code>.
<p>The <code>jar</code> tool has many new options (see <code>jar
-help</code>), one of which is to print the module declaration for
a module packaged as a modular JAR.</p>
<pre>
    $ jar --describe-module --file=mlib/org.astro@1.0.jar
    org.astro@1.0 jar:file:///d/mlib/org.astro@1.0.jar/!module-info.class
    exports org.astro
    requires java.base mandated
</pre>
<a name="missing" id="missing"></a>
<h2>Missing requires or missing exports</h2>
Now let's see what happens with the previous example when we
mistakenly omit the <code>requires</code> from the
<code>com.greetings</code> module declaration:
<pre>
    $ cat src/com.greetings/module-info.java
    module com.greetings {
        // requires org.astro;
    }

    $ javac --module-path mods -d mods/com.greetings \
        src/com.greetings/module-info.java src/com.greetings/com/greetings/Main.java
    src/com.greetings/com/greetings/Main.java:2: error: package org.astro is not visible
        import org.astro.World;
                  ^
      (package org.astro is declared in module org.astro, but module com.greetings does not read it)
    1 error
</pre>
We now fix this module declaration but introduce a different
mistake, this time we omit the <code>exports</code> from the
<code>org.astro</code> module declaration:
<pre>
    $ cat src/com.greetings/module-info.java
    module com.greetings {
        requires org.astro;
    }
    $ cat src/org.astro/module-info.java
    module org.astro {
        // exports org.astro;
    }

    $ javac --module-path mods -d mods/com.greetings \
        src/com.greetings/module-info.java src/com.greetings/com/greetings/Main.java
    $ javac --module-path mods -d mods/com.greetings \
       src/com.greetings/module-info.java src/com.greetings/com/greetings/Main.java
    src/com.greetings/com/greetings/Main.java:2: error: package org.astro is not visible
        import org.astro.World;
                  ^
      (package org.astro is declared in module org.astro, which does not export it)
    1 error
</pre>
<a name="services" id="services"></a>
<h2>Services</h2>
Services allow for loose coupling between <em>service
consumers</em> modules and <em>service providers</em> modules.
<p>This example has a service consumer module and a service
provider module:</p>
<ul>
<li>module <code>com.socket</code> exports an API for network
sockets. The API is in package <code>com.socket</code> so this
package is exported. The API is <em>pluggable</em> to allow for
alternative implementations. The service type is class
<code>com.socket.spi.NetworkSocketProvider</code> in the same
module and thus package <code>com.socket.spi</code> is also
exported.</li>
<li>module <code>org.fastsocket</code> is a service provider
module. It provides an implementation of
<code>com.socket.spi.NetworkSocketProvider</code>. It does not
export any packages.</li>
</ul>
The following is the source code for module <code>com.socket</code>
.
<pre>
    $ cat src/com.socket/module-info.java
    module com.socket {
        exports com.socket;
        exports com.socket.spi;
        uses com.socket.spi.NetworkSocketProvider;
    }

    $ cat src/com.socket/com/socket/NetworkSocket.java
    package com.socket;

    import java.io.Closeable;
    import java.util.Iterator;
    import java.util.ServiceLoader;

    import com.socket.spi.NetworkSocketProvider;

    public abstract class NetworkSocket implements Closeable {
        protected NetworkSocket() { }

        public static NetworkSocket open() {
            ServiceLoader&lt;NetworkSocketProvider&gt; sl
                = ServiceLoader.load(NetworkSocketProvider.class);
            Iterator&lt;NetworkSocketProvider&gt; iter = sl.iterator();
            if (!iter.hasNext())
                throw new RuntimeException("No service providers found!");
            NetworkSocketProvider provider = iter.next();
            return provider.openNetworkSocket();
        }
    }


    $ cat src/com.socket/com/socket/spi/NetworkSocketProvider.java
    package com.socket.spi;

    import com.socket.NetworkSocket;

    public abstract class NetworkSocketProvider {
        protected NetworkSocketProvider() { }

        public abstract NetworkSocket openNetworkSocket();
    }
</pre>
The following is the source code for module
<code>org.fastsocket</code> .
<pre>
    $ cat src/org.fastsocket/module-info.java
    module org.fastsocket {
        requires com.socket;
        provides com.socket.spi.NetworkSocketProvider
            with org.fastsocket.FastNetworkSocketProvider;
    }

    $ cat src/org.fastsocket/org/fastsocket/FastNetworkSocketProvider.java
    package org.fastsocket;

    import com.socket.NetworkSocket;
    import com.socket.spi.NetworkSocketProvider;

    public class FastNetworkSocketProvider extends NetworkSocketProvider {
        public FastNetworkSocketProvider() { }

        @Override
        public NetworkSocket openNetworkSocket() {
            return new FastNetworkSocket();
        }
    }

    $ cat src/org.fastsocket/org/fastsocket/FastNetworkSocket.java
    package org.fastsocket;

    import com.socket.NetworkSocket;

    class FastNetworkSocket extends NetworkSocket {
        FastNetworkSocket() { }
        public void close() { }
    }
</pre>
For simplicity, we compile both modules together. In practice then
the service consumer module and service provider modules will
nearly always be compiled separately.
<pre>
    $ mkdir mods
    $ javac -d mods --module-source-path src $(find src -name "*.java")
</pre>
<p>Finally we modify our module <code>com.greetings</code> to use
the API.</p>
<pre>
    $ cat src/com.greetings/module-info.java
    module com.greetings {
        requires com.socket;
    }

    $ cat src/com.greetings/com/greetings/Main.java
    package com.greetings;

    import com.socket.NetworkSocket;

    public class Main {
        public static void main(String[] args) {
            NetworkSocket s = NetworkSocket.open();
            System.out.println(s.getClass());
        }
    }


    $ javac -d mods/com.greetings/ -p mods $(find src/com.greetings/ -name "*.java")
</pre>
Finally we run it:
<pre>
    $ java -p mods -m com.greetings/com.greetings.Main
    class org.fastsocket.FastNetworkSocket
</pre>
The output confirms that the service provider has been located and
that it was used as the factory for the <code>NetworkSocket</code>.
<a name="linker" id="linker"></a>
<h2>The linker</h2>
<code>jlink</code> is the linker tool and can be used to link a set
of modules, along with their transitive dependences, to create a
custom modular run-time image (see <a href="//openjdk.java.net/jeps/220">JEP 220</a>).
<p>The tool currently requires that modules on the module path be
packaged in modular JAR or JMOD format. The JDK build packages the
standard and JDK-specific modules in JMOD format.</p>
<p>The following example creates a run-time image that contains the
module <code>com.greetings</code> and its transitive
dependences:</p>
<pre>
    jlink --module-path $JAVA_HOME/jmods:mlib --add-modules com.greetings --output greetingsapp
</pre>
The value to <code>--module-path</code> is a PATH of directories
containing the packaged modules. Replace the path separator ':'
with ';' on Microsoft Windows.
<p><code>$JAVA_HOME/jmods</code> is the directory containing
<code>java.base.jmod</code> and the other standard and JDK
modules.</p>
<p>The directory <code>mlib</code> on the module path contains the
artifact for module <code>com.greetings</code>.</p>
<p>The <code>jlink</code> tool supports many advanced options to
customize the generated image, see <code>jlink --help</code> for
more options. <a name="xoverride" id="xoverride"></a></p>
<h2><code>--patch-module</code></h2>
Developers that checkout <code>java.util.concurrent</code> classes
from Doug Lea's CVS will be used to compiling the source files and
deploying those classes with <code>-Xbootclasspath/p</code>.
<p><code>-Xbootclasspath/p</code> has been removed, its module
replacement is the option <code>--patch-module</code> to override
classes in a module. It can also be used to augment the contents of
module. The <code>--patch-module</code> option is also supported by
<code>javac</code> to compile code "as if" part of the module.</p>
<p>Here's an example that compiles a new version of
<code>java.util.concurrent.ConcurrentHashMap</code> and uses it at
run-time:</p>
<pre>
    javac --patch-module java.base=src -d mypatches/java.base \
        src/java.base/java/util/concurrent/ConcurrentHashMap.java

    java --patch-module java.base=mypatches/java.base ...
</pre>
<h2>More information</h2>
<ul>
<li><a href="spec/sotms/">The State of the Module System</a></li>
<li><a href="//openjdk.java.net/jeps/261">JEP 261: Module
System</a></li>
<li><a href="//openjdk.java.net/projects/jigsaw/">Project
Jigsaw</a></li>
</ul>
<h2>Feedback</h2>
<p>Please send usage questions and experience reports to the
<a href="//mail.openjdk.java.net/mailman/listinfo/jigsaw-dev">jigsaw-dev</a>
list. Specific suggestions about the design of the module system
should be sent to the JSR 376 Expert Group's <a href="mailto:jpms-spec-comments@openjdk.java.net">comments list</a>.</p>
</div><div id="sidebar"><div id="openjdk-sidebar-logo"><a href="/"><img alt="OpenJDK logo" src="../../images/openjdk-small.png" /></a></div><div class="links"><div class="links"><a href="/workshop"><b>Workshop</b></a></div></div><div class="links"><div class="link"><a href="/faq/">OpenJDK FAQ</a></div><div class="link"><a href="/install/">Installing</a></div><div class="link"><a href="/contribute/">Contributing</a></div><div class="link"><a href="/sponsor/">Sponsoring</a></div><div class="link"><a href="/guide/">Developers' Guide</a></div><div class="link"><a href="/groups/vulnerability/report">Vulnerabilities</a></div></div><div class="links"><div class="links"><a href="//mail.openjdk.java.net">Mailing lists</a></div><div class="link"><a href="/irc">IRC</a>
                      &#183; <a href="https://wiki.openjdk.java.net">Wiki</a></div></div><div class="links"><div class="links"><a href="/bylaws">Bylaws</a> &#183; <a href="/census">Census</a></div><div class="link"><a href="/legal/">Legal</a></div></div><div class="links"><div class="links"><a href="/jeps/0"><b>JEP Process</b></a></div></div><div class="links"><div class="link search"><form method="get" action="https://www.google.com/search"><input id="searchBox" style="color: gray" type="text" name="q" size="10" maxlength="255" value="search" /><input type="hidden" name="sitesearch" value="openjdk.java.net" /></form></div></div><div class="links"><div class="about">Source code</div><div class="link"><a href="//hg.openjdk.java.net">Mercurial</a></div><div class="link">Bundles (<a href="http://download.java.net/openjdk/jdk6">6</a>)</div></div><div class="links"><div class="about">Groups</div><div class="link"><a href="/groups/">(overview)</a></div><div class="link"><a href="/groups/2d">2D Graphics</a></div><div class="link"><a href="/groups/adoption">Adoption</a></div><div class="link"><a href="/groups/awt">AWT</a></div><div class="link"><a href="/groups/build">Build</a></div><div class="link"><a href="/groups/csr">Compatibility &amp; Specification Review</a></div><div class="link"><a href="/groups/compiler">Compiler</a></div><div class="link"><a href="/groups/conformance">Conformance</a></div><div class="link"><a href="/groups/core-libs">Core Libraries</a></div><div class="link"><a href="/groups/gb">Governing Board</a></div><div class="link"><a href="/groups/hotspot">HotSpot</a></div><div class="link"><a href="/groups/ide-support">IDE Tooling &amp; Support</a></div><div class="link"><a href="/groups/i18n">Internationalization</a></div><div class="link"><a href="/groups/jmx">JMX</a></div><div class="link"><a href="/groups/members">Members</a></div><div class="link"><a href="/groups/net">Networking</a></div><div class="link"><a href="/groups/nb-projects">NetBeans Projects</a></div><div class="link"><a href="/groups/porters">Porters</a></div><div class="link"><a href="/groups/quality">Quality</a></div><div class="link"><a href="/groups/security">Security</a></div><div class="link"><a href="/groups/serviceability">Serviceability</a></div><div class="link"><a href="/groups/sound">Sound</a></div><div class="link"><a href="/groups/swing">Swing</a></div><div class="link"><a href="/groups/vulnerability">Vulnerability</a></div><div class="link"><a href="/groups/web">Web</a></div></div><div class="links"><div class="about">Projects</div><div class="link"><a href="/projects/">(overview)</a></div><div class="link"><a href="/projects/amber">Amber</a></div><div class="link"><a href="/projects/anno-pipeline">Annotations Pipeline 2.0</a></div><div class="link"><a href="/projects/audio-engine">Audio Engine</a></div><div class="link"><a href="/projects/build-infra">Build Infrastructure</a></div><div class="link"><a href="/projects/caciocavallo">Caciocavallo</a></div><div class="link"><a href="/projects/closures">Closures</a></div><div class="link"><a href="/projects/code-tools">Code Tools</a></div><div class="link"><a href="/projects/coin">Coin</a></div><div class="link"><a href="/projects/cvmi">Common VM Interface</a></div><div class="link"><a href="/projects/compiler-grammar">Compiler Grammar</a></div><div class="link"><a href="/projects/detroit">Detroit</a></div><div class="link"><a href="/projects/dio">Device I/O</a></div><div class="link"><a href="/projects/duke">Duke</a></div><div class="link"><a href="/projects/font-scaler">Font Scaler</a></div><div class="link"><a href="/projects/fbtoolkit">Framebuffer Toolkit</a></div><div class="link"><a href="/projects/graal">Graal</a></div><div class="link"><a href="/projects/graphics-rasterizer">Graphics Rasterizer</a></div><div class="link"><a href="/projects/harfbuzz">HarfBuzz Integration</a></div><div class="link"><a href="/projects/icedtea">IcedTea</a></div><div class="link"><a href="/projects/jdk6">JDK 6</a></div><div class="link"><a href="/projects/jdk7">JDK 7</a></div><div class="link"><a href="/projects/jdk7u">JDK 7 Updates</a></div><div class="link"><a href="/projects/jdk8">JDK 8</a></div><div class="link"><a href="/projects/jdk8u">JDK 8 Updates</a></div><div class="link"><a href="/projects/jdk9">JDK 9</a></div><div class="link"><a href="/projects/jdk">JDK</a>
      (&#8230;
       <a href="/projects/jdk/12">12</a>,
       <a href="/projects/jdk/13">13</a>,
       <a href="/projects/jdk/14">14</a>)</div><div class="link"><a href="/projects/jdk-updates">JDK Updates</a></div><div class="link"><a href="/projects/javadoc-next">JavaDoc.Next</a></div><div class="link"><a href="/projects/jigsaw">Jigsaw</a></div><div class="link"><a href="/projects/kona">Kona</a></div><div class="link"><a href="/projects/kulla">Kulla</a></div><div class="link"><a href="/projects/lambda">Lambda</a></div><div class="link"><a href="/projects/lanai">Lanai</a></div><div class="link"><a href="/projects/locale-enhancement">Locale Enhancement</a></div><div class="link"><a href="/projects/loom">Loom</a></div><div class="link"><a href="/projects/jmm">Memory Model Update</a></div><div class="link"><a href="/projects/metropolis">Metropolis</a></div><div class="link"><a href="/projects/jmc">Mission Control</a></div><div class="link"><a href="/projects/mobile">Mobile</a></div><div class="link"><a href="/projects/modules">Modules</a></div><div class="link"><a href="/projects/mlvm">Multi-Language VM</a></div><div class="link"><a href="/projects/nashorn">Nashorn</a></div><div class="link"><a href="/projects/nio">New I/O</a></div><div class="link"><a href="/projects/openjfx">OpenJFX</a></div><div class="link"><a href="/projects/panama">Panama</a></div><div class="link"><a href="/projects/penrose">Penrose</a></div><div class="link"><a href="/projects/aarch32-port">Port: AArch32</a></div><div class="link"><a href="/projects/aarch64-port">Port: AArch64</a></div><div class="link"><a href="/projects/bsd-port">Port: BSD</a></div><div class="link"><a href="/projects/haiku-port">Port: Haiku</a></div><div class="link"><a href="/projects/macosx-port">Port: Mac OS X</a></div><div class="link"><a href="/projects/mips-port">Port: MIPS</a></div><div class="link"><a href="/projects/ppc-aix-port">Port: PowerPC/AIX</a></div><div class="link"><a href="/projects/s390x-port">Port: s390x</a></div><div class="link"><a href="/projects/portola">Portola</a></div><div class="link"><a href="/projects/sctp">SCTP</a></div><div class="link"><a href="/projects/skara">Skara</a></div><div class="link"><a href="/projects/shenandoah">Shenandoah</a></div><div class="link"><a href="/projects/sumatra">Sumatra</a></div><div class="link"><a href="/projects/threeten">ThreeTen</a></div><div class="link"><a href="/projects/tiered-attrib">Tiered Attribution</a></div><div class="link"><a href="/projects/tsan">Tsan</a></div><div class="link"><a href="/projects/type-annotations">Type Annotations</a></div><div class="link"><a href="/projects/xrender">XRender Pipeline</a></div><div class="link"><a href="/projects/valhalla">Valhalla</a></div><div class="link"><a href="/projects/verona">Verona</a></div><div class="link"><a href="/projects/visualvm">VisualVM</a></div><div class="link"><a href="/projects/zero">Zero</a></div><div class="link"><a href="/projects/zgc">ZGC</a></div></div><div class="links"><div class="about">Tools</div><div class="link"><a href="http://java.sun.com/javase/downloads/index.jsp">Java SE</a></div><div class="link"><a href="http://mercurial-scm.org/mercurial/">Mercurial</a></div><div class="link"><a href="/jtreg/index.html">jtreg harness</a></div></div><div class="links"><div class="about">Related</div><div class="link"><a href="http://planetjdk.org">Planet JDK</a></div><div class="link"><a href="http://java.sun.com">java.sun.com</a></div><div class="link"><a href="http://jcp.org">Java Community Process</a></div><div class="link"><a href="//jdk.java.net">JDK GA/EA Builds</a></div></div><div class="buttons"><a href="http://oracle.com"><img alt="Oracle logo" src="../../images/oracle.png" /></a></div></div><div id="footer">

        &#169; 2019 Oracle Corporation and/or its affiliates
        <br /><a href="/legal/tou/">Terms of Use</a>
        &#183;
        
            License: <a href="/legal/gplv2+ce.html">GPLv2</a>
        &#183; <a href="http://www.oracle.com/us/legal/privacy/">Privacy</a>
        &#183; <a href="http://www.oracle.com/us/legal/third-party-trademarks/third-party-trademarks-078568.html">Trademarks</a></div><SCRIPT type="text/javascript">
  var sc_project=2527440;
  var sc_invisible=1;
  var sc_partition=24;
  var sc_security="d832a704";
  var sc_remove_link=1;
  </SCRIPT><script type="text/javascript" src="https://www.statcounter.com/counter/counter_xhtml.js" async="yes"></script><noscript><div class="statcounter"><img class="statcounter" src="https://c.statcounter.com/2527440/0/d832a704/1/" alt="web statistics" /></div></noscript></body></html>
