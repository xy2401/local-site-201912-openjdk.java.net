<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=us-ascii" /><meta http-equiv="Content-Type" content="text/html; charset=us-ascii" /><title>JEP 295: Ahead-of-Time Compilation</title><link rel="shortcut icon" href="/images/nanoduke.ico" /><link rel="stylesheet" type="text/css" href="/page.css" /><script type="text/javascript" src="/page.js"><noscript></noscript></script><style type="text/css" xml:space="preserve">
      TABLE { border-collapse: collapse; padding: 0px; margin: 1em 0; }
      TR:first-child TH, TR:first-child TD { padding-top: 0; }
      TH, TD { padding: 0px; padding-top: .5ex; vertical-align: baseline; text-align: left; }
      TD + TD, TH + TH { padding-left: 1em; }
      TD:first-child, TH:first-child, TD.jep { text-align: right; }
      TABLE.head TD:first-child { font-style: italic; padding-left: 2em; }
      PRE { padding-left: 2em; margin: 1ex 0; font-size: inherit; }
      TABLE PRE { padding-left: 0; margin: 0; }
      TABLE.jeps TD:first-child + TD,
      TABLE.jeps TD:first-child + TD + TD { padding-left: .5em; }
      TABLE.jeps TD:first-child,
      TABLE.jeps TD:first-child + TD,
      TABLE.jeps TD:first-child + TD + TD { font-size: smaller; }
      TABLE.jeps TD.cl { font-size: smaller; padding-right: 0; text-align: right; }
      TABLE.jeps TD.cm { font-size: smaller; padding-left: .1em; padding-right: .1em; }
      TABLE.jeps TD.cr { font-size: smaller; padding-left: 0; }
      TABLE.jeps TD.z { padding-left: 0; padding-right: 0; }
      TABLE.head TD { padding-top: 0; }
      .withdrawn { text-decoration: line-through; }
    </style></head><body><div id="main"><h1>JEP 295: Ahead-of-Time Compilation</h1><table class="head"><tr><td>Owner</td><td>Vladimir Kozlov</td></tr><tr><td>Type</td><td>Feature</td></tr><tr><td>Scope</td><td>Implementation</td></tr><tr><td>Status</td><td>Closed&#8201;/&#8201;Delivered</td></tr><tr><td>Release</td><td>9</td></tr><tr><td>Component</td><td>hotspot&#8201;/&#8201;compiler</td></tr><tr><td>Discussion</td><td>hotspot dash compiler dash dev at openjdk dot java dot net</td></tr><tr><td>Effort</td><td>M</td></tr><tr><td>Duration</td><td>M</td></tr><tr><td>Reviewed by</td><td>John Rose, Mikael Vidstedt</td></tr><tr><td>Endorsed by</td><td>John Rose</td></tr><tr><td>Created</td><td>2016/09/15 01:20</td></tr><tr><td>Updated</td><td>2018/10/05 22:52</td></tr><tr><td>Issue</td><td><a href="https://bugs.openjdk.java.net/browse/JDK-8166089">8166089</a></td></tr></table><div class="markdown"><h2 id="Summary">Summary</h2>
<p>Compile Java classes to native code prior to launching the virtual
machine.</p>
<h2 id="Goals">Goals</h2>
<ul>
<li>
<p>Improve the start-up time of both small and large Java applications,
with at most a limited impact on peak performance.</p>
</li>
<li>
<p>Change the end user's work flow as little as possible.</p>
</li>
</ul>
<h2 id="Non-Goals">Non-Goals</h2>
<p>It is not necessary to provide an explicit, exposed library-like
mechanism for saving and loading compiled code.</p>
<h2 id="Motivation">Motivation</h2>
<p>JIT compilers are fast, but Java programs can become so large that it
takes a long time for the JIT to warm up completely.  Infrequently-used
Java methods might never be compiled at all, potentially incurring a
performance penalty due to repeated interpreted invocations.</p>
<h2 id="Description">Description</h2>
<p>AOT compilation of any JDK modules, classes, or of user code, is experimental and not supported in JDK 9.</p>
<p>To use the AOTed <code>java.base</code> module, the user will have to compile the module and copy the resulting AOT library into the JDK installation directory, or specify it on java command line.  The usage of AOT-compiled code is otherwise completely transparent to end users.</p>
<p>AOT compilation is done by a new tool, <code>jaotc</code>:</p>
<pre><code>jaotc --output libHelloWorld.so HelloWorld.class
jaotc --output libjava.base.so --module java.base</code></pre>
<p>It uses <a href="//openjdk.java.net/projects/graal/">Graal</a> as the code-generating backend.</p>
<p>During JVM startup the AOT initialization code looks for well-known shared libraries in a well-known location, or as specified on the command line with the AOTLibrary flag.  If shared libraries are found, these are picked up and used.  If no shared libraries are found then AOT will be turned off for this JVM instance.</p>
<pre><code>java -XX:AOTLibrary=./libHelloWorld.so,./libjava.base.so HelloWorld</code></pre>
<p>New java AOT flags and <code>jaotc</code> flags are listed in following subsections which also have instructions on how to build and install the AOT library for the <code>java.base</code> module.</p>
<p>The container format used for AOT-compiled code is shared libraries.  The JDK 9 version only supports Linux/x64, where the shared library format is <a href="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format">ELF</a>.
AOT-compiled code in AOT libraries is treated by JVM as extension of existing CodeCache. When a java class is loaded JVM looks if corresponding AOT-compiled methods exist in loaded AOT libraries and add links to them from java methods descriptors.
AOT-compiled code follows the same invocation/deoptimization/unloading rules as normal JIT-compiled code.</p>
<p>Since class bytecodes can change over time, either through changes to the source code or via class transformation and redefinition, the JVM needs to detect such changes and reject AOT-compiled code if the bytecode doesn't match. This is achieved with <em>class fingerprinting</em>.  During AOT compilation a fingerprint for each class is generated and stored in the data section of the shared library. Later, when a class is loaded and AOT-compiled code is found for this class, the fingerprint for the current bytecode is compared to the one stored in the shared library.  If there is a mismatch then the AOT code for that particular class is not used.</p>
<p>The same JDK should be used during AOT compilation and execution. Java version is recorded in AOT libraries and checked during their load. AOT recompilation is required when Java is updated.</p>
<p><code>jaotc</code> does not resolve referenced classes which are not system classes or part of compiled classes. They have to be added to class path. Otherwise ClassNotFoundException could be thrown during AOT compilation.</p>
<pre><code>jaotc --output=libfoo.so --jar foo.jar -J-cp -J./
jaotc --output=libactivation.so --module java.activation -J--add-module=java.se.ee</code></pre>
<h3 id="AOT-usage">AOT usage</h3>
<p>Use <code>jaotc</code> tool to execute AOT compilation. The tool is part of java installation - same as <code>javac</code>.</p>
<pre><code>jaotc --output libHelloWorld.so HelloWorld.class</code></pre>
<p>Then specify generated AOT library during application execution:</p>
<pre><code>java -XX:AOTLibrary=./libHelloWorld.so HelloWorld</code></pre>
<p>For this release the same java runtime configuration should be used during AOT compilation and execution. For example:</p>
<pre><code>jaotc -J-XX:+UseParallelGC -J-XX:-UseCompressedOops --output libHelloWorld.so HelloWorld.class 
java -XX:+UseParallelGC -XX:-UseCompressedOops -XX:AOTLibrary=./libHelloWorld.so HelloWorld</code></pre>
<p>It includes the requirement to use the same JDK build variant: product or debug.</p>
<p>The runtime configuration is recorded in AOT library and verified when the library is loaded during execution. If verification failed this AOT library will not be used and JVM will continue run or exit if flag <code>-XX:+UseAOTStrictLoading</code> is specified.</p>
<p>During JVM startup the AOT initialization code looks for well-known shared libraries in a well-known location or libraries specified by   <code>-XX:AOTLibrary</code> option. If shared libraries are found, these are picked up and used. If no shared libraries can be found, AOT will be turned off for this JVM instance run.</p>
<p>AOT libraries can be compiled in two modes controlled by <code>--compile-for-tiered</code> flag:</p>
<ul>
<li><em>Non-tiered AOT</em> compiled code behaves similarly to statically compiled C++ code, in that no profiling information is collected and no JIT recompilations will happen.</li>
<li><em>Tiered AOT</em> compiled code does collect profiling information.  The profiling done is the same as the <em>simple profiling</em> done by C1 methods compiled at Tier 2.  If AOT methods hit the AOT invocation thresholds then these methods are recompiled by C1 at Tier 3 first in order to gather full profiling information.  This is required for C2 JIT recompilations in order to produce optimal code and reach peak application performance.</li>
</ul>
<p>The extra step of recompiling code at Tier 3 is necessary since the overhead of full profiling is too high to be used for all methods, especially for methods in a module such as <code>java.base</code>.  For user applications it might make sense to allow AOT compilations with Tier 3-equivalent profiling, but this will not be supported for JDK 9.</p>
<p>The logical compilation mode for <code>java.base</code> is tiered AOT since JIT recompilation of <code>java.base</code> methods is desired to reach peak performance.  Only in certain scenarios does a non-tiered AOT compilation make sense.  This includes applications which require predictable behavior, when footprint is more important than peak performance, or for systems where dynamic code generation is not allowed.  In these cases, AOT compilation needs be done on the entire application and is thus experimental in JDK 9.</p>
<p>The set of AOT libraries could be generated for different execution environment. JVM knows next <code>well-known</code> names for <code>java.base</code> AOT libraries generated for specific runtime configuration. It will look for them in $JAVA_HOME/lib directory and load the one which correspond to current run-time configuration:</p>
<pre><code>-XX:-UseCompressedOops -XX:+UseG1GC :       libjava.base.so
-XX:+UseCompressedOops -XX:+UseG1GC :       libjava.base-coop.so
-XX:-UseCompressedOops -XX:+UseParallelGC : libjava.base-nong1.so
-XX:+UseCompressedOops -XX:+UseParallelGC : libjava.base-coop-nong1.so</code></pre>
<p>JVM also knows AOT libraries names for next java modules but their compilation, installation and usage are experimental:</p>
<pre><code>java.base
jdk.compiler 
jdk.scripting.nashorn 
jdk.internal.vm.ci 
jdk.internal.vm.compiler</code></pre>
<h3 id="Steps-to-generate-and-use-an-AOT-library-for-the-java-base-module">Steps to generate and use an AOT library for the <code>java.base</code> module</h3>
<p>Compile <code>java.base</code> module using <code>jaotc</code>. It requires big java heap to keep data for all compiled methods (about 50000 methods):</p>
<pre><code>jaotc -J-XX:+UseCompressedOops -J-XX:+UseG1GC -J-Xmx4g --compile-for-tiered --info --compile-commands java.base-list.txt --output libjava.base-coop.so --module java.base</code></pre>
<p>Some methods in <code>java.base</code> cause compilation failure and are excluded by using <code>--compile-comands</code> option:</p>
<pre><code>cat java.base-list.txt

# jaotc: java.lang.StackOverflowError
exclude sun.util.resources.LocaleNames.getContents()[[Ljava/lang/Object;
exclude sun.util.resources.TimeZoneNames.getContents()[[Ljava/lang/Object;
exclude sun.util.resources.cldr.LocaleNames.getContents()[[Ljava/lang/Object;
exclude sun.util.resources..*.LocaleNames_.*.getContents\(\)\[\[Ljava/lang/Object;
exclude sun.util.resources..*.LocaleNames_.*_.*.getContents\(\)\[\[Ljava/lang/Object;
exclude sun.util.resources..*.TimeZoneNames_.*.getContents\(\)\[\[Ljava/lang/Object;
exclude sun.util.resources..*.TimeZoneNames_.*_.*.getContents\(\)\[\[Ljava/lang/Object;
# java.lang.Error: Trampoline must not be defined by the bootstrap classloader
exclude sun.reflect.misc.Trampoline.&lt;clinit&gt;()V
exclude sun.reflect.misc.Trampoline.invoke(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
# JVM asserts
exclude com.sun.crypto.provider.AESWrapCipher.engineUnwrap([BLjava/lang/String;I)Ljava/security/Key;
exclude sun.security.ssl.*
exclude sun.net.RegisteredDomain.&lt;clinit&gt;()V
# Huge methods
exclude jdk.internal.module.SystemModules.descriptors()[Ljava/lang/module/ModuleDescriptor;</code></pre>
<p>After generating AOT library specify it during application execution using <code>-XX:AOTLibrary</code> option (by default java uses G1 and compressed oops in JDK 9 - you don't need to specify those flags):</p>
<pre><code>java -XX:AOTLibrary=./libjava.base-coop.so,./libHelloWorld.so HelloWorld</code></pre>
<p>Or copy generated AOT library to JDK installation directory (you may need to adjust directory's permissions):</p>
<pre><code>cp libjava.base-coop.so $JAVA_HOME/lib/</code></pre>
<p>In such case it will be loaded automatically without need to specify on command line:</p>
<pre><code>java -XX:AOTLibrary=./libHelloWorld.so HelloWorld</code></pre>
<p>Consider <code>strip</code> unused symbols from AOT library to reduce library's size.</p>
<h3 id="New-run-time-AOT-flags">New run-time AOT flags</h3>
<pre><code>-XX:+/-UseAOT</code></pre>
<p>Use AOT-compiled files. By default it is ON.</p>
<pre><code>-XX:AOTLibrary=&lt;file&gt;</code></pre>
<p>Specify a list of AOT library files. Separate libraries entries with colons (:) or comma (,).</p>
<pre><code>-XX:+/-PrintAOT</code></pre>
<p>Print used AOT klasses and methods.</p>
<p>Additional diagnostic flag is available (requires to specify -XX:+UnlockDiagnosticVMOptions flag):</p>
<pre><code>-XX:+/-UseAOTStrictLoading</code></pre>
<p>Exit JVM if any of AOT libraries has run-time configuration not matching current run-time settings.</p>
<p>JVM run-time has following Unified Logging AOT tags integrated with <a href="//openjdk.java.net/jeps/158">JEP 158: Unified JVM Logging</a>.</p>
<pre><code>aotclassfingerprint</code></pre>
<p>create log in case class's fingerprint does not match fingerprint recorded in AOT library.</p>
<pre><code>aotclassload</code></pre>
<p>create log when corresponding class data is found in AOT library.</p>
<pre><code>aotclassresolve</code></pre>
<p>create log when a request from AOT compiled code to resolve class was successful or not.</p>
<h3 id="jaotc:-The-Java-Ahead-Of-Time-compiler">jaotc: The Java Ahead-Of-Time compiler</h3>
<p><code>jaotc</code> is java static compiler which produces native code for compiled java methods. It uses Graal as the code-generating backend and libelf for generating .so AOT library.</p>
<p>The tool is part of java installation and can be used the same way as <code>javac</code>.</p>
<pre><code>jaotc &lt;options&gt; &lt;name or list&gt;</code></pre>
<p>Where 'name' is class name or jar file. 'list' is a : separated list of class names, modules, jar files or directories which contain class files.</p>
<p>The following <code>jaotc</code> options are available:</p>
<pre><code>--output &lt;file&gt;</code></pre>
<p>Output file name. Default name is "unnamed.so".</p>
<pre><code>--class-name &lt;class names&gt;</code></pre>
<p>List of Java classes to compile</p>
<pre><code>--jar &lt;jar files&gt;</code></pre>
<p>List of jar files to compile</p>
<pre><code>--module &lt;modules&gt;</code></pre>
<p>List of Java modules to compile</p>
<pre><code>--directory &lt;dirs&gt;</code></pre>
<p>List of directories where to search for files to compile</p>
<pre><code>--search-path &lt;dirs&gt;</code></pre>
<p>List of directories where to search for specified files</p>
<pre><code>--compile-commands &lt;file&gt;</code></pre>
<p>Name of file with compile commands:</p>
<pre><code>exclude sun.util.resources..*.TimeZoneNames_.*.getContents\(\)\[\[Ljava/lang/Object; 
exclude sun.security.ssl.* 
compileOnly java.lang.String.*</code></pre>
<p>AOT recognizes two compile commands currently:</p>
<pre><code>exclude       - exclude compilation of specified methods 
compileOnly   - compile only specified methods</code></pre>
<p>Regular expressions are used to specify classes and methods.</p>
<pre><code>--compile-for-tiered</code></pre>
<p>Generated profiling code for tiered compilation. By default profiling code is not generated (could be changed in future).</p>
<pre><code>--compile-with-assertions</code></pre>
<p>Generate code with java assertions. By default assertions code is not generated.</p>
<pre><code>--compile-threads &lt;number&gt;</code></pre>
<p>Number of compilation threads to be used. Default value is <strong>min(16, available_cpus)</strong>.</p>
<pre><code>--ignore-errors</code></pre>
<p>Ignores all exceptions thrown during class loading. By default exit compilation if class loading throws exception.</p>
<pre><code>--exit-on-error</code></pre>
<p>Exit on compilation errors. By default failed compilation is skipped and compilation of other methods continues.</p>
<pre><code>--info</code></pre>
<p>Print information about compilation phases</p>
<pre><code>--verbose</code></pre>
<p>Print more details about compilation phases, switch on --info flag</p>
<pre><code>--debug</code></pre>
<p>Print even more details, switch on --info and --verbose flags</p>
<pre><code>--help</code></pre>
<p>Print <code>jaotc</code> usage message and flags</p>
<pre><code>--version</code></pre>
<p>Print version information</p>
<pre><code>-J&lt;flag&gt;</code></pre>
<p>Pass <strong>flag</strong> directly to the JVM runtime system</p>
<h3 id="Current-AOT-limitations">Current AOT limitations</h3>
<ul>
<li>AOT initial release in JDK 9 is provided for experimental-only use and is restricted to Linux x64 systems running 64-bit Java with either Parallel or G1 GC.</li>
<li>AOT compilation must be executed on the same system or a system with the same configuration on which AOT code will be used by Java application.</li>
<li>The same Java run-time configuration must be used during AOT compilation and execution. For example, the <code>jaotc</code> tool should be run with Parallel GC (using the <code>-J</code> flag) if an application will also use Parallel GC with AOT code. Mismatching run-time configuration may cause application crash during execution.</li>
<li>May not compile Java code which uses dynamically generated classes and bytecode (lambda expressions, invoke dynamic). Any code which is not AOT compiled will be handled in the usual way during runtime execution: first run in Interpreter and then compiled by JIT compiler.</li>
<li>AOT does not support custom class loaders because during AOT compilation it does not have information about them. AOT compiled methods will not be used for classes loaded by not builtin loaders.</li>
</ul>
<p>These limitations may be addressed in future releases.</p>
<h2 id="Alternatives">Alternatives</h2>
<p>The saving of profiles or compilation decisions has been discussed, but
that does nothing to reduce the time actually spent compiling the code.
It is possible that saving a very late copy of the low-level IR could be
done instead, but that seems no less complex.</p>
<h2 id="Testing">Testing</h2>
<p>New AOT jtreg tests will be developed for testing AOT functionality.</p>
<p>All existing tests can be run with an AOT-enabled JDK.  This is already done as separate nightly testing configurations.</p>
<p>The other configuration runs all tests on an AOT-enabled JDK with an AOT-compiled <code>java.base</code> module.</p>
<h2 id="Risks-and-Assumptions">Risks and Assumptions</h2>
<p>It&#8217;s possible that the use of pre-compiled code could result in less-than-optimal code being used, resulting in a loss of performance.  Performance testing shows that some applications benefit from AOT-compiled code, while others clearly show regressions.  Since the AOT feature is an opt-in feature, possible performance regressions with user applications are avoidable.  If a user finds that an application starts up more slowly, or doesn't reach the expected peak performance, or crash, they can just switch AOT off with the <code>-XX:-UseAOT</code> flag, or remove any AOT libraries.</p>
<p>It is recommended that AOT compilation will take place in trusted environments, where the JDK libraries and tools are protected from tampering.</p>
<h2 id="Dependences">Dependences</h2>
<p>This project depends on <a href="//openjdk.java.net/jeps/243">JEP 243: Java-Level JVM Compiler Interface</a>, since the AOT compiler uses Graal as the code-generating backend, which in turn depends on JVMCI.</p>
<p>The project will merge <a href="//hg.openjdk.java.net/graal/graal-core/">Graal core</a> into the JDK, and deliver it in Linux/x64 builds.</p>
</div></div><div id="sidebar"><div id="openjdk-sidebar-logo"><a href="/"><img alt="OpenJDK logo" src="/images/openjdk-small.png" /></a></div><div class="links"><div class="links"><a href="/workshop"><b>Workshop</b></a></div></div><div class="links"><div class="link"><a href="/faq/">OpenJDK FAQ</a></div><div class="link"><a href="/install/">Installing</a></div><div class="link"><a href="/contribute/">Contributing</a></div><div class="link"><a href="/sponsor/">Sponsoring</a></div><div class="link"><a href="/guide/">Developers' Guide</a></div><div class="link"><a href="/groups/vulnerability/report">Vulnerabilities</a></div></div><div class="links"><div class="links"><a href="//mail.openjdk.java.net">Mailing lists</a></div><div class="link"><a href="/irc">IRC</a>
                      &#183; <a href="https://wiki.openjdk.java.net">Wiki</a></div></div><div class="links"><div class="links"><a href="/bylaws">Bylaws</a> &#183; <a href="/census">Census</a></div><div class="link"><a href="/legal/">Legal</a></div></div><div class="links"><div class="links"><a href="/jeps/0"><b>JEP Process</b></a></div></div><div class="links"><div class="link search"><form method="get" action="https://www.google.com/search"><input id="searchBox" style="color: gray" type="text" name="q" size="10" maxlength="255" value="search" /><input type="hidden" name="sitesearch" value="openjdk.java.net" /></form></div></div><div class="links"><div class="about">Source code</div><div class="link"><a href="//hg.openjdk.java.net">Mercurial</a></div><div class="link">Bundles (<a href="http://download.java.net/openjdk/jdk6">6</a>)</div></div><div class="links"><div class="about">Groups</div><div class="link"><a href="/groups/">(overview)</a></div><div class="link"><a href="/groups/2d">2D Graphics</a></div><div class="link"><a href="/groups/adoption">Adoption</a></div><div class="link"><a href="/groups/awt">AWT</a></div><div class="link"><a href="/groups/build">Build</a></div><div class="link"><a href="/groups/csr">Compatibility &amp; Specification Review</a></div><div class="link"><a href="/groups/compiler">Compiler</a></div><div class="link"><a href="/groups/conformance">Conformance</a></div><div class="link"><a href="/groups/core-libs">Core Libraries</a></div><div class="link"><a href="/groups/gb">Governing Board</a></div><div class="link"><a href="/groups/hotspot">HotSpot</a></div><div class="link"><a href="/groups/ide-support">IDE Tooling &amp; Support</a></div><div class="link"><a href="/groups/i18n">Internationalization</a></div><div class="link"><a href="/groups/jmx">JMX</a></div><div class="link"><a href="/groups/members">Members</a></div><div class="link"><a href="/groups/net">Networking</a></div><div class="link"><a href="/groups/nb-projects">NetBeans Projects</a></div><div class="link"><a href="/groups/porters">Porters</a></div><div class="link"><a href="/groups/quality">Quality</a></div><div class="link"><a href="/groups/security">Security</a></div><div class="link"><a href="/groups/serviceability">Serviceability</a></div><div class="link"><a href="/groups/sound">Sound</a></div><div class="link"><a href="/groups/swing">Swing</a></div><div class="link"><a href="/groups/vulnerability">Vulnerability</a></div><div class="link"><a href="/groups/web">Web</a></div></div><div class="links"><div class="about">Projects</div><div class="link"><a href="/projects/">(overview)</a></div><div class="link"><a href="/projects/amber">Amber</a></div><div class="link"><a href="/projects/anno-pipeline">Annotations Pipeline 2.0</a></div><div class="link"><a href="/projects/audio-engine">Audio Engine</a></div><div class="link"><a href="/projects/build-infra">Build Infrastructure</a></div><div class="link"><a href="/projects/caciocavallo">Caciocavallo</a></div><div class="link"><a href="/projects/closures">Closures</a></div><div class="link"><a href="/projects/code-tools">Code Tools</a></div><div class="link"><a href="/projects/coin">Coin</a></div><div class="link"><a href="/projects/cvmi">Common VM Interface</a></div><div class="link"><a href="/projects/compiler-grammar">Compiler Grammar</a></div><div class="link"><a href="/projects/detroit">Detroit</a></div><div class="link"><a href="/projects/dio">Device I/O</a></div><div class="link"><a href="/projects/duke">Duke</a></div><div class="link"><a href="/projects/font-scaler">Font Scaler</a></div><div class="link"><a href="/projects/fbtoolkit">Framebuffer Toolkit</a></div><div class="link"><a href="/projects/graal">Graal</a></div><div class="link"><a href="/projects/graphics-rasterizer">Graphics Rasterizer</a></div><div class="link"><a href="/projects/harfbuzz">HarfBuzz Integration</a></div><div class="link"><a href="/projects/icedtea">IcedTea</a></div><div class="link"><a href="/projects/jdk6">JDK 6</a></div><div class="link"><a href="/projects/jdk7">JDK 7</a></div><div class="link"><a href="/projects/jdk7u">JDK 7 Updates</a></div><div class="link"><a href="/projects/jdk8">JDK 8</a></div><div class="link"><a href="/projects/jdk8u">JDK 8 Updates</a></div><div class="link"><a href="/projects/jdk9">JDK 9</a></div><div class="link"><a href="/projects/jdk">JDK</a>
      (&#8230;
       <a href="/projects/jdk/12">12</a>,
       <a href="/projects/jdk/13">13</a>,
       <a href="/projects/jdk/14">14</a>)</div><div class="link"><a href="/projects/jdk-updates">JDK Updates</a></div><div class="link"><a href="/projects/javadoc-next">JavaDoc.Next</a></div><div class="link"><a href="/projects/jigsaw">Jigsaw</a></div><div class="link"><a href="/projects/kona">Kona</a></div><div class="link"><a href="/projects/kulla">Kulla</a></div><div class="link"><a href="/projects/lambda">Lambda</a></div><div class="link"><a href="/projects/lanai">Lanai</a></div><div class="link"><a href="/projects/locale-enhancement">Locale Enhancement</a></div><div class="link"><a href="/projects/loom">Loom</a></div><div class="link"><a href="/projects/jmm">Memory Model Update</a></div><div class="link"><a href="/projects/metropolis">Metropolis</a></div><div class="link"><a href="/projects/jmc">Mission Control</a></div><div class="link"><a href="/projects/mobile">Mobile</a></div><div class="link"><a href="/projects/modules">Modules</a></div><div class="link"><a href="/projects/mlvm">Multi-Language VM</a></div><div class="link"><a href="/projects/nashorn">Nashorn</a></div><div class="link"><a href="/projects/nio">New I/O</a></div><div class="link"><a href="/projects/openjfx">OpenJFX</a></div><div class="link"><a href="/projects/panama">Panama</a></div><div class="link"><a href="/projects/penrose">Penrose</a></div><div class="link"><a href="/projects/aarch32-port">Port: AArch32</a></div><div class="link"><a href="/projects/aarch64-port">Port: AArch64</a></div><div class="link"><a href="/projects/bsd-port">Port: BSD</a></div><div class="link"><a href="/projects/haiku-port">Port: Haiku</a></div><div class="link"><a href="/projects/macosx-port">Port: Mac OS X</a></div><div class="link"><a href="/projects/mips-port">Port: MIPS</a></div><div class="link"><a href="/projects/ppc-aix-port">Port: PowerPC/AIX</a></div><div class="link"><a href="/projects/s390x-port">Port: s390x</a></div><div class="link"><a href="/projects/portola">Portola</a></div><div class="link"><a href="/projects/sctp">SCTP</a></div><div class="link"><a href="/projects/skara">Skara</a></div><div class="link"><a href="/projects/shenandoah">Shenandoah</a></div><div class="link"><a href="/projects/sumatra">Sumatra</a></div><div class="link"><a href="/projects/threeten">ThreeTen</a></div><div class="link"><a href="/projects/tiered-attrib">Tiered Attribution</a></div><div class="link"><a href="/projects/tsan">Tsan</a></div><div class="link"><a href="/projects/type-annotations">Type Annotations</a></div><div class="link"><a href="/projects/xrender">XRender Pipeline</a></div><div class="link"><a href="/projects/valhalla">Valhalla</a></div><div class="link"><a href="/projects/verona">Verona</a></div><div class="link"><a href="/projects/visualvm">VisualVM</a></div><div class="link"><a href="/projects/zero">Zero</a></div><div class="link"><a href="/projects/zgc">ZGC</a></div></div><div class="links"><div class="about">Tools</div><div class="link"><a href="http://java.sun.com/javase/downloads/index.jsp">Java SE</a></div><div class="link"><a href="http://mercurial-scm.org/mercurial/">Mercurial</a></div><div class="link"><a href="/jtreg/index.html">jtreg harness</a></div></div><div class="links"><div class="about">Related</div><div class="link"><a href="http://planetjdk.org">Planet JDK</a></div><div class="link"><a href="http://java.sun.com">java.sun.com</a></div><div class="link"><a href="http://jcp.org">Java Community Process</a></div><div class="link"><a href="//jdk.java.net">JDK GA/EA Builds</a></div></div><div class="buttons"><a href="http://oracle.com"><img alt="Oracle logo" src="/images/oracle.png" /></a></div></div><div id="footer">

        &#169; 2019 Oracle Corporation and/or its affiliates
        <br /><a href="/legal/tou/">Terms of Use</a>
        &#183;
        
            License: <a href="/legal/gplv2+ce.html">GPLv2</a>
        &#183; <a href="http://www.oracle.com/us/legal/privacy/">Privacy</a>
        &#183; <a href="http://www.oracle.com/us/legal/third-party-trademarks/third-party-trademarks-078568.html">Trademarks</a></div><SCRIPT type="text/javascript">
  var sc_project=2527440;
  var sc_invisible=1;
  var sc_partition=24;
  var sc_security="d832a704";
  var sc_remove_link=1;
  </SCRIPT><script type="text/javascript" src="https://www.statcounter.com/counter/counter_xhtml.js" async="yes"></script><noscript><div class="statcounter"><img class="statcounter" src="https://c.statcounter.com/2527440/0/d832a704/1/" alt="web statistics" /></div></noscript></body></html>
