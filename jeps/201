<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=us-ascii" /><meta http-equiv="Content-Type" content="text/html; charset=us-ascii" /><title>JEP 201: Modular Source Code</title><link rel="shortcut icon" href="/images/nanoduke.ico" /><link rel="stylesheet" type="text/css" href="/page.css" /><script type="text/javascript" src="/page.js"><noscript></noscript></script><style type="text/css" xml:space="preserve">
      TABLE { border-collapse: collapse; padding: 0px; margin: 1em 0; }
      TR:first-child TH, TR:first-child TD { padding-top: 0; }
      TH, TD { padding: 0px; padding-top: .5ex; vertical-align: baseline; text-align: left; }
      TD + TD, TH + TH { padding-left: 1em; }
      TD:first-child, TH:first-child, TD.jep { text-align: right; }
      TABLE.head TD:first-child { font-style: italic; padding-left: 2em; }
      PRE { padding-left: 2em; margin: 1ex 0; font-size: inherit; }
      TABLE PRE { padding-left: 0; margin: 0; }
      TABLE.jeps TD:first-child + TD,
      TABLE.jeps TD:first-child + TD + TD { padding-left: .5em; }
      TABLE.jeps TD:first-child,
      TABLE.jeps TD:first-child + TD,
      TABLE.jeps TD:first-child + TD + TD { font-size: smaller; }
      TABLE.jeps TD.cl { font-size: smaller; padding-right: 0; text-align: right; }
      TABLE.jeps TD.cm { font-size: smaller; padding-left: .1em; padding-right: .1em; }
      TABLE.jeps TD.cr { font-size: smaller; padding-left: 0; }
      TABLE.jeps TD.z { padding-left: 0; padding-right: 0; }
      TABLE.head TD { padding-top: 0; }
      .withdrawn { text-decoration: line-through; }
    </style></head><body><div id="main"><h1>JEP 201: Modular Source Code</h1><table class="head"><tr><td>Author</td><td>Mark Reinhold</td></tr><tr><td>Owner</td><td>Alan Bateman</td></tr><tr><td>Type</td><td>Feature</td></tr><tr><td>Scope</td><td>Implementation</td></tr><tr><td>Status</td><td>Closed&#8201;/&#8201;Delivered</td></tr><tr><td>Release</td><td>9</td></tr><tr><td>Discussion</td><td>jigsaw dash dev at openjdk dot java dot net</td></tr><tr><td>Effort</td><td>L</td></tr><tr><td>Duration</td><td>L</td></tr><tr><td>Blocks</td><td><a href="200">JEP 200: The Modular JDK</a></td></tr><tr><td>Relates to</td><td><a href="220">JEP 220: Modular Run-Time Images</a></td></tr><tr><td>Reviewed by</td><td>Alan Bateman, Alex Buckley, Mandy Chung, Paul Sandoz</td></tr><tr><td>Endorsed by</td><td>Brian Goetz</td></tr><tr><td>Created</td><td>2014/07/22 14:08</td></tr><tr><td>Updated</td><td>2017/12/28 07:53</td></tr><tr><td>Issue</td><td><a href="https://bugs.openjdk.java.net/browse/JDK-8051619">8051619</a></td></tr></table><div class="markdown"><h2 id="Summary">Summary</h2>
<p>Reorganize the JDK source code into modules, enhance the build system to
compile modules, and enforce module boundaries at build time.</p>
<h2 id="Non-Goals">Non-Goals</h2>
<p>This JEP does not change the structure of the JRE and JDK binary images,
nor does it introduce a module system.  That work is covered by the
related JEPs <a href="//openjdk.java.net/jeps/220">220</a> and
<a href="//openjdk.java.net/jeps/261">261</a>.</p>
<p>This JEP defines a new source-code layout for the JDK.  This layout may
be used outside of the JDK, but it is not a goal of this JEP to design a
broadly-accepted universal modular source-code layout.</p>
<h2 id="Motivation">Motivation</h2>
<p><a href="//openjdk.java.net/projects/jigsaw/">Project Jigsaw</a> aims to design and implement a standard module
system for the Java&#160;SE Platform and to apply that system to the
Platform itself, and to the JDK.  Its primary goals are to make
implementations of the Platform more easily scalable down to small
devices, improve security and maintainability, enable improved
application performance, and provide developers with better tools for
programming in the large.</p>
<p>The motivations to reorganize the source code include:</p>
<ol>
<li>
<p>Give JDK developers the opportunity to become familiar with the
modular structure of the system;</p>
</li>
<li>
<p>Preserve that structure going forward by enforcing module boundaries
in the build, even prior to the introduction of a module system; and</p>
</li>
<li>
<p>Enable development of Project Jigsaw to proceed without always
having to "shuffle" the present non-modular source code into modular
form.</p>
</li>
</ol>
<h2 id="Description">Description</h2>
<h3 id="Current-scheme">Current scheme</h3>
<p>Most of the JDK source code is today organized, roughly, in a scheme that
dates back to 1997.  In abbreviated form:</p>
<pre><code>src/{share,$OS}/{classes,native}/$PACKAGE/*.{java,c,h,cpp,hpp}</code></pre>
<p>where:</p>
<ul>
<li>
<p>The <code>share</code> directory contains shared, cross-platform code;</p>
</li>
<li>
<p>The <code>$OS</code> directory contains operating-system-specific code, where
<code>$OS</code> is one of <code>solaris</code>, <code>windows</code>, <em>etc.</em>;</p>
</li>
<li>
<p>The <code>classes</code> directory contains Java source files, and possibly
resource files;</p>
</li>
<li>
<p>The <code>native</code> directory contains C or C++ source files; and</p>
</li>
<li>
<p><code>$PACKAGE</code> is the relevant Java API package name, with periods
replaced by slashes.</p>
</li>
</ul>
<p>To take a simple example, the source code for the <code>java.lang.Object</code>
class in the <code>jdk</code> repository resides in two files, one in Java and the
other in C:</p>
<pre><code>src/share/classes/java/lang/Object.java
          native/java/lang/Object.c</code></pre>
<p>For a less trivial example, the source code for the package-private
<code>java.lang.ProcessImpl</code> and <code>ProcessEnvironment</code> classes is
operating-system-specific; for Unix-like systems it resides in three
files:</p>
<pre><code>src/solaris/classes/java/lang/ProcessImpl.java
                              ProcessEnvironment.java
            native/java/lang/ProcessEnvironment_md.c</code></pre>
<p>(Yes, the second-level directory is named <code>solaris</code> even though this code
is relevant to all Unix derivatives; more on this below.)</p>
<p>There are a handful of directories under <code>src/{share,$OS}</code> that don't
match the current structure, including:</p>
<pre><code>Directory                     Content
--------------------------    --------------------------
src/{share,$OS}/back          JDWP back end
                bin           Java launcher
                instrument    Instrumentation support
                javavm        Exported JVM include files
                lib           Files for $JAVA_HOME/lib
                transport     JDWP transports</code></pre>
<h3 id="New-scheme">New scheme</h3>
<p>The modularization of the JDK presents a rare opportunity to completely
restructure the source code in order to make it easier to maintain.  We
implement the following scheme in every repository in the JDK forest
except for <code>hotspot</code>.  In abbreviated form:</p>
<pre><code>src/$MODULE/{share,$OS}/classes/$PACKAGE/*.java
                        native/include/*.{h,hpp}
                               $LIBRARY/*.{c,cpp}
                        conf/*
                        legal/*</code></pre>
<p>where:</p>
<ul>
<li>
<p>$MODULE is a module name (<em>e.g.</em>, <code>java.base</code>);</p>
</li>
<li>
<p>The <code>share</code> directory contains shared, cross-platform code, as
before;</p>
</li>
<li>
<p>The <code>$OS</code> directory contains operating-system-specific code, as
before, where <code>$OS</code> is one of <code>unix</code>, <code>windows</code>, <em>etc.</em>;</p>
</li>
<li>
<p>The <code>classes</code> directory contains Java source files and resource files
organized into a directory tree reflecting their API <code>$PACKAGE</code>
hierarchy, as before;</p>
</li>
<li>
<p>The <code>native</code> directory contains C or C++ source files, as before but
organized differently:</p>
<ul>
<li>
<p>The <code>include</code> directory contains C or C++ header files intended to
be exported for external use (<em>e.g.</em>, <code>jni.h</code>);</p>
</li>
<li>
<p>C or C++ source files are placed in a <code>$LIBRARY</code> directory, whose
name is that of the shared library or DLL into which the compiled
code will be linked (<em>e.g.</em>, <code>libjava</code> or <code>libawt</code>); and, finally,</p>
</li>
</ul>
</li>
<li>
<p>The <code>conf</code> directory contains configuration files meant to be edited
by end users (<em>e.g.</em>, <code>net.properties</code>).</p>
</li>
<li>
<p>The <code>legal</code> directory contains legal notices.</p>
</li>
</ul>
<p>To recast the previous examples, the source code for the
<code>java.lang.Object</code> class is laid out as follows:</p>
<pre><code>src/java.base/share/classes/java/lang/Object.java
                    native/libjava/Object.c</code></pre>
<p>The source code for the package-private <code>java.lang.ProcessImpl</code> and
<code>ProcessEnvironment</code> classes is laid out this way:</p>
<pre><code>src/java.base/unix/classes/java/lang/ProcessImpl.java
                                     ProcessEnvironment.java
                   native/libjava/ProcessEnvironment_md.c</code></pre>
<p>(We took the opportunity here, finally, to rename the <code>solaris</code> directory
to <code>unix</code>.)</p>
<p>The content of the directories currently under <code>src/{share,$OS}</code> that
don't match the current structure is now in appropriate modules:</p>
<pre><code>Directory                     Module
--------------------------    --------------------------
src/{share,$OS}/back          jdk.jdwp.agent
                bin           java.base
                instrument    java.instrument
                javavm        java.base
                lib           $MODULE/{share,$OS}/conf
                transport     jdk.jdwp.agent</code></pre>
<p>Files in the current <code>lib</code> directory that are not intended to be edited
by end users are now resource files.</p>
<h3 id="Build-system-changes">Build-system changes</h3>
<p>The build system now compiles one module at a time rather than one
repository at a time, and it compiles modules according to a reverse
topological sort of the module graph.  Modules that do not depend on each
other, directly or indirectly, are compiled concurrently when possible.</p>
<p>A side benefit of compiling modules rather than repositories is that code
in the <code>corba</code>, <code>jaxp</code>, and <code>jaxws</code> repositories can make use of new Java
language features and APIs.  This was previously forbidden, since those
repositories were compiled before the <code>jdk</code> repository.</p>
<p>The compiled classes in an intermediate (<em>i.e.</em>, non-image) build are
divided into modules.  Where today we have:</p>
<pre><code>jdk/classes/*.class</code></pre>
<p>the revised build system produces:</p>
<pre><code>jdk/modules/$MODULE/*.class</code></pre>
<p>The structure of image builds, as noted, does not change; there are very
minor differences in their content.</p>
<p>Module boundaries are enforced at build time, insofar as possible, by the
build system.  If a module boundary is violated then the build will fail.</p>
<h2 id="Alternatives">Alternatives</h2>
<p>There are numerous other possible source-layout schemes, including:</p>
<ol>
<li>
<p>Keep <code>{share,$OS}</code> at the top, with a <code>modules</code> directory to contain
module class files:</p>
<pre><code>src/{share,$OS}/modules/$MODULE/$PACKAGE/*.java
                native/include/*.{h,hpp}
                       $LIBRARY/*.{c,cpp}
                conf/*</code></pre>
</li>
<li>
<p>Put everything under the appropriate <code>$MODULE</code> directory, but keep
<code>{share,$OS}</code> at the top:</p>
<pre><code>src/{share,$OS}/$MODULE/classes/$PACKAGE/*.java
                        native/include/*.{h,hpp}
                               $LIBRARY/*.{c,cpp}
                        conf/*</code></pre>
</li>
<li>
<p>Push <code>{share,$OS}</code> down into the <code>$MODULE</code> directories, as in the
present proposal, but remove the intermediate <code>classes</code> directory
and prefix the names of the <code>native</code> and <code>conf</code> directories with an
underscore, all so as to simplify the common case of pure Java
modules:</p>
<pre><code>src/$MODULE/{share,$OS}/$PACKAGE/*.java
                        _native/include/*.{h,hpp}
                                $LIBRARY/*.{c,cpp}
                        _conf/*</code></pre>
</li>
<li>
<p>A variant of scheme 3, but with <code>{share,$OS}</code> at the top:</p>
<pre><code>src/{share,$OS}/$MODULE/$PACKAGE/*.java
                        _native/include/*.{h,hpp}
                                $LIBRARY/*.{c,cpp}
                        _conf/*</code></pre>
</li>
<li>
<p>Another variant of scheme 3, pushing <code>{share,$OS}</code> deeper down so as
to further simplify the case of pure Java modules with no
<code>$OS</code>-specific code:</p>
<pre><code>src/$MODULE/$PACKAGE/*.java
            _native/include/*.{h,hpp}
                    $LIBRARY/*.{c,cpp}
            _conf/*
            _$OS/$PACKAGE/*.java
                _native/include/*.{h,hpp}
                        $LIBRARY/*.{c,cpp}
                _conf/*</code></pre>
</li>
</ol>
<p>We rejected the schemes involving underscores (3&#8211;5) as too
unfamiliar and difficult to navigate.  We prefer the present proposal
over schemes&#160;1 and&#160;2 because it entails the least change from
the current scheme while placing all of the source code for a module
under a single directory.  Tools and scripts that depend upon the current
scheme must be revised, but at least for Java source code the structure
underneath each <code>$MODULE</code> directory is the same as before.</p>
<p>Additional issues which we considered:</p>
<ul>
<li>
<p><em>Should we define distinct directories for resource files, so that
they would be separate from Java source files?</em> &#8212; No; this
does not seem worth the trouble.</p>
</li>
<li>
<p><em>Some modules have content that spans repositories; is this a
problem?</em> &#8212; It's an annoyance, but the build system can cope
with it via the magic of the <code>VPATH</code> mechanism.  Over time we might
restructure the repositories to reduce or even eliminate cross-repo
modules, but that's beyond the scope of this JEP.</p>
</li>
<li>
<p><em>Some modules have multiple native libraries; should we merge them so
that each module has at most one native library?</em> &#8212; No; in
some cases we need the flexibility of multiple native libraries per
module, <em>e.g.</em>, for "headless" <em>vs.</em> "headful" AWT.</p>
</li>
</ul>
<h2 id="Testing">Testing</h2>
<p>As stated, this JEP does not change the structure of the JRE and JDK
binary images, and makes only minor changes to the content.  We therefore
validated this change by comparing images built with it against images
built without it, and running tests to validate the actual minor changes.</p>
<h2 id="Risks-and-Assumptions">Risks and Assumptions</h2>
<p>We assumed that Mercurial would be able to handle the massive number of
file-rename operations that would be necessary to implement this change,
and to preserve all historical information in the process.  Early testing
showed Mercurial to be capable of this, but there is still a minor risk
that the relationships between the new and old locations of some files
were not properly recorded.  In that case the history of the file in its
old location will still be in the repository; it will just be more
difficult to find.</p>
<p>It is impossible to apply a patch created against a repository using the
old scheme directly to a repository using the new scheme, and vice versa.
To mitigate this we developed a script to translate the file names in a
patch from their old locations to their new locations.</p>
<h2 id="Dependences">Dependences</h2>
<p>This JEP is the second of several JEPs for <a href="//openjdk.java.net/projects/jigsaw/">Project Jigsaw</a>.  It
incorporates the definition of the modular structure of the JDK from
<a href="https://bugs.openjdk.java.net/browse/JDK-8051618">JEP 200</a>, but it does not explicitly depend upon that JEP.</p>
</div></div><div id="sidebar"><div id="openjdk-sidebar-logo"><a href="/"><img alt="OpenJDK logo" src="/images/openjdk-small.png" /></a></div><div class="links"><div class="links"><a href="/workshop"><b>Workshop</b></a></div></div><div class="links"><div class="link"><a href="/faq/">OpenJDK FAQ</a></div><div class="link"><a href="/install/">Installing</a></div><div class="link"><a href="/contribute/">Contributing</a></div><div class="link"><a href="/sponsor/">Sponsoring</a></div><div class="link"><a href="/guide/">Developers' Guide</a></div><div class="link"><a href="/groups/vulnerability/report">Vulnerabilities</a></div></div><div class="links"><div class="links"><a href="//mail.openjdk.java.net">Mailing lists</a></div><div class="link"><a href="/irc">IRC</a>
                      &#183; <a href="https://wiki.openjdk.java.net">Wiki</a></div></div><div class="links"><div class="links"><a href="/bylaws">Bylaws</a> &#183; <a href="/census">Census</a></div><div class="link"><a href="/legal/">Legal</a></div></div><div class="links"><div class="links"><a href="/jeps/0"><b>JEP Process</b></a></div></div><div class="links"><div class="link search"><form method="get" action="https://www.google.com/search"><input id="searchBox" style="color: gray" type="text" name="q" size="10" maxlength="255" value="search" /><input type="hidden" name="sitesearch" value="openjdk.java.net" /></form></div></div><div class="links"><div class="about">Source code</div><div class="link"><a href="//hg.openjdk.java.net">Mercurial</a></div><div class="link">Bundles (<a href="http://download.java.net/openjdk/jdk6">6</a>)</div></div><div class="links"><div class="about">Groups</div><div class="link"><a href="/groups/">(overview)</a></div><div class="link"><a href="/groups/2d">2D Graphics</a></div><div class="link"><a href="/groups/adoption">Adoption</a></div><div class="link"><a href="/groups/awt">AWT</a></div><div class="link"><a href="/groups/build">Build</a></div><div class="link"><a href="/groups/csr">Compatibility &amp; Specification Review</a></div><div class="link"><a href="/groups/compiler">Compiler</a></div><div class="link"><a href="/groups/conformance">Conformance</a></div><div class="link"><a href="/groups/core-libs">Core Libraries</a></div><div class="link"><a href="/groups/gb">Governing Board</a></div><div class="link"><a href="/groups/hotspot">HotSpot</a></div><div class="link"><a href="/groups/ide-support">IDE Tooling &amp; Support</a></div><div class="link"><a href="/groups/i18n">Internationalization</a></div><div class="link"><a href="/groups/jmx">JMX</a></div><div class="link"><a href="/groups/members">Members</a></div><div class="link"><a href="/groups/net">Networking</a></div><div class="link"><a href="/groups/nb-projects">NetBeans Projects</a></div><div class="link"><a href="/groups/porters">Porters</a></div><div class="link"><a href="/groups/quality">Quality</a></div><div class="link"><a href="/groups/security">Security</a></div><div class="link"><a href="/groups/serviceability">Serviceability</a></div><div class="link"><a href="/groups/sound">Sound</a></div><div class="link"><a href="/groups/swing">Swing</a></div><div class="link"><a href="/groups/vulnerability">Vulnerability</a></div><div class="link"><a href="/groups/web">Web</a></div></div><div class="links"><div class="about">Projects</div><div class="link"><a href="/projects/">(overview)</a></div><div class="link"><a href="/projects/amber">Amber</a></div><div class="link"><a href="/projects/anno-pipeline">Annotations Pipeline 2.0</a></div><div class="link"><a href="/projects/audio-engine">Audio Engine</a></div><div class="link"><a href="/projects/build-infra">Build Infrastructure</a></div><div class="link"><a href="/projects/caciocavallo">Caciocavallo</a></div><div class="link"><a href="/projects/closures">Closures</a></div><div class="link"><a href="/projects/code-tools">Code Tools</a></div><div class="link"><a href="/projects/coin">Coin</a></div><div class="link"><a href="/projects/cvmi">Common VM Interface</a></div><div class="link"><a href="/projects/compiler-grammar">Compiler Grammar</a></div><div class="link"><a href="/projects/detroit">Detroit</a></div><div class="link"><a href="/projects/dio">Device I/O</a></div><div class="link"><a href="/projects/duke">Duke</a></div><div class="link"><a href="/projects/font-scaler">Font Scaler</a></div><div class="link"><a href="/projects/fbtoolkit">Framebuffer Toolkit</a></div><div class="link"><a href="/projects/graal">Graal</a></div><div class="link"><a href="/projects/graphics-rasterizer">Graphics Rasterizer</a></div><div class="link"><a href="/projects/harfbuzz">HarfBuzz Integration</a></div><div class="link"><a href="/projects/icedtea">IcedTea</a></div><div class="link"><a href="/projects/jdk6">JDK 6</a></div><div class="link"><a href="/projects/jdk7">JDK 7</a></div><div class="link"><a href="/projects/jdk7u">JDK 7 Updates</a></div><div class="link"><a href="/projects/jdk8">JDK 8</a></div><div class="link"><a href="/projects/jdk8u">JDK 8 Updates</a></div><div class="link"><a href="/projects/jdk9">JDK 9</a></div><div class="link"><a href="/projects/jdk">JDK</a>
      (&#8230;
       <a href="/projects/jdk/12">12</a>,
       <a href="/projects/jdk/13">13</a>,
       <a href="/projects/jdk/14">14</a>)</div><div class="link"><a href="/projects/jdk-updates">JDK Updates</a></div><div class="link"><a href="/projects/javadoc-next">JavaDoc.Next</a></div><div class="link"><a href="/projects/jigsaw">Jigsaw</a></div><div class="link"><a href="/projects/kona">Kona</a></div><div class="link"><a href="/projects/kulla">Kulla</a></div><div class="link"><a href="/projects/lambda">Lambda</a></div><div class="link"><a href="/projects/lanai">Lanai</a></div><div class="link"><a href="/projects/locale-enhancement">Locale Enhancement</a></div><div class="link"><a href="/projects/loom">Loom</a></div><div class="link"><a href="/projects/jmm">Memory Model Update</a></div><div class="link"><a href="/projects/metropolis">Metropolis</a></div><div class="link"><a href="/projects/jmc">Mission Control</a></div><div class="link"><a href="/projects/mobile">Mobile</a></div><div class="link"><a href="/projects/modules">Modules</a></div><div class="link"><a href="/projects/mlvm">Multi-Language VM</a></div><div class="link"><a href="/projects/nashorn">Nashorn</a></div><div class="link"><a href="/projects/nio">New I/O</a></div><div class="link"><a href="/projects/openjfx">OpenJFX</a></div><div class="link"><a href="/projects/panama">Panama</a></div><div class="link"><a href="/projects/penrose">Penrose</a></div><div class="link"><a href="/projects/aarch32-port">Port: AArch32</a></div><div class="link"><a href="/projects/aarch64-port">Port: AArch64</a></div><div class="link"><a href="/projects/bsd-port">Port: BSD</a></div><div class="link"><a href="/projects/haiku-port">Port: Haiku</a></div><div class="link"><a href="/projects/macosx-port">Port: Mac OS X</a></div><div class="link"><a href="/projects/mips-port">Port: MIPS</a></div><div class="link"><a href="/projects/ppc-aix-port">Port: PowerPC/AIX</a></div><div class="link"><a href="/projects/s390x-port">Port: s390x</a></div><div class="link"><a href="/projects/portola">Portola</a></div><div class="link"><a href="/projects/sctp">SCTP</a></div><div class="link"><a href="/projects/skara">Skara</a></div><div class="link"><a href="/projects/shenandoah">Shenandoah</a></div><div class="link"><a href="/projects/sumatra">Sumatra</a></div><div class="link"><a href="/projects/threeten">ThreeTen</a></div><div class="link"><a href="/projects/tiered-attrib">Tiered Attribution</a></div><div class="link"><a href="/projects/tsan">Tsan</a></div><div class="link"><a href="/projects/type-annotations">Type Annotations</a></div><div class="link"><a href="/projects/xrender">XRender Pipeline</a></div><div class="link"><a href="/projects/valhalla">Valhalla</a></div><div class="link"><a href="/projects/verona">Verona</a></div><div class="link"><a href="/projects/visualvm">VisualVM</a></div><div class="link"><a href="/projects/zero">Zero</a></div><div class="link"><a href="/projects/zgc">ZGC</a></div></div><div class="links"><div class="about">Tools</div><div class="link"><a href="http://java.sun.com/javase/downloads/index.jsp">Java SE</a></div><div class="link"><a href="http://mercurial-scm.org/mercurial/">Mercurial</a></div><div class="link"><a href="/jtreg/index.html">jtreg harness</a></div></div><div class="links"><div class="about">Related</div><div class="link"><a href="http://planetjdk.org">Planet JDK</a></div><div class="link"><a href="http://java.sun.com">java.sun.com</a></div><div class="link"><a href="http://jcp.org">Java Community Process</a></div><div class="link"><a href="//jdk.java.net">JDK GA/EA Builds</a></div></div><div class="buttons"><a href="http://oracle.com"><img alt="Oracle logo" src="/images/oracle.png" /></a></div></div><div id="footer">

        &#169; 2019 Oracle Corporation and/or its affiliates
        <br /><a href="/legal/tou/">Terms of Use</a>
        &#183;
        
            License: <a href="/legal/gplv2+ce.html">GPLv2</a>
        &#183; <a href="http://www.oracle.com/us/legal/privacy/">Privacy</a>
        &#183; <a href="http://www.oracle.com/us/legal/third-party-trademarks/third-party-trademarks-078568.html">Trademarks</a></div><SCRIPT type="text/javascript">
  var sc_project=2527440;
  var sc_invisible=1;
  var sc_partition=24;
  var sc_security="d832a704";
  var sc_remove_link=1;
  </SCRIPT><script type="text/javascript" src="https://www.statcounter.com/counter/counter_xhtml.js" async="yes"></script><noscript><div class="statcounter"><img class="statcounter" src="https://c.statcounter.com/2527440/0/d832a704/1/" alt="web statistics" /></div></noscript></body></html>
