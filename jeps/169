<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=us-ascii" /><meta http-equiv="Content-Type" content="text/html; charset=us-ascii" /><title>JEP 169: Value Objects</title><link rel="shortcut icon" href="/images/nanoduke.ico" /><link rel="stylesheet" type="text/css" href="/page.css" /><script type="text/javascript" src="/page.js"><noscript></noscript></script><style type="text/css" xml:space="preserve">
      TABLE { border-collapse: collapse; padding: 0px; margin: 1em 0; }
      TR:first-child TH, TR:first-child TD { padding-top: 0; }
      TH, TD { padding: 0px; padding-top: .5ex; vertical-align: baseline; text-align: left; }
      TD + TD, TH + TH { padding-left: 1em; }
      TD:first-child, TH:first-child, TD.jep { text-align: right; }
      TABLE.head TD:first-child { font-style: italic; padding-left: 2em; }
      PRE { padding-left: 2em; margin: 1ex 0; font-size: inherit; }
      TABLE PRE { padding-left: 0; margin: 0; }
      TABLE.jeps TD:first-child + TD,
      TABLE.jeps TD:first-child + TD + TD { padding-left: .5em; }
      TABLE.jeps TD:first-child,
      TABLE.jeps TD:first-child + TD,
      TABLE.jeps TD:first-child + TD + TD { font-size: smaller; }
      TABLE.jeps TD.cl { font-size: smaller; padding-right: 0; text-align: right; }
      TABLE.jeps TD.cm { font-size: smaller; padding-left: .1em; padding-right: .1em; }
      TABLE.jeps TD.cr { font-size: smaller; padding-left: 0; }
      TABLE.jeps TD.z { padding-left: 0; padding-right: 0; }
      TABLE.head TD { padding-top: 0; }
      .withdrawn { text-decoration: line-through; }
    </style></head><body><div id="main"><h1>JEP 169: Value Objects</h1><table class="head"><tr><td>Owner</td><td>John Rose</td></tr><tr><td>Type</td><td>Feature</td></tr><tr><td>Scope</td><td>SE</td></tr><tr><td>Status</td><td>Draft</td></tr><tr><td>Component</td><td>hotspot&#8201;/&#8201;compiler</td></tr><tr><td>Discussion</td><td>mlvm dash dev at openjdk dot java dot net</td></tr><tr><td>Effort</td><td>L</td></tr><tr><td>Duration</td><td>L</td></tr><tr><td>Created</td><td>2012/10/22 20:00</td></tr><tr><td>Updated</td><td>2019/10/12 18:14</td></tr><tr><td>Issue</td><td><a href="https://bugs.openjdk.java.net/browse/JDK-8046159">8046159</a></td></tr></table><div class="markdown"><h2 id="Summary">Summary</h2>
<p>Provide JVM infrastructure for working with immutable and reference-free
objects, in support of efficient by-value computation with non-primitive
types.</p>
<h2 id="Goals">Goals</h2>
<ul>
<li>
<p>Support user-defined and library-defined abstract data types with
performance profiles similar to Java primitive types.</p>
</li>
<li>
<p>Bring the semantics of <code>int</code> and <code>java.lang.Integer</code> closer together.</p>
</li>
<li>
<p>Allow representation of ubiquitous types currently not well supported
on the JVM, including complex numbers, vector values, and tuples.</p>
</li>
<li>
<p>Increase shareability of Java data structures.</p>
</li>
<li>
<p>Provide clear and explicit semantics for shared read-only array data.</p>
</li>
<li>
<p>Enable functional-style computation with pure data, for optimized
parallel computations.</p>
</li>
<li>
<p>Increase safety and security and decrease "defensive copying" in
applications which must share structured data across trust
boundaries.</p>
</li>
</ul>
<h2 id="Non-Goals">Non-Goals</h2>
<p>This work is not intended to change the Java Language Specification or
JVM bytecode instruction set.</p>
<h2 id="Motivation">Motivation</h2>
<p>In Java, primitive types are a principal factor in coding for reasonable
performance.  For example, programmers expect an array of <code>int</code>s to be
cheaper to work with than a <code>List</code> of <code>Integer</code> objects, and they code
accordingly.</p>
<p>In modern JVMs, object allocation is inexpensive, with a cost comparable
to out-of-line procedure calling.  But even this cost is often a painful
overhead when compared to individual operations on primitive values.
Thus, Java programmers face a binary choice between existing primitive
types (which avoid allocation) and other types (which allow data
abstraction and other benefits of classes).  When they need to define
small composite values such as complex numbers, pixels, or pairs of
return values, neither approach serves.  This dilemma often has no good
solution, and the workarounds distort Java programs and APIs.  Consider,
for example, the lack of a good complex number type for those who program
numeric algorithms in Java.</p>
<p>Unlike the days when Java was designed, modern hardware now routinely
operates on values larger than 64 bits, which we may collectively call
"vectors".  It is difficult to work with vector values from Java because
they cannot be directly represented in Java code without creating a
temporary object.  A mutable object (often an array) can be created to
hold the components of such a vector value, but this is merely a
workaround, which does not qualify as direct representation of the value,
since the same object will (in general) successively hold a series of
values.  Alternatively, an immutable object can be created, which
qualifies as a direct representation, but each new value requires
creating a new object.  The costs are often high enough to discourage
programmers from using the direct representation.</p>
<p>There are optimizations which can eliminate object allocation in some
regions of code.  For example, objects can sometimes be "scalarized" into
their component fields, if an escape analysis can be successfully carried
out.  However, such optimizations are limited in scope and applicability.
For out-of-line calls, objects must still be boxed into memory, as long
as existing Java reference semantics are enforced.  Without new rules
relaxing reference semantics, local escape analyses cannot be relied on
to remove boxing overheads from objects, no matter how similar they are
to primitive types.</p>
<p>We need new rules which will allow some Java objects to be routinely
represented as unboxed groups of scalar values and/or vector registers,
and (when that fails) to represent values directly and efficiently as
immutable boxed values.</p>
<h2 id="Description">Description</h2>
<p>A new operator <code>lockPermanently</code> will be defined which takes an <code>Object</code>
and marks it as immutable and unaliasable.</p>
<p>The use of this operator is formally similar to <code>Object.clone</code>, except
that the original object will be returned in a new locked state.  Similar
to <code>clone</code>, the operator will be idempotent.</p>
<p>It may be expedient to place limits on the subsequent use of inputs to
the locking operator, although this might require changes to the
verifier.</p>
<p>In general, a permanently locked object cannot be subjected meaningfully
to any operation that depends on the reference identity of the object.
An operation depends on reference identity if the operation produces
different results depending on whether it applies to the original object
or one of its clones.  Thus:</p>
<ul>
<li>Fields and array elements cannot be changed.</li>
<li>Synchronization cannot be performed.</li>
<li>Methods for waiting or notifying cannot be invoked.</li>
<li>An identity hash code cannot be queried.</li>
<li>Pointer equality checks should not be performed.</li>
</ul>
<p>Except for pointer equality checks, forbidden operations will throw some
sort of exception.  How to control pointer equality checks is an open
question with several possible answers.</p>
<p>Permanent locking will apply to the wrapper types <code>Integer</code>, <code>Boolean</code>,
etc.  The standard primitive boxing methods <code>valueOf</code> will produce
permanently locked objects.</p>
<p>Permanent locking will apply to all array types.  An overloaded method
such as <code>Arrays.lockedCopyOf</code> is likely to be supplied.</p>
<p>There will be restrictions on the static form of classes that support
locking.  (Examples: all fields must be <code>final</code> and/or a marker interface
must be declared.)  There will be a design pattern for value-oriented
classes (like <code>Complex</code>) which support locking.</p>
<p>When an object is locked, the JVM is allowed to box and unbox the object
much more freely.  Specifically, the JVM will be free to insert virtual
<em>reboxing</em> operations at any method invocation for any boxed object which
is a method argument or return value.  A reboxing operation potentially
substitutes one reference for an equivalent one.  Reboxing can produce
either completely new copies of an object, or reuse an old one.  The
reuse can be global, and therefore JVMs are allowed (but not required) to
perform interning.</p>
<p>Once the JVM is free to insert virtual reboxing operations, it can create
customized calling sequences for methods that operate on value-oriented
classes, which transmit the components of the values, delaying (and
usually eliminating) boxing operations.  Note that returning a value type
with multiple components (such as a tuple) is indistinguishable (at the
machine code level) to a multiple-value or struct return.</p>
<p>Specialized value-oriented calling sequences can be confined to compiled
code.  The interpreter can continue to operate as it does today.</p>
<p>Additional design notes are kept <a href="//hg.openjdk.java.net/mlvm/mlvm/hotspot/raw-file/tip/value-obj-8001111.txt">in the MLVM repository</a>.</p>
<h2 id="Alternatives">Alternatives</h2>
<p>Programmers currently must use what Rich Hickey calls
<a href="http://www.infoq.com/presentations/Value-Values">place-oriented programming</a> in mutable arrays or buffer objects,
when working with composite values.  They could simply continue this.</p>
<p>It should be emphasized that place-oriented programming in Java is an
anti-pattern, because it blurs the correspondence between Java variables
and application values.  If a value is implicitly defined by being stored
in two or more Java variables, there is no way to work with it directly
as as single variable, method argument, or return value.  The programmer
is required to manage aliasable "places" to store the value components,
as well as the values stored in them.  Any optimizing compiler is
hard-pressed to distinguish the two.</p>
<p>Local escape analysis could be extended (with heroic efforts) to
interprocedural escape analysis, allowing methods to pass object fields
in registers, delaying object creation perhaps indefinitely.  Without new
rules for permanently locked objects, the existing rules for field
mutability and object identity tracking would require complex, probably
unworkable, additional data to be passed between methods along with the
object field values.</p>
<p>We could add new <a href="http://blogs.oracle.com/jrose/entry/value_types_in_the_vm">explicit tuple types</a> to the JVM, providing a
more explicit third option between classes and primitives.</p>
<p>In the case of arrays, we could introduce a new set of types for
representing immutable array values, instead of providing the means for
locking arrays.  This would be confusing to programmers and lead to extra
copying between working mutable array values and new immutable arrays.</p>
<p>We could also use the existing rules (rather delicate rules in the Java
Memory Model) for <em>de facto</em> immutable arrays, which state that an array
accessed only by a final field may be regarded as stable, and that
changes are race conditions.  These current rules require routine
defensive copying of arrays before storing them in final fields of
objects which might be shared.  The current proposal is better, because
it makes the stabilization step (often a memory fence) to be more
explicit.  It also defends more vigorously against race conditions, by
throwing an exception when a write is attempted to a permanently locked
array.  Finally, defensive copies can be eliminated in the current
proposal.</p>
<p>The concept of permanent locking could be applied to class (or other
types) instead of individual objects.  This might simplify some JVM
optimizations, although in practice some classes (like <code>Integer</code>) will be
99.99% locked.</p>
<p>Advantages of per-instance locking are:</p>
<ul>
<li>
<p>A clear story about mutability during initialization.</p>
</li>
<li>
<p>Simple interoperability with existing Java array types.</p>
</li>
<li>
<p>Compatibility with reference-oriented use of wrappers (<code>new Integer(n)</code> vs. <code>Integer.valueOf(n)</code>).</p>
</li>
</ul>
<p>JITs can use optimistic techniques to specialize code for value objects
even when some uses are reference-oriented.</p>
<p>(For more discussion of mutability during initialization of read-only
objects, see <a href="http://blogs.oracle.com/jrose/entry/larval_objects_in_the_vm">larval objects</a>.)</p>
<p>Note: None of these alternatives seem to promise a mechanism for
routinely unboxing composite values (or even <code>Integer</code> values) across
method call boundaries.</p>
<h2 id="Testing">Testing</h2>
<ul>
<li>
<p>Existing tests for array operations should be adapted to test for
correct enforcement of locking.</p>
</li>
<li>
<p>Existing tests for object field operations (where applicable) should
be adapted to test for correct enforcement of locking.</p>
</li>
<li>
<p>Likewise, existing tests for synchronization, identity hashing, and
pointer comparison should be adapted.</p>
</li>
<li>
<p>Concurrency tests should verify that locking an object properly
flushes its fields for publication.</p>
</li>
<li>
<p>Performance tests should verify that loops producing sequences of
composite values do not create a significant GC load.</p>
</li>
<li>
<p>Beta versions of the system should be supplied to developers and end
users to ensure that new restrictions on wrapper values (<code>Integer</code>,
etc.) are not violated by existing applications.  Workarounds may be
needed.</p>
</li>
<li>
<p>Sample value types should be implemented and used experimentally to
validate the mechanism.</p>
</li>
</ul>
</div></div><div id="sidebar"><div id="openjdk-sidebar-logo"><a href="/"><img alt="OpenJDK logo" src="/images/openjdk-small.png" /></a></div><div class="links"><div class="links"><a href="/workshop"><b>Workshop</b></a></div></div><div class="links"><div class="link"><a href="/faq/">OpenJDK FAQ</a></div><div class="link"><a href="/install/">Installing</a></div><div class="link"><a href="/contribute/">Contributing</a></div><div class="link"><a href="/sponsor/">Sponsoring</a></div><div class="link"><a href="/guide/">Developers' Guide</a></div><div class="link"><a href="/groups/vulnerability/report">Vulnerabilities</a></div></div><div class="links"><div class="links"><a href="//mail.openjdk.java.net">Mailing lists</a></div><div class="link"><a href="/irc">IRC</a>
                      &#183; <a href="https://wiki.openjdk.java.net">Wiki</a></div></div><div class="links"><div class="links"><a href="/bylaws">Bylaws</a> &#183; <a href="/census">Census</a></div><div class="link"><a href="/legal/">Legal</a></div></div><div class="links"><div class="links"><a href="/jeps/0"><b>JEP Process</b></a></div></div><div class="links"><div class="link search"><form method="get" action="https://www.google.com/search"><input id="searchBox" style="color: gray" type="text" name="q" size="10" maxlength="255" value="search" /><input type="hidden" name="sitesearch" value="openjdk.java.net" /></form></div></div><div class="links"><div class="about">Source code</div><div class="link"><a href="//hg.openjdk.java.net">Mercurial</a></div><div class="link">Bundles (<a href="http://download.java.net/openjdk/jdk6">6</a>)</div></div><div class="links"><div class="about">Groups</div><div class="link"><a href="/groups/">(overview)</a></div><div class="link"><a href="/groups/2d">2D Graphics</a></div><div class="link"><a href="/groups/adoption">Adoption</a></div><div class="link"><a href="/groups/awt">AWT</a></div><div class="link"><a href="/groups/build">Build</a></div><div class="link"><a href="/groups/csr">Compatibility &amp; Specification Review</a></div><div class="link"><a href="/groups/compiler">Compiler</a></div><div class="link"><a href="/groups/conformance">Conformance</a></div><div class="link"><a href="/groups/core-libs">Core Libraries</a></div><div class="link"><a href="/groups/gb">Governing Board</a></div><div class="link"><a href="/groups/hotspot">HotSpot</a></div><div class="link"><a href="/groups/ide-support">IDE Tooling &amp; Support</a></div><div class="link"><a href="/groups/i18n">Internationalization</a></div><div class="link"><a href="/groups/jmx">JMX</a></div><div class="link"><a href="/groups/members">Members</a></div><div class="link"><a href="/groups/net">Networking</a></div><div class="link"><a href="/groups/nb-projects">NetBeans Projects</a></div><div class="link"><a href="/groups/porters">Porters</a></div><div class="link"><a href="/groups/quality">Quality</a></div><div class="link"><a href="/groups/security">Security</a></div><div class="link"><a href="/groups/serviceability">Serviceability</a></div><div class="link"><a href="/groups/sound">Sound</a></div><div class="link"><a href="/groups/swing">Swing</a></div><div class="link"><a href="/groups/vulnerability">Vulnerability</a></div><div class="link"><a href="/groups/web">Web</a></div></div><div class="links"><div class="about">Projects</div><div class="link"><a href="/projects/">(overview)</a></div><div class="link"><a href="/projects/amber">Amber</a></div><div class="link"><a href="/projects/anno-pipeline">Annotations Pipeline 2.0</a></div><div class="link"><a href="/projects/audio-engine">Audio Engine</a></div><div class="link"><a href="/projects/build-infra">Build Infrastructure</a></div><div class="link"><a href="/projects/caciocavallo">Caciocavallo</a></div><div class="link"><a href="/projects/closures">Closures</a></div><div class="link"><a href="/projects/code-tools">Code Tools</a></div><div class="link"><a href="/projects/coin">Coin</a></div><div class="link"><a href="/projects/cvmi">Common VM Interface</a></div><div class="link"><a href="/projects/compiler-grammar">Compiler Grammar</a></div><div class="link"><a href="/projects/detroit">Detroit</a></div><div class="link"><a href="/projects/dio">Device I/O</a></div><div class="link"><a href="/projects/duke">Duke</a></div><div class="link"><a href="/projects/font-scaler">Font Scaler</a></div><div class="link"><a href="/projects/fbtoolkit">Framebuffer Toolkit</a></div><div class="link"><a href="/projects/graal">Graal</a></div><div class="link"><a href="/projects/graphics-rasterizer">Graphics Rasterizer</a></div><div class="link"><a href="/projects/harfbuzz">HarfBuzz Integration</a></div><div class="link"><a href="/projects/icedtea">IcedTea</a></div><div class="link"><a href="/projects/jdk6">JDK 6</a></div><div class="link"><a href="/projects/jdk7">JDK 7</a></div><div class="link"><a href="/projects/jdk7u">JDK 7 Updates</a></div><div class="link"><a href="/projects/jdk8">JDK 8</a></div><div class="link"><a href="/projects/jdk8u">JDK 8 Updates</a></div><div class="link"><a href="/projects/jdk9">JDK 9</a></div><div class="link"><a href="/projects/jdk">JDK</a>
      (&#8230;
       <a href="/projects/jdk/12">12</a>,
       <a href="/projects/jdk/13">13</a>,
       <a href="/projects/jdk/14">14</a>)</div><div class="link"><a href="/projects/jdk-updates">JDK Updates</a></div><div class="link"><a href="/projects/javadoc-next">JavaDoc.Next</a></div><div class="link"><a href="/projects/jigsaw">Jigsaw</a></div><div class="link"><a href="/projects/kona">Kona</a></div><div class="link"><a href="/projects/kulla">Kulla</a></div><div class="link"><a href="/projects/lambda">Lambda</a></div><div class="link"><a href="/projects/lanai">Lanai</a></div><div class="link"><a href="/projects/locale-enhancement">Locale Enhancement</a></div><div class="link"><a href="/projects/loom">Loom</a></div><div class="link"><a href="/projects/jmm">Memory Model Update</a></div><div class="link"><a href="/projects/metropolis">Metropolis</a></div><div class="link"><a href="/projects/jmc">Mission Control</a></div><div class="link"><a href="/projects/mobile">Mobile</a></div><div class="link"><a href="/projects/modules">Modules</a></div><div class="link"><a href="/projects/mlvm">Multi-Language VM</a></div><div class="link"><a href="/projects/nashorn">Nashorn</a></div><div class="link"><a href="/projects/nio">New I/O</a></div><div class="link"><a href="/projects/openjfx">OpenJFX</a></div><div class="link"><a href="/projects/panama">Panama</a></div><div class="link"><a href="/projects/penrose">Penrose</a></div><div class="link"><a href="/projects/aarch32-port">Port: AArch32</a></div><div class="link"><a href="/projects/aarch64-port">Port: AArch64</a></div><div class="link"><a href="/projects/bsd-port">Port: BSD</a></div><div class="link"><a href="/projects/haiku-port">Port: Haiku</a></div><div class="link"><a href="/projects/macosx-port">Port: Mac OS X</a></div><div class="link"><a href="/projects/mips-port">Port: MIPS</a></div><div class="link"><a href="/projects/ppc-aix-port">Port: PowerPC/AIX</a></div><div class="link"><a href="/projects/s390x-port">Port: s390x</a></div><div class="link"><a href="/projects/portola">Portola</a></div><div class="link"><a href="/projects/sctp">SCTP</a></div><div class="link"><a href="/projects/skara">Skara</a></div><div class="link"><a href="/projects/shenandoah">Shenandoah</a></div><div class="link"><a href="/projects/sumatra">Sumatra</a></div><div class="link"><a href="/projects/threeten">ThreeTen</a></div><div class="link"><a href="/projects/tiered-attrib">Tiered Attribution</a></div><div class="link"><a href="/projects/tsan">Tsan</a></div><div class="link"><a href="/projects/type-annotations">Type Annotations</a></div><div class="link"><a href="/projects/xrender">XRender Pipeline</a></div><div class="link"><a href="/projects/valhalla">Valhalla</a></div><div class="link"><a href="/projects/verona">Verona</a></div><div class="link"><a href="/projects/visualvm">VisualVM</a></div><div class="link"><a href="/projects/zero">Zero</a></div><div class="link"><a href="/projects/zgc">ZGC</a></div></div><div class="links"><div class="about">Tools</div><div class="link"><a href="http://java.sun.com/javase/downloads/index.jsp">Java SE</a></div><div class="link"><a href="http://mercurial-scm.org/mercurial/">Mercurial</a></div><div class="link"><a href="/jtreg/index.html">jtreg harness</a></div></div><div class="links"><div class="about">Related</div><div class="link"><a href="http://planetjdk.org">Planet JDK</a></div><div class="link"><a href="http://java.sun.com">java.sun.com</a></div><div class="link"><a href="http://jcp.org">Java Community Process</a></div><div class="link"><a href="//jdk.java.net">JDK GA/EA Builds</a></div></div><div class="buttons"><a href="http://oracle.com"><img alt="Oracle logo" src="/images/oracle.png" /></a></div></div><div id="footer">

        &#169; 2019 Oracle Corporation and/or its affiliates
        <br /><a href="/legal/tou/">Terms of Use</a>
        &#183;
        
            License: <a href="/legal/gplv2+ce.html">GPLv2</a>
        &#183; <a href="http://www.oracle.com/us/legal/privacy/">Privacy</a>
        &#183; <a href="http://www.oracle.com/us/legal/third-party-trademarks/third-party-trademarks-078568.html">Trademarks</a></div><SCRIPT type="text/javascript">
  var sc_project=2527440;
  var sc_invisible=1;
  var sc_partition=24;
  var sc_security="d832a704";
  var sc_remove_link=1;
  </SCRIPT><script type="text/javascript" src="https://www.statcounter.com/counter/counter_xhtml.js" async="yes"></script><noscript><div class="statcounter"><img class="statcounter" src="https://c.statcounter.com/2527440/0/d832a704/1/" alt="web statistics" /></div></noscript></body></html>
