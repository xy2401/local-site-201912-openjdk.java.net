<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=us-ascii" /><meta http-equiv="Content-Type" content="text/html; charset=us-ascii" /><title>JEP 178: Statically-Linked JNI Libraries</title><link rel="shortcut icon" href="/images/nanoduke.ico" /><link rel="stylesheet" type="text/css" href="/page.css" /><script type="text/javascript" src="/page.js"><noscript></noscript></script><style type="text/css" xml:space="preserve">
      TABLE { border-collapse: collapse; padding: 0px; margin: 1em 0; }
      TR:first-child TH, TR:first-child TD { padding-top: 0; }
      TH, TD { padding: 0px; padding-top: .5ex; vertical-align: baseline; text-align: left; }
      TD + TD, TH + TH { padding-left: 1em; }
      TD:first-child, TH:first-child, TD.jep { text-align: right; }
      TABLE.head TD:first-child { font-style: italic; padding-left: 2em; }
      PRE { padding-left: 2em; margin: 1ex 0; font-size: inherit; }
      TABLE PRE { padding-left: 0; margin: 0; }
      TABLE.jeps TD:first-child + TD,
      TABLE.jeps TD:first-child + TD + TD { padding-left: .5em; }
      TABLE.jeps TD:first-child,
      TABLE.jeps TD:first-child + TD,
      TABLE.jeps TD:first-child + TD + TD { font-size: smaller; }
      TABLE.jeps TD.cl { font-size: smaller; padding-right: 0; text-align: right; }
      TABLE.jeps TD.cm { font-size: smaller; padding-left: .1em; padding-right: .1em; }
      TABLE.jeps TD.cr { font-size: smaller; padding-left: 0; }
      TABLE.jeps TD.z { padding-left: 0; padding-right: 0; }
      TABLE.head TD { padding-top: 0; }
      .withdrawn { text-decoration: line-through; }
    </style></head><body><div id="main"><h1>JEP 178: Statically-Linked JNI Libraries</h1><table class="head"><tr><td>Owner</td><td>Bob Vandette</td></tr><tr><td>Type</td><td>Feature</td></tr><tr><td>Scope</td><td>SE</td></tr><tr><td>Status</td><td>Closed&#8201;/&#8201;Delivered</td></tr><tr><td>Release</td><td>8</td></tr><tr><td>Component</td><td>core-libs</td></tr><tr><td>Discussion</td><td>jdk8 dash dev at openjdk dot java dot net</td></tr><tr><td>Effort</td><td>S</td></tr><tr><td>Duration</td><td>S</td></tr><tr><td>Reviewed by</td><td>Alan Bateman, Alex Buckley</td></tr><tr><td>Endorsed by</td><td>Mark Reinhold</td></tr><tr><td>Created</td><td>2013/02/18 20:00</td></tr><tr><td>Updated</td><td>2016/06/07 16:40</td></tr><tr><td>Issue</td><td><a href="https://bugs.openjdk.java.net/browse/JDK-8046168">8046168</a></td></tr></table><div class="markdown"><h2 id="Summary">Summary</h2>
<p>Enhance the JNI specification to support statically linked native
libraries.</p>
<h2 id="Goals">Goals</h2>
<ol>
<li>
<p>Modify the Java SE specification, and the JDK, to enable developers
to package a Java runtime, native application code, and Java
application code together into a single binary executable that does
not require the use of shared native libraries.</p>
</li>
<li>
<p>Require no changes to existing Java code in order to use a static
native library as opposed to a dynamic native library.  A method
invocation of the form <code>System.loadLibrary("foo")</code>, in particular,
should be able to load the <code>"foo"</code> library regardless of whether
that library is provided in static or dynamic form.</p>
</li>
<li>
<p>Allow a Java application to use a combination of static and dynamic
native libraries, although static libraries must be in memory prior
to any attempt to use them.</p>
</li>
<li>
<p>Allow JVMTI Java Agents to be optionally statically linked with Java
runtimes.</p>
</li>
</ol>
<h2 id="Non-Goals">Non-Goals</h2>
<p>It is not a goal to preserve complete native C/C++ source compatibility
for existing dynamic native libraries that are converted to static form.
Existing uses of the <code>JNI_OnLoad</code> and <code>JNI_OnUnLoad</code> functions will need
to be modified in order to allow multiple static libraries to co-exist.</p>
<h2 id="Motivation">Motivation</h2>
<p>There are two major scenarios in which static JNI libraries can be
useful:</p>
<ol>
<li>
<p>Native applications that embed the JRE may wish to use
statically linked JNI code rather than dynamically-linked libraries.</p>
</li>
<li>
<p>Java applications running in environments that limit or do not
support shared libraries require a JRE and all of its native
API-library code to be linked into a single executable.</p>
</li>
</ol>
<p>As an additional benefit, with statically linked JNI libraries an
object-file linker can optimize the entire executable, potentially
reducing its size.</p>
<h2 id="Description">Description</h2>
<p>Two main problems need to be addressed to add support for static JNI
libraries:</p>
<ol>
<li>
<p>The current Java API that initiates the dynamic-library loading
process needs to be enhanced to support built-in static libraries.
A Java application that uses a static JNI library needs a way to
notify the VM that the library code is already included in the
application image.  In this situation, a <code>System.loadLibrary</code>
request for a static library should skip the usual platform-specific
dynamic loading process.</p>
<p>The current JNI specification
<a href="http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/design.html#wp17566">alludes to this type of support</a>, though the Hotspot VM does
not implement that behavior.</p>
</li>
<li>
<p>The <code>JNI_OnLoad</code> and <code>JNI_OnUnload</code> function interface need to be
enhanced to support library specific names since only a single
function name can exist within an application.  This could be
implemented by appending the library name to these
well-known-names. For example <code>libnet.so</code> could use
<code>JNI_OnLoad_net</code>, <code>JNI_OnUnload_net</code>.</p>
</li>
</ol>
<p>This feature requires changes to both the Java SE library-loading APIs
and the JNI specification.  What follows is an initial draft of the
specification updates in both areas.</p>
<h3 id="Java-API-Changes">Java API Changes</h3>
<p>The specifications of the <code>java.lang.System.load</code> and
<code>java.lang.Runtime.load</code> methods will be revised to read:</p>
<blockquote>
<p>Loads the native library specified by the filename argument.  The
filename argument must be an absolute path name.</p>
<p>If the filename argument, when stripped of any platform-specific library
prefix, path, and file extension, indicates a library whose name is L,
and a native library called L is <code>statically linked</code> with the VM, then the
JNI_OnLoad_L function exported by the library is invoked rather than
attempting to load a dynamic library.  A filename matching the argument
does not have to exist in the file system.  See the JNI Specification for
more details.</p>
<p>Otherwise, the filename argument is mapped to a native library image in
an implementation-dependent manner.</p>
</blockquote>
<p>The specifications of when these methods throw an <code>UnsatisfiedLinkError</code>
will be revised to read:</p>
<blockquote>
<p><code>UnsatisfiedLinkError</code> - if either the filename is not an absolute path
name, the native library is not <code>statically linked</code> with the VM, or the
library cannot be mapped to a native library image by the host system.</p>
</blockquote>
<p>The specifications of the <code>java.lang.System.loadLibrary</code> and
<code>java.lang.Runtime.loadLibrary</code> methods will be revised to read:</p>
<blockquote>
<p>Loads the native library specified by the <code>libname</code> argument.  The
<code>libname</code> must not contain any platform-specific prefix, file
extension, or path.</p>
<p>If a native library called <code>libname</code> is <code>statically linked</code> with the VM,
then the <code>JNI_OnLoad_libname</code> function exported by the library is
invoked. See the JNI Specification for more details.</p>
<p>Otherwise, the <code>libname</code> is loaded from a system library location and
mapped to a native-library image in an implementation-dependent manner.</p>
</blockquote>
<p>The specifications of when these methods throw an <code>UnsatisfiedLinkError</code>
will be revised to read:</p>
<blockquote>
<p><code>UnsatisfiedLinkError</code> - if either the libname argument contains a file
path, the native library is not <code>statically linked</code> with the VM, or the
library cannot be mapped to a native-library image by the host system.</p>
</blockquote>
<h3 id="JNI-Specification-Changes">JNI Specification Changes</h3>
<ul>
<li>
<p>A native library may be <code>statically linked</code> with the VM.  The manner in
which the library and VM image are combined is
implementation-dependent.</p>
</li>
<li>
<p>A <code>System.loadLibrary</code> or equivalent API call must succeed for this
library to be considered loaded.</p>
</li>
<li>
<p>A library L whose image has been combined with the VM is defined as
<code>statically linked</code> if and only if the library exports a function
called JNI_OnLoad_L.</p>
</li>
<li>
<p>If a <code>statically linked</code> library L exports a function called
<code>JNI_OnLoad_L</code> and a function called <code>JNI_OnLoad</code>, the <code>JNI_OnLoad</code>
function will be ignored.</p>
</li>
<li>
<p>If a library L is <code>statically linked</code> then upon the first invocation of
<code>System.loadLibrary("L")</code> or equivalent, the <code>JNI_OnLoad_L</code> function
will be invoked with the same arguments and expected return value as
specified for the <code>JNI_OnLoad</code> function.</p>
</li>
<li>
<p>If a library L is <code>statically linked</code> then it will be prohibited to
link a library of the same name dynamically.</p>
</li>
<li>
<p>When the class loader containing a <code>statically linked</code> native library L
is garbage collected, the VM will invoke the <code>JNI_OnUnload_L</code>
function of the library if such a function is exported.</p>
</li>
<li>
<p>If a <code>statically linked</code> library L exports a function called
<code>JNI_OnUnLoad_L</code> and a function called <code>JNI_OnUnLoad</code>, the
<code>JNI_OnUnLoad</code> function will be ignored.</p>
</li>
</ul>
<p>The JNI version specification will be incremented to <code>JNI_VERSION_1_8</code>.
Statically-linked libraries will only be supported this version or
greater.</p>
<h3 id="JVMTI--agentlib-Command-Line-Option-Specification-Changes">JVMTI -agentlib Command Line Option Specification Changes</h3>
<p>The -agentlib command line specification descriptions will be revised
in JDK 8 to read:</p>
<blockquote>
<p>If the <code>library</code> argument, indicates a library whose name is L, and a
native library called L is <code>statically linked</code> with the VM, then an
<code>Agent_OnLoad_L</code> function must be exported by the agent.  A library
matching the argument does not have to exist in the file system.  This
<code>Agent_OnLoad_L</code> function will be invoked by the VM as described in the
JVMTI specification.  The <code>options</code> will be passed to the <code>Agent_OnLoad_L</code>
function when called.</p>
<p>Otherwise, The name following -agentlib: is the name of the library to
load. Lookup of the library, both its full name and location, proceeds
in a platform-specific manner. Typically, the <code>agent-lib-name</code> is expanded
to an operating system specific file name. The <code>options</code> will be passed
to the agent on start-up. For example, if the option -agentlib:foo=opt1,opt2
is specified, the VM will attempt to load the shared library foo.dll from
the system PATH under WindowsTM or libfoo.so from the LD_LIBRARY_PATH under
the SolarisTM operating environment.</p>
</blockquote>
<h3 id="JVMTI--agentpath-Command-Line-Option-Specification-Changes">JVMTI -agentpath Command Line Option Specification Changes</h3>
<p>The -agentpath command line specification descriptions will be revised
in JDK 8 to read:</p>
<blockquote>
<p>If the <code>filename</code> argument, when stripped of any platform-specific library
prefix, path, and file extension, indicates a <code>library</code> whose name is L,
and a native library called L is <code>statically linked</code> with the VM, then the
<code>Agent_OnLoad_L</code> function must be exported by the agent.  A filename
matching the argument does not have to exist in the file system.  This
<code>Agent_OnLoad_L</code> function is invoked by the VM, as described in the JVMTI
specification.  The <code>options</code> will be passed to the <code>Agent_OnLoad_L</code> function
when called.</p>
<p>Otherwise, The path following -agentpath: is the absolute path from which to
load the library. No library name expansion will occur. The <code>options</code> will
be passed to the agent on start-up. For example, if the option
-agentpath:/myLibs/foo.so=opt1,opt2 is specified, the VM will attempt to
load the shared library /myLibs/foo.so.</p>
</blockquote>
<h3 id="JVMTI-Native-Interface-Specification-Changes">JVMTI Native Interface Specification Changes</h3>
<ul>
<li>
<p>A native JVMTI Agent may be <code>statically linked</code> with the VM.  The manner
in which the library and VM image are combined is implementation-dependent.</p>
</li>
<li>
<p>An agent L whose image has been combined with the VM is defined as
<code>statically linked</code> if and only if the agent exports a function called
<code>Agent_OnLoad_L</code>.</p>
</li>
<li>
<p>If a <code>statically linked</code> agent L exports a function called <code>Agent_OnLoad_L</code>
and a function called <code>Agent_OnLoad</code>, the <code>Agent_OnLoad</code> function will be
ignored.</p>
</li>
<li>
<p>If an agent L is <code>statically linked</code>, an <code>Agent_OnLoad_L</code> function will be
invoked with the same arguments and expected return value as specified for
the <code>Agent_OnLoad</code> function.</p>
</li>
<li>
<p>An agent L that is <code>statically linked</code> will prohibit an agent of the same
name from being loaded dynamically.</p>
</li>
<li>
<p>The VM will invoke the <code>Agent_OnUnload_L</code> function of the agent, if such a
function is exported, at the same point during startup as it would have
called the dynamic entry point <code>Agent_OnUnLoad</code>.</p>
</li>
<li>
<p>If a <code>statically linked</code> agent L exports a function called <code>Agent_OnUnLoad_L</code>
and a function called <code>Agent_OnUnLoad</code>, the <code>Agent_OnUnLoad</code> function will be
ignored.</p>
</li>
<li>
<p>If an agent L is <code>statically linked</code>, an <code>Agent_OnAttach_L</code> function will be
invoked with the same arguments and expected return value as specified for
the <code>Agent_OnAttach</code> function.</p>
</li>
<li>
<p>If a <code>statically linked</code> agent L exports a function called <code>Agent_OnAttach_L</code>     and a function called <code>Agent_OnAttach</code>, the <code>Agent_OnAttach</code> function will be
ignored.</p>
</li>
</ul>
<h3 id="com-sun-tools-attach-VirtualMachine-loadAgentLibrary">com.sun.tools.attach.VirtualMachine.loadAgentLibrary</h3>
<p>This language will be added to the javadocs for this method:</p>
<blockquote>
<p>If the agent is <code>statically linked</code> with the VM that would otherwise load it,
the specific <code>Agent_OnAttach</code> function name that is called will be library
specific as defined in the -agentlib JVMTI specification section.</p>
</blockquote>
<h3 id="com-sun-tools-attach-VirtualMachine-loadAgentPath">com.sun.tools.attach.VirtualMachine.loadAgentPath</h3>
<p>This language will be added to the javadocs for this method:</p>
<blockquote>
<p>If the agent is <code>statically linked</code> with the VM that would otherwise load it,
the specific <code>Agent_OnAttach</code> function name that is called will be library
specific as defined in the -agentpath JVMTI specification.</p>
</blockquote>
<p>The JVMTI version specification will be incremented to JDK18_JVMTI_VERSION.<br />
JDK18_JVMTI_VERSION will be set to 0x30010203, which translates to 1.2.3.</p>
<p>This new functionality will be supported in Virtual Machines that support
JDK18_JVMTI_VERSION or greater.</p>
<h2 id="Impact">Impact</h2>
<ul>
<li>Compatibility: This new functionality should not affect existing
dynamic libraries.</li>
<li>Portability: JNI native source code requires function-name changes
when built statically.</li>
<li>TCK: JNI native-library tests will need to be adapted to validate
support for statically linked native libraries.</li>
<li>TCK: JVMTI agent tests will need to be adapted to validate
support for statically linked agent libraries.</li>
</ul>
</div></div><div id="sidebar"><div id="openjdk-sidebar-logo"><a href="/"><img alt="OpenJDK logo" src="/images/openjdk-small.png" /></a></div><div class="links"><div class="links"><a href="/workshop"><b>Workshop</b></a></div></div><div class="links"><div class="link"><a href="/faq/">OpenJDK FAQ</a></div><div class="link"><a href="/install/">Installing</a></div><div class="link"><a href="/contribute/">Contributing</a></div><div class="link"><a href="/sponsor/">Sponsoring</a></div><div class="link"><a href="/guide/">Developers' Guide</a></div><div class="link"><a href="/groups/vulnerability/report">Vulnerabilities</a></div></div><div class="links"><div class="links"><a href="//mail.openjdk.java.net">Mailing lists</a></div><div class="link"><a href="/irc">IRC</a>
                      &#183; <a href="https://wiki.openjdk.java.net">Wiki</a></div></div><div class="links"><div class="links"><a href="/bylaws">Bylaws</a> &#183; <a href="/census">Census</a></div><div class="link"><a href="/legal/">Legal</a></div></div><div class="links"><div class="links"><a href="/jeps/0"><b>JEP Process</b></a></div></div><div class="links"><div class="link search"><form method="get" action="https://www.google.com/search"><input id="searchBox" style="color: gray" type="text" name="q" size="10" maxlength="255" value="search" /><input type="hidden" name="sitesearch" value="openjdk.java.net" /></form></div></div><div class="links"><div class="about">Source code</div><div class="link"><a href="//hg.openjdk.java.net">Mercurial</a></div><div class="link">Bundles (<a href="http://download.java.net/openjdk/jdk6">6</a>)</div></div><div class="links"><div class="about">Groups</div><div class="link"><a href="/groups/">(overview)</a></div><div class="link"><a href="/groups/2d">2D Graphics</a></div><div class="link"><a href="/groups/adoption">Adoption</a></div><div class="link"><a href="/groups/awt">AWT</a></div><div class="link"><a href="/groups/build">Build</a></div><div class="link"><a href="/groups/csr">Compatibility &amp; Specification Review</a></div><div class="link"><a href="/groups/compiler">Compiler</a></div><div class="link"><a href="/groups/conformance">Conformance</a></div><div class="link"><a href="/groups/core-libs">Core Libraries</a></div><div class="link"><a href="/groups/gb">Governing Board</a></div><div class="link"><a href="/groups/hotspot">HotSpot</a></div><div class="link"><a href="/groups/ide-support">IDE Tooling &amp; Support</a></div><div class="link"><a href="/groups/i18n">Internationalization</a></div><div class="link"><a href="/groups/jmx">JMX</a></div><div class="link"><a href="/groups/members">Members</a></div><div class="link"><a href="/groups/net">Networking</a></div><div class="link"><a href="/groups/nb-projects">NetBeans Projects</a></div><div class="link"><a href="/groups/porters">Porters</a></div><div class="link"><a href="/groups/quality">Quality</a></div><div class="link"><a href="/groups/security">Security</a></div><div class="link"><a href="/groups/serviceability">Serviceability</a></div><div class="link"><a href="/groups/sound">Sound</a></div><div class="link"><a href="/groups/swing">Swing</a></div><div class="link"><a href="/groups/vulnerability">Vulnerability</a></div><div class="link"><a href="/groups/web">Web</a></div></div><div class="links"><div class="about">Projects</div><div class="link"><a href="/projects/">(overview)</a></div><div class="link"><a href="/projects/amber">Amber</a></div><div class="link"><a href="/projects/anno-pipeline">Annotations Pipeline 2.0</a></div><div class="link"><a href="/projects/audio-engine">Audio Engine</a></div><div class="link"><a href="/projects/build-infra">Build Infrastructure</a></div><div class="link"><a href="/projects/caciocavallo">Caciocavallo</a></div><div class="link"><a href="/projects/closures">Closures</a></div><div class="link"><a href="/projects/code-tools">Code Tools</a></div><div class="link"><a href="/projects/coin">Coin</a></div><div class="link"><a href="/projects/cvmi">Common VM Interface</a></div><div class="link"><a href="/projects/compiler-grammar">Compiler Grammar</a></div><div class="link"><a href="/projects/detroit">Detroit</a></div><div class="link"><a href="/projects/dio">Device I/O</a></div><div class="link"><a href="/projects/duke">Duke</a></div><div class="link"><a href="/projects/font-scaler">Font Scaler</a></div><div class="link"><a href="/projects/fbtoolkit">Framebuffer Toolkit</a></div><div class="link"><a href="/projects/graal">Graal</a></div><div class="link"><a href="/projects/graphics-rasterizer">Graphics Rasterizer</a></div><div class="link"><a href="/projects/harfbuzz">HarfBuzz Integration</a></div><div class="link"><a href="/projects/icedtea">IcedTea</a></div><div class="link"><a href="/projects/jdk6">JDK 6</a></div><div class="link"><a href="/projects/jdk7">JDK 7</a></div><div class="link"><a href="/projects/jdk7u">JDK 7 Updates</a></div><div class="link"><a href="/projects/jdk8">JDK 8</a></div><div class="link"><a href="/projects/jdk8u">JDK 8 Updates</a></div><div class="link"><a href="/projects/jdk9">JDK 9</a></div><div class="link"><a href="/projects/jdk">JDK</a>
      (&#8230;
       <a href="/projects/jdk/12">12</a>,
       <a href="/projects/jdk/13">13</a>,
       <a href="/projects/jdk/14">14</a>)</div><div class="link"><a href="/projects/jdk-updates">JDK Updates</a></div><div class="link"><a href="/projects/javadoc-next">JavaDoc.Next</a></div><div class="link"><a href="/projects/jigsaw">Jigsaw</a></div><div class="link"><a href="/projects/kona">Kona</a></div><div class="link"><a href="/projects/kulla">Kulla</a></div><div class="link"><a href="/projects/lambda">Lambda</a></div><div class="link"><a href="/projects/lanai">Lanai</a></div><div class="link"><a href="/projects/locale-enhancement">Locale Enhancement</a></div><div class="link"><a href="/projects/loom">Loom</a></div><div class="link"><a href="/projects/jmm">Memory Model Update</a></div><div class="link"><a href="/projects/metropolis">Metropolis</a></div><div class="link"><a href="/projects/jmc">Mission Control</a></div><div class="link"><a href="/projects/mobile">Mobile</a></div><div class="link"><a href="/projects/modules">Modules</a></div><div class="link"><a href="/projects/mlvm">Multi-Language VM</a></div><div class="link"><a href="/projects/nashorn">Nashorn</a></div><div class="link"><a href="/projects/nio">New I/O</a></div><div class="link"><a href="/projects/openjfx">OpenJFX</a></div><div class="link"><a href="/projects/panama">Panama</a></div><div class="link"><a href="/projects/penrose">Penrose</a></div><div class="link"><a href="/projects/aarch32-port">Port: AArch32</a></div><div class="link"><a href="/projects/aarch64-port">Port: AArch64</a></div><div class="link"><a href="/projects/bsd-port">Port: BSD</a></div><div class="link"><a href="/projects/haiku-port">Port: Haiku</a></div><div class="link"><a href="/projects/macosx-port">Port: Mac OS X</a></div><div class="link"><a href="/projects/mips-port">Port: MIPS</a></div><div class="link"><a href="/projects/ppc-aix-port">Port: PowerPC/AIX</a></div><div class="link"><a href="/projects/s390x-port">Port: s390x</a></div><div class="link"><a href="/projects/portola">Portola</a></div><div class="link"><a href="/projects/sctp">SCTP</a></div><div class="link"><a href="/projects/skara">Skara</a></div><div class="link"><a href="/projects/shenandoah">Shenandoah</a></div><div class="link"><a href="/projects/sumatra">Sumatra</a></div><div class="link"><a href="/projects/threeten">ThreeTen</a></div><div class="link"><a href="/projects/tiered-attrib">Tiered Attribution</a></div><div class="link"><a href="/projects/tsan">Tsan</a></div><div class="link"><a href="/projects/type-annotations">Type Annotations</a></div><div class="link"><a href="/projects/xrender">XRender Pipeline</a></div><div class="link"><a href="/projects/valhalla">Valhalla</a></div><div class="link"><a href="/projects/verona">Verona</a></div><div class="link"><a href="/projects/visualvm">VisualVM</a></div><div class="link"><a href="/projects/zero">Zero</a></div><div class="link"><a href="/projects/zgc">ZGC</a></div></div><div class="links"><div class="about">Tools</div><div class="link"><a href="http://java.sun.com/javase/downloads/index.jsp">Java SE</a></div><div class="link"><a href="http://mercurial-scm.org/mercurial/">Mercurial</a></div><div class="link"><a href="/jtreg/index.html">jtreg harness</a></div></div><div class="links"><div class="about">Related</div><div class="link"><a href="http://planetjdk.org">Planet JDK</a></div><div class="link"><a href="http://java.sun.com">java.sun.com</a></div><div class="link"><a href="http://jcp.org">Java Community Process</a></div><div class="link"><a href="//jdk.java.net">JDK GA/EA Builds</a></div></div><div class="buttons"><a href="http://oracle.com"><img alt="Oracle logo" src="/images/oracle.png" /></a></div></div><div id="footer">

        &#169; 2019 Oracle Corporation and/or its affiliates
        <br /><a href="/legal/tou/">Terms of Use</a>
        &#183;
        
            License: <a href="/legal/gplv2+ce.html">GPLv2</a>
        &#183; <a href="http://www.oracle.com/us/legal/privacy/">Privacy</a>
        &#183; <a href="http://www.oracle.com/us/legal/third-party-trademarks/third-party-trademarks-078568.html">Trademarks</a></div><SCRIPT type="text/javascript">
  var sc_project=2527440;
  var sc_invisible=1;
  var sc_partition=24;
  var sc_security="d832a704";
  var sc_remove_link=1;
  </SCRIPT><script type="text/javascript" src="https://www.statcounter.com/counter/counter_xhtml.js" async="yes"></script><noscript><div class="statcounter"><img class="statcounter" src="https://c.statcounter.com/2527440/0/d832a704/1/" alt="web statistics" /></div></noscript></body></html>
