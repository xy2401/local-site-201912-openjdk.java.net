<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=us-ascii" /><meta http-equiv="Content-Type" content="text/html; charset=us-ascii" /><title>JEP draft: JMX Specific Annotations for Registration of Managed Resources</title><link rel="shortcut icon" href="/images/nanoduke.ico" /><link rel="stylesheet" type="text/css" href="/page.css" /><script type="text/javascript" src="/page.js"><noscript></noscript></script><style type="text/css" xml:space="preserve">
      TABLE { border-collapse: collapse; padding: 0px; margin: 1em 0; }
      TR:first-child TH, TR:first-child TD { padding-top: 0; }
      TH, TD { padding: 0px; padding-top: .5ex; vertical-align: baseline; text-align: left; }
      TD + TD, TH + TH { padding-left: 1em; }
      TD:first-child, TH:first-child, TD.jep { text-align: right; }
      TABLE.head TD:first-child { font-style: italic; padding-left: 2em; }
      PRE { padding-left: 2em; margin: 1ex 0; font-size: inherit; }
      TABLE PRE { padding-left: 0; margin: 0; }
      TABLE.jeps TD:first-child + TD,
      TABLE.jeps TD:first-child + TD + TD { padding-left: .5em; }
      TABLE.jeps TD:first-child,
      TABLE.jeps TD:first-child + TD,
      TABLE.jeps TD:first-child + TD + TD { font-size: smaller; }
      TABLE.jeps TD.cl { font-size: smaller; padding-right: 0; text-align: right; }
      TABLE.jeps TD.cm { font-size: smaller; padding-left: .1em; padding-right: .1em; }
      TABLE.jeps TD.cr { font-size: smaller; padding-left: 0; }
      TABLE.jeps TD.z { padding-left: 0; padding-right: 0; }
      TABLE.head TD { padding-top: 0; }
      .withdrawn { text-decoration: line-through; }
    </style></head><body><div id="main"><h1>JEP draft: JMX Specific Annotations for Registration of Managed Resources</h1><table class="head"><tr><td>Author</td><td>Jaroslav Bachorik</td></tr><tr><td>Owner</td><td>Harsha Wardhana B</td></tr><tr><td>Type</td><td>Feature</td></tr><tr><td>Scope</td><td>SE</td></tr><tr><td>Status</td><td>Draft</td></tr><tr><td>Release</td><td>tbd</td></tr><tr><td>Component</td><td>core-svc&#8201;/&#8201;javax.management</td></tr><tr><td>Discussion</td><td>jmx dash dev at openjdk dot java dot net</td></tr><tr><td>Effort</td><td>S</td></tr><tr><td>Duration</td><td>M</td></tr><tr><td>Reviewed by</td><td>Mikael Vidstedt, Staffan Larsen</td></tr><tr><td>Endorsed by</td><td>Mikael Vidstedt</td></tr><tr><td>Created</td><td>2014/06/02 10:38</td></tr><tr><td>Updated</td><td>2019/04/12 22:44</td></tr><tr><td>Issue</td><td><a href="https://bugs.openjdk.java.net/browse/JDK-8044507">8044507</a></td></tr></table><div class="markdown"><h2 id="Summary">Summary</h2>
<p>Provide a set of annotations for registration and configuration of manageable service - also known as <a href="http://docs.oracle.com/javase/tutorial/jmx/mbeans/">MBeans</a>.</p>
<h2 id="Goals">Goals</h2>
<p>The primary goal is to make it easier for developers to register and configure MBeans. The secondary goal is improving the readability and coherency of the source code by keeping all parts of an MBean declaration in one place.</p>
<h2 id="Non-Goals">Non-Goals</h2>
<p>Deprecation and replacement of the current ways to register and configure MBeans.</p>
<h2 id="Motivation">Motivation</h2>
<p>Current mechanism of defining an MBean requires to provide an MBean interface and its implementation. The interface and the implementation must conform to the strict naming and visibility rules in order for the introspection to be able to bind them.</p>
<p>At least the same level of verbosity is required when adding an MBeanInfo to generate MBean metadata.</p>
<p>All this leads to a rather verbose code containing a lot of repeating boilerplate parts even for the most simple MBean registrations.</p>
<p>There is a 3rd party implementation of MBean registration and configuration annotations in Spring and it became de-facto standard among developers - indicating that this approach should be a part of the JMX standard.</p>
<h2 id="Description">Description</h2>
<p>The implementation will consist of a set of annotations for marking certain classes for publishing via JMX mechanisms and specifying their attributes and operations.</p>
<p>There will be an annotation processor validating the placed annotations and their attributes.</p>
<p>The managed resources specified by the annotations will be fully usable within the current JMX system and accessible to older clients without any changes necessary.</p>
<p>All the annotations will be placed in <strong>javax.management.annotations</strong> package not to further clutter the <strong>javax.management</strong> one.</p>
<h3 id="@ManagedService">@ManagedService</h3>
<p>Marking a managed service implementation. It must be applied to non-abstract classes only. By using this annotation each instance of the annotated class will become <a href="http://docs.oracle.com/javase/8/docs/api/javax/management/MXBean.html">MXBean</a> compatible.</p>
<p><strong>Arguments</strong></p>
<ul>
<li><strong>objectName</strong> - the name the managed service will be registered in the MBean server if not specified otherwise in <a href="http://docs.oracle.com/javase/8/docs/api/javax/management/MBeanServer.html#registerMBean-java.lang.Object-javax.management.ObjectName-">MBeanServer.registerMBean()</a> method.(<em>optional</em>)</li>
<li><strong>description</strong>  - a conscious textual description for the managed service implementation (<em>optional</em>)</li>
<li><strong>service</strong> - the service interface the managed servicecan be accessed through (<em>optional</em>)<br />
The annotated class need not to actually implement the service interface<br />
The service interface specified here will be exported as a part of <a href="http://docs.oracle.com/javase/8/docs/api/javax/management/Descriptor.html">Descriptor</a> under <em>interfaceClassName</em> key.<br /></li>
<li><strong>tags</strong> - an array of <em>@Tag</em> annotations specifying tags (key-value pairs) to be added to the MBean <a href="http://docs.oracle.com/javase/8/docs/api/javax/management/Descriptor.html">Descriptor</a> (<em>optional</em>)</li>
</ul>
<p><strong>Definition</strong></p>
<pre><code>@interface ManagedService {
    String objectName() default "";
    String description() default "";
    Class&lt;?&gt; service() default Object.class;
    Tag[] tags() default {}'
}</code></pre>
<h3 id="@ManagedAttribute">@ManagedAttribute</h3>
<p>Annotates a field or a method conforming to the getter/setter pattern within a class annotated by <strong>@ManagedService</strong> annotation to become accessible as a managed attribute.</p>
<p><strong>Arguments</strong></p>
<ul>
<li><strong>name</strong> - the attribute name. May be different from the actual field name or the inferred getter/setter name. If not provided the field name will be used or the name will be inferred from the getter/setter method name. (<em>optional</em>)</li>
<li><strong>access</strong> - the attribute access type - <em>Read</em>, <em>Write</em>, <em>ReadWrite</em> (<em>optional</em>). When not specified <em>ReadWrite</em> is assumed.</li>
<li><strong>description</strong> - a conscious textual description for the attribute (<em>optional</em>)</li>
<li><strong>getter</strong> - allows to specify a custom getter method from within the annotated class. The provided method must have appropriate access and its return type must be assignable to the annotated attribute.
(<em>optional</em>)<br />
This might come handy when one attribute definition requires both the setter and getter. Instead of annotating both of those methods and copy-pasting the metadata it will be possible to annotate just the setter and refer to the getter using this attribute.<br /></li>
<li><strong>setter</strong> - allows to specify a custom setter method from within the annotated class. The provided method must have appropriate access and exactly one and argument type of which must be assignable from the annotated attribute(<em>optional</em>)<br />
This might come handy when one attribute definition requires both the setter and getter. Instead of annotating both of those methods and copy-pasting the metadata it will be possible to annotate just the getter and refer to the setter using this attribute.<br /></li>
<li><strong>units</strong> - a textual form of the units this attribute is measured in. It will be exported via the associated <a href="http://docs.oracle.com/javase/8/docs/api/javax/management/Descriptor.html">Descriptor</a> (<em>optional</em>)</li>
<li><strong>tags</strong> - an array of <em>@Tag</em> annotations specifying tags (key-value pairs) to be added to the associated <a href="http://docs.oracle.com/javase/8/docs/api/javax/management/Descriptor.html">Descriptor</a> (<em>optional</em>)</li>
</ul>
<p><strong>Definition</strong></p>
<pre><code>@Target({ElementType.FIELD, ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@interface ManagedAttribute {
    String name() default "";
    String description() default "";
    Access access() default AttributeAccess.READWRITE;
    String getter() default "";
    String setter() default "";
    String units() default "";
    Tag[] tags() default {};
}</code></pre>
<h3 id="@ManagedOperation">@ManagedOperation</h3>
<p>Annotates a method within a class annotated by <strong>@ManagedService</strong> annotation to become accessible as a managed operation.</p>
<p><strong>Arguments</strong></p>
<ul>
<li><strong>name</strong> - the operation name. If not provided the method name will be used. May be different from the actual method name - this could be used eg. to overcome the inability to properly resolve covariant methods in MBeans (<em>optional</em>)</li>
<li><strong>description</strong> - a conscious textual description for the attribute (<em>optional</em>)</li>
<li><strong>impact</strong> - the impact the operation can have. One of [<em>INFO</em>, <em>ACTION</em>, <em>ACTION_INFO</em>, <em>UNKNOWN</em>]. Corresponds to the impact codes used in <a href="http://docs.oracle.com/javase/8/docs/api/javax/management/MBeanManagedOperation.html">javax.management.MBeanManagedOperation</a> (<em>optional</em>)</li>
<li><strong>units</strong> - a textual form of the units the result of this attribute is measured in. It will be exported via the associated <a href="http://docs.oracle.com/javase/8/docs/api/javax/management/Descriptor.html">Descriptor</a> (<em>optional</em>)</li>
<li><strong>tags</strong> - an array of <em>@Tag</em> annotations specifying tags (key-value pairs) to be added to the associated <a href="http://docs.oracle.com/javase/8/docs/api/javax/management/Descriptor.html">Descriptor</a> (<em>optional</em>)</li>
</ul>
<p><strong>Definition</strong></p>
<pre><code>@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@interface ManagedOperation {
    String name() default "";
    String description() default "";
    Impact impact() default Impact.UNKNOWN;
    String units() default "";
    Tag[] tags() default {};
}</code></pre>
<h3 id="@ParameterInfo">@ParameterInfo</h3>
<p>Annotates a method parameter within a class annotated by <strong>@ManagedService</strong> annotation to provide more specific metadata.</p>
<p><strong>Arguments</strong></p>
<ul>
<li><strong>name</strong> - the parameter name. May be different from the actual parameter name. If not provided the parameter name obtained via reflection will be used.
(<em>optional</em>)</li>
<li><strong>description</strong> - a conscious textual description for the attribute (<em>optional</em>)</li>
<li><strong>units</strong> - a textual form of the units the value of this attribute is measured in. It will be exported via the associated <a href="http://docs.oracle.com/javase/8/docs/api/javax/management/Descriptor.html">Descriptor</a> (<em>optional</em>)</li>
<li><strong>tags</strong> - an array of <em>@Tag</em> annotations specifying tags (key-value pairs) to be added to the associated <a href="http://docs.oracle.com/javase/8/docs/api/javax/management/Descriptor.html">Descriptor</a> (<em>optional</em>)</li>
</ul>
<p><strong>Definition</strong></p>
<pre><code>@Target(value = ElementType.PARAMETER)
@Retention(value = RetentionPolicy.RUNTIME)
@interface ParameterInfo {
    String name() default "";
    String description() default "";
    String units() default "";
    Tag[] tags() default {};
}</code></pre>
<h3 id="@NotificationInfo">@NotificationInfo</h3>
<p>When a field of <strong>NotificationSender</strong> is annotated by this annotation it will get injected by the actual implementation allowing to emit notifications.</p>
<p><strong>Arguments</strong></p>
<ul>
<li><strong>implementation</strong> - the actual notification class - must be a subclass of <a href="http://docs.oracle.com/javase/8/docs/api/javax/management/Notification.html">javax.management.Notification</a>. If not provided <strong>javax.management.Notification</strong> will be used.</li>
<li><strong>description</strong> - the textual description (<em>optional</em>)</li>
<li><strong>types</strong> - an array of strings representing the notification types (<em>see <a href="http://docs.oracle.com/javase/8/docs/api/javax/management/Notification.html#getType--">javax.management.Notification#getType()</a></em>)</li>
<li><strong>severity</strong> - an arbitrary number denoting the notification severity (default is 6) (<em>optional</em>)</li>
<li><strong>tags</strong> - an array of <em>@Tag</em> annotations specifying tags (key-value pairs) to be added to the MBean <a href="http://docs.oracle.com/javase/8/docs/api/javax/management/Descriptor.html">Descriptor</a> (<em>optional</em>)</li>
</ul>
<p><strong>Definition</strong></p>
<pre><code>@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
@Repeatable(NotificationInfos.class)
public @interface NotificationInfo {
    Class&lt;? extends javax.management.Notification&gt; implementation() default javax.management.Notification.class;
    String description() default "";
    String[] types();
    int severity() default "";
    Tag[] tags() default {};
}</code></pre>
<h3 id="@NotificationInfos">@NotificationInfos</h3>
<p>When a field of <strong>NotificationSender</strong> is annotated by this annotation it will get injected by the actual implementation allowing to emit notifications. The enclosed <strong>NotificationInfo</strong> anotatations will be used for filling in the <a href="http://docs.oracle.com/javase/8/docs/api/javax/management/MBeanNotificationInfo.html">MBeanNotificationInfo</a> array in the associated <a href="http://docs.oracle.com/javase/8/docs/api/javax/management/MBeanInfo.html">MBeanInfo</a> instance.</p>
<p><strong>Arguments</strong></p>
<ul>
<li><strong>value</strong> - an array of the contained <strong>@NotificationInfo</strong> declarations</li>
</ul>
<p><strong>Definition</strong></p>
<pre><code>@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
@interface NotificationInfos {
    NotificationInfo[] value();
}</code></pre>
<h3 id="@RegistrationHandler">@RegistrationHandler</h3>
<p>A convenient way to express that the MBean is interested in the registration lifecycle events. A method annotated by this annotation will be called for the lifecycle events. The annotated method must take exactly one parameter of type <strong>RegistrationEvent</strong>.</p>
<p>If a managed service wishes to intercept the fine grained registration callbacks it just needs to implement <a href="http://docs.oracle.com/javase/8/docs/api/javax/management/MBeanRegistration.html">MBeanRegistration</a> interface.</p>
<p><strong>Definition</strong></p>
<pre><code>@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@interface RegistrationHandler {
}</code></pre>
<h3 id="Enumeration-Impact">Enumeration Impact</h3>
<p>Closely related to the <strong>MBeanManagedOperation#(INFO|ACTION|ACTION_INFO|UNKNOWN)</strong> constants.</p>
<pre><code>public static enum Impact {
    INFO, ACTION, ACTION_INFO, UNKNOWN
}</code></pre>
<h3 id="Enumeration-RegistrationKind">Enumeration RegistrationKind</h3>
<pre><code>public enum RegistrationKind {
    REGISTER, DEREGISTER, FAIL
}</code></pre>
<h3 id="Enumeration-AttributeAccess">Enumeration AttributeAccess</h3>
<pre><code>public enum AttributeAccess {
    READ, WRITE, READWRITE
}</code></pre>
<h3 id="Class-RegistrationEvent">Class RegistrationEvent</h3>
<pre><code>/**
 * Registration event type. May be obtained in a method annotated by
 * {@linkplain RegistrationHandler} annotation.
 */
final public class RegistrationEvent {
    private final RegistrationKind kind;
    private final MBeanServer mbs;
    private final ObjectName on;

    public RegistrationEvent(RegistrationKind kind, MBeanServer mbs, ObjectName on) {
        this.kind = kind;
        this.mbs = mbs;
        this.on = on;
    }

    /**
     * Registration event kind.
     * @return A {@linkplain RegistrationKind} value
     */
    public RegistrationKind getKind() {
        return kind;
    }

    /**
     * The {@linkplain MBeanServer} this event was generated by.
     * @return The associated {@linkplain MBeanServer} instance
     */
    public MBeanServer getMBeanServer() {
        return mbs;
    }

    /**
     * The name of the MBean for which the event was generated.
     * @return The MBean's {@linkplain ObjectName}
     */
    public ObjectName getObjectName() {
        return on;
    }
}</code></pre>
<h3 id="Interface-NotificationSender">Interface NotificationSender</h3>
<pre><code>/**
 * &lt;p&gt;Interface for marking a class as being able to send notifications&lt;/p&gt;
 *
 * @since 1.9
*/
public interface NotificationSender {
    /**
     * &lt;p&gt;Sends a standard notification.&lt;/p&gt;
     * 
     * @param type The notification type.
     * @param message The notification message.
     * @param userData The user data. It is used for whatever data
     * the notification source wishes to communicate to its consumers.
     */
    void sendNotification(String type, String message, Object userData);

    /**
     * Sends a custom notification.
     *
     * @param notification The notification to send.
     */
    void sendNotification(javax.management.Notification notification);
}</code></pre>
<h3 id="Usage">Usage</h3>
<p><strong>Define the Service</strong></p>
<pre><code>// The following class is a managed service implementation
// It will be registered under the provided objectName if not overridden
// The "service" parameter is optional; it serves as a hint for creating the service proxy and the managed service does not necessarily need to implement the interface
@ManagedService(
    objectName="net.java.jmx:type=StandardService", 
    description="A simple service exposed as an MXBean", 
    service=Service.class, 
    tags = {
        @Tag(name = "tag1", value = "val1"), 
        @Tag(name = "tag2", value = "val2")
    }
)
public class SimpleService {
    @NotificationInfo(types = "test.mbean.label", description = "Label was set")
    @NotificationInfo(types = "test.mbean.threshold", description = "Counter threshold reached")
    private NotificationSender ns;
    
    // A read-only attribute measured in "ticks"
    @ManagedAttribute(access = AttributeAccess.READ, units = "ticks")
    int counter = 1;

    // A read-only attribute being an array of strings
    @ManagedAttribute(access = AttributeAccess.READ)
    String[] arr = new String[]{"sa", "ba", "ca"};

    // Declare a read-only attribute ...
    @ManagedAttribute(access = AttributeAccess.READ)
    private String label = "the label";

    // ... and augment it with a complex setter later on
    @ManagedAttribute
    public void setLabel(String l) {
        ns.sendNotification("test.mbean.label", "Label set", l);
        label = l;
    }
    
    // an operation modifying the 'counter' attribute and sending a custom notification
    @ManagedOperation(impact = Impact.ACTION, description = "Increases the associated counter by 1")
    public int count() {
        if (counter &gt;= 5) {
            ns.sendNotification("test.mbean.threshold", "Threshold reached", counter);
        }
        return ++counter;
    }

    // an operation declaring custom 'units' metadata for one of its parameters
    @ManagedOperation
    public void checkTime(@Parameter(units = "ms") long ts) {
        System.err.println(new Date(ts));
    }

    // handle the registration/unregsitration of the MBean
    @RegistrationHandler
    public void onRegistration(RegistrationEvent re) {
        switch(re.getKind()) {
            case REGISTER: {
                System.err.println("Registered " + re.getObjectName().getCanonicalName());
                break;
            }
            case UNREGISTER: {
               System.err.println("Unregistered " + re.getObjectName().getCanonicalName());
               break;
            }
        }
    }
}</code></pre>
<h2 id="Alternatives">Alternatives</h2>
<h3 id="Adopting-Spring-annotations">Adopting Spring annotations</h3>
<p><a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/jmx.html#jmx-interface-metadata">Spring JMX Annotations</a></p>
<p>Instead of creating a similar but new set of annotations fitted for the in-JDK JMX implementation the already existing Spring annotations could be used.</p>
<p><strong>Pros</strong></p>
<ul>
<li>Existing, well-known solution</li>
<li>Wide user base</li>
<li>Better coverage of the standard <em>Descriptor</em> fields</li>
</ul>
<p><strong>Cons</strong></p>
<ul>
<li>Different namespace</li>
<li>Possible dependencies on the Spring container</li>
<li>No method parameter annotations - worked around by <strong>@ManagedOperationAttributes</strong></li>
<li>No support for automatic conversion of annotated fields to managed attributes</li>
</ul>
<h3 id="Re-introducing-JMX-2-0-annotations">Re-introducing JMX 2.0 annotations</h3>
<p><a href="https://weblogs.java.net/blog/emcmanus/archive/2007/08/defining_mbeans.html">JMX 2.0 Annotations Proposal</a></p>
<p>This proposal was the part of <a href="https://jcp.org/en/jsr/detail?id=255">JSR 255</a>. It served as an inspiration for this JEP while trying to improve the ease of use and reduce complexity by implementing just the most important features.</p>
<p>The JMX 2.0 annotations implementation is cca. 90% complete with test cases.</p>
<p><strong>Pros</strong></p>
<ul>
<li>Almost readily available</li>
<li>Allows the usage of annotations like <strong>@Description</strong> or <strong>@DescriptorKey/Fields</strong> even in classes not annotated by <strong>@MBean</strong> or <strong>@MXBean</strong></li>
<li>Standard <strong>@Resource</strong> annotation is used to inject resources</li>
</ul>
<p><strong>Cons</strong></p>
<ul>
<li>No method parameter annotations</li>
<li>No support for automatic conversion of annotated fields to managed attributes</li>
<li>Dependency on other parts of JSR 255 (eg. MXBeanMappingFactory and MXBeanMapping being a public API)</li>
<li><strong>@Resource</strong> annotation used for CDI has been moved to the <em>jaxws</em> project and is no longer part of the core Java APIs in JDK 9</li>
<li>Complexity</li>
<li>annotations may define a standard MBean as well as MXBean</li>
<li>overloaded meaning of <strong>@MXBean</strong></li>
<li><strong>@DescriptorFields</strong> takes just plain text and expects certain formatting</li>
</ul>
<h2 id="Testing">Testing</h2>
<p>Unit tests with good code coverage will be provided.
Current reg tests and JCK tests must still pass unchanged.</p>
<h2 id="Risks-and-Assumptions">Risks and Assumptions</h2>
<p>There are no major risks associated with this feature. Similar work has already been done by the others so this is no uncharted territory.</p>
<h2 id="Dependences">Dependences</h2>
<p>No currently known dependencies.</p>
<h2 id="Impact">Impact</h2>
<ul>
<li>User experience: Significantly simplified development of custom MBeans</li>
<li>I18n/L10n: The annotations docs will need to be translated</li>
<li>Documentation: The annotations API will need to be documented</li>
</ul>
</div></div><div id="sidebar"><div id="openjdk-sidebar-logo"><a href="/"><img alt="OpenJDK logo" src="/images/openjdk-small.png" /></a></div><div class="links"><div class="links"><a href="/workshop"><b>Workshop</b></a></div></div><div class="links"><div class="link"><a href="/faq/">OpenJDK FAQ</a></div><div class="link"><a href="/install/">Installing</a></div><div class="link"><a href="/contribute/">Contributing</a></div><div class="link"><a href="/sponsor/">Sponsoring</a></div><div class="link"><a href="/guide/">Developers' Guide</a></div><div class="link"><a href="/groups/vulnerability/report">Vulnerabilities</a></div></div><div class="links"><div class="links"><a href="//mail.openjdk.java.net">Mailing lists</a></div><div class="link"><a href="/irc">IRC</a>
                      &#183; <a href="https://wiki.openjdk.java.net">Wiki</a></div></div><div class="links"><div class="links"><a href="/bylaws">Bylaws</a> &#183; <a href="/census">Census</a></div><div class="link"><a href="/legal/">Legal</a></div></div><div class="links"><div class="links"><a href="/jeps/0"><b>JEP Process</b></a></div></div><div class="links"><div class="link search"><form method="get" action="https://www.google.com/search"><input id="searchBox" style="color: gray" type="text" name="q" size="10" maxlength="255" value="search" /><input type="hidden" name="sitesearch" value="openjdk.java.net" /></form></div></div><div class="links"><div class="about">Source code</div><div class="link"><a href="//hg.openjdk.java.net">Mercurial</a></div><div class="link">Bundles (<a href="http://download.java.net/openjdk/jdk6">6</a>)</div></div><div class="links"><div class="about">Groups</div><div class="link"><a href="/groups/">(overview)</a></div><div class="link"><a href="/groups/2d">2D Graphics</a></div><div class="link"><a href="/groups/adoption">Adoption</a></div><div class="link"><a href="/groups/awt">AWT</a></div><div class="link"><a href="/groups/build">Build</a></div><div class="link"><a href="/groups/csr">Compatibility &amp; Specification Review</a></div><div class="link"><a href="/groups/compiler">Compiler</a></div><div class="link"><a href="/groups/conformance">Conformance</a></div><div class="link"><a href="/groups/core-libs">Core Libraries</a></div><div class="link"><a href="/groups/gb">Governing Board</a></div><div class="link"><a href="/groups/hotspot">HotSpot</a></div><div class="link"><a href="/groups/ide-support">IDE Tooling &amp; Support</a></div><div class="link"><a href="/groups/i18n">Internationalization</a></div><div class="link"><a href="/groups/jmx">JMX</a></div><div class="link"><a href="/groups/members">Members</a></div><div class="link"><a href="/groups/net">Networking</a></div><div class="link"><a href="/groups/nb-projects">NetBeans Projects</a></div><div class="link"><a href="/groups/porters">Porters</a></div><div class="link"><a href="/groups/quality">Quality</a></div><div class="link"><a href="/groups/security">Security</a></div><div class="link"><a href="/groups/serviceability">Serviceability</a></div><div class="link"><a href="/groups/sound">Sound</a></div><div class="link"><a href="/groups/swing">Swing</a></div><div class="link"><a href="/groups/vulnerability">Vulnerability</a></div><div class="link"><a href="/groups/web">Web</a></div></div><div class="links"><div class="about">Projects</div><div class="link"><a href="/projects/">(overview)</a></div><div class="link"><a href="/projects/amber">Amber</a></div><div class="link"><a href="/projects/anno-pipeline">Annotations Pipeline 2.0</a></div><div class="link"><a href="/projects/audio-engine">Audio Engine</a></div><div class="link"><a href="/projects/build-infra">Build Infrastructure</a></div><div class="link"><a href="/projects/caciocavallo">Caciocavallo</a></div><div class="link"><a href="/projects/closures">Closures</a></div><div class="link"><a href="/projects/code-tools">Code Tools</a></div><div class="link"><a href="/projects/coin">Coin</a></div><div class="link"><a href="/projects/cvmi">Common VM Interface</a></div><div class="link"><a href="/projects/compiler-grammar">Compiler Grammar</a></div><div class="link"><a href="/projects/detroit">Detroit</a></div><div class="link"><a href="/projects/dio">Device I/O</a></div><div class="link"><a href="/projects/duke">Duke</a></div><div class="link"><a href="/projects/font-scaler">Font Scaler</a></div><div class="link"><a href="/projects/fbtoolkit">Framebuffer Toolkit</a></div><div class="link"><a href="/projects/graal">Graal</a></div><div class="link"><a href="/projects/graphics-rasterizer">Graphics Rasterizer</a></div><div class="link"><a href="/projects/harfbuzz">HarfBuzz Integration</a></div><div class="link"><a href="/projects/icedtea">IcedTea</a></div><div class="link"><a href="/projects/jdk6">JDK 6</a></div><div class="link"><a href="/projects/jdk7">JDK 7</a></div><div class="link"><a href="/projects/jdk7u">JDK 7 Updates</a></div><div class="link"><a href="/projects/jdk8">JDK 8</a></div><div class="link"><a href="/projects/jdk8u">JDK 8 Updates</a></div><div class="link"><a href="/projects/jdk9">JDK 9</a></div><div class="link"><a href="/projects/jdk">JDK</a>
      (&#8230;
       <a href="/projects/jdk/12">12</a>,
       <a href="/projects/jdk/13">13</a>,
       <a href="/projects/jdk/14">14</a>)</div><div class="link"><a href="/projects/jdk-updates">JDK Updates</a></div><div class="link"><a href="/projects/javadoc-next">JavaDoc.Next</a></div><div class="link"><a href="/projects/jigsaw">Jigsaw</a></div><div class="link"><a href="/projects/kona">Kona</a></div><div class="link"><a href="/projects/kulla">Kulla</a></div><div class="link"><a href="/projects/lambda">Lambda</a></div><div class="link"><a href="/projects/lanai">Lanai</a></div><div class="link"><a href="/projects/locale-enhancement">Locale Enhancement</a></div><div class="link"><a href="/projects/loom">Loom</a></div><div class="link"><a href="/projects/jmm">Memory Model Update</a></div><div class="link"><a href="/projects/metropolis">Metropolis</a></div><div class="link"><a href="/projects/jmc">Mission Control</a></div><div class="link"><a href="/projects/mobile">Mobile</a></div><div class="link"><a href="/projects/modules">Modules</a></div><div class="link"><a href="/projects/mlvm">Multi-Language VM</a></div><div class="link"><a href="/projects/nashorn">Nashorn</a></div><div class="link"><a href="/projects/nio">New I/O</a></div><div class="link"><a href="/projects/openjfx">OpenJFX</a></div><div class="link"><a href="/projects/panama">Panama</a></div><div class="link"><a href="/projects/penrose">Penrose</a></div><div class="link"><a href="/projects/aarch32-port">Port: AArch32</a></div><div class="link"><a href="/projects/aarch64-port">Port: AArch64</a></div><div class="link"><a href="/projects/bsd-port">Port: BSD</a></div><div class="link"><a href="/projects/haiku-port">Port: Haiku</a></div><div class="link"><a href="/projects/macosx-port">Port: Mac OS X</a></div><div class="link"><a href="/projects/mips-port">Port: MIPS</a></div><div class="link"><a href="/projects/ppc-aix-port">Port: PowerPC/AIX</a></div><div class="link"><a href="/projects/s390x-port">Port: s390x</a></div><div class="link"><a href="/projects/portola">Portola</a></div><div class="link"><a href="/projects/sctp">SCTP</a></div><div class="link"><a href="/projects/skara">Skara</a></div><div class="link"><a href="/projects/shenandoah">Shenandoah</a></div><div class="link"><a href="/projects/sumatra">Sumatra</a></div><div class="link"><a href="/projects/threeten">ThreeTen</a></div><div class="link"><a href="/projects/tiered-attrib">Tiered Attribution</a></div><div class="link"><a href="/projects/tsan">Tsan</a></div><div class="link"><a href="/projects/type-annotations">Type Annotations</a></div><div class="link"><a href="/projects/xrender">XRender Pipeline</a></div><div class="link"><a href="/projects/valhalla">Valhalla</a></div><div class="link"><a href="/projects/verona">Verona</a></div><div class="link"><a href="/projects/visualvm">VisualVM</a></div><div class="link"><a href="/projects/zero">Zero</a></div><div class="link"><a href="/projects/zgc">ZGC</a></div></div><div class="links"><div class="about">Tools</div><div class="link"><a href="http://java.sun.com/javase/downloads/index.jsp">Java SE</a></div><div class="link"><a href="http://mercurial-scm.org/mercurial/">Mercurial</a></div><div class="link"><a href="/jtreg/index.html">jtreg harness</a></div></div><div class="links"><div class="about">Related</div><div class="link"><a href="http://planetjdk.org">Planet JDK</a></div><div class="link"><a href="http://java.sun.com">java.sun.com</a></div><div class="link"><a href="http://jcp.org">Java Community Process</a></div><div class="link"><a href="//jdk.java.net">JDK GA/EA Builds</a></div></div><div class="buttons"><a href="http://oracle.com"><img alt="Oracle logo" src="/images/oracle.png" /></a></div></div><div id="footer">

        &#169;  Oracle Corporation and/or its affiliates
        <br /><a href="/legal/tou/">Terms of Use</a>
        &#183;
        
            License: <a href="/legal/gplv2+ce.html">GPLv2</a>
        &#183; <a href="http://www.oracle.com/us/legal/privacy/">Privacy</a>
        &#183; <a href="http://www.oracle.com/us/legal/third-party-trademarks/third-party-trademarks-078568.html">Trademarks</a></div><SCRIPT type="text/javascript">
  var sc_project=2527440;
  var sc_invisible=1;
  var sc_partition=24;
  var sc_security="d832a704";
  var sc_remove_link=1;
  </SCRIPT><script type="text/javascript" src="https://www.statcounter.com/counter/counter_xhtml.js" async="yes"></script><noscript><div class="statcounter"><img class="statcounter" src="https://c.statcounter.com/2527440/0/d832a704/1/" alt="web statistics" /></div></noscript></body></html>
