<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=us-ascii" /><meta http-equiv="Content-Type" content="text/html; charset=us-ascii" /><title>JEP 138: Autoconf-Based Build System</title><link rel="shortcut icon" href="/images/nanoduke.ico" /><link rel="stylesheet" type="text/css" href="/page.css" /><script type="text/javascript" src="/page.js"><noscript></noscript></script><style type="text/css" xml:space="preserve">
      TABLE { border-collapse: collapse; padding: 0px; margin: 1em 0; }
      TR:first-child TH, TR:first-child TD { padding-top: 0; }
      TH, TD { padding: 0px; padding-top: .5ex; vertical-align: baseline; text-align: left; }
      TD + TD, TH + TH { padding-left: 1em; }
      TD:first-child, TH:first-child, TD.jep { text-align: right; }
      TABLE.head TD:first-child { font-style: italic; padding-left: 2em; }
      PRE { padding-left: 2em; margin: 1ex 0; font-size: inherit; }
      TABLE PRE { padding-left: 0; margin: 0; }
      TABLE.jeps TD:first-child + TD,
      TABLE.jeps TD:first-child + TD + TD { padding-left: .5em; }
      TABLE.jeps TD:first-child,
      TABLE.jeps TD:first-child + TD,
      TABLE.jeps TD:first-child + TD + TD { font-size: smaller; }
      TABLE.jeps TD.cl { font-size: smaller; padding-right: 0; text-align: right; }
      TABLE.jeps TD.cm { font-size: smaller; padding-left: .1em; padding-right: .1em; }
      TABLE.jeps TD.cr { font-size: smaller; padding-left: 0; }
      TABLE.jeps TD.z { padding-left: 0; padding-right: 0; }
      TABLE.head TD { padding-top: 0; }
      .withdrawn { text-decoration: line-through; }
    </style></head><body><div id="main"><h1>JEP 138: Autoconf-Based Build System</h1><table class="head"><tr><td>Owner</td><td>Magnus Ihse Bursie</td></tr><tr><td>Type</td><td>Feature</td></tr><tr><td>Scope</td><td>Implementation</td></tr><tr><td>Status</td><td>Closed&#8201;/&#8201;Delivered</td></tr><tr><td>Release</td><td>8</td></tr><tr><td>Discussion</td><td>jdk8 dash dev at openjdk dot java dot net</td></tr><tr><td>Effort</td><td>L</td></tr><tr><td>Duration</td><td>M</td></tr><tr><td>Blocks</td><td><a href="161">JEP 161: Compact Profiles</a></td></tr><tr><td>Depends</td><td><a href="139">JEP 139: Enhance javac to Improve Build Speed</a></td></tr><tr><td>Reviewed by</td><td>Mikael Vidstedt</td></tr><tr><td>Endorsed by</td><td>Mikael Vidstedt</td></tr><tr><td>Created</td><td>2011/09/15 20:00</td></tr><tr><td>Updated</td><td>2015/05/11 14:25</td></tr><tr><td>Issue</td><td><a href="https://bugs.openjdk.java.net/browse/JDK-8046128">8046128</a></td></tr></table><div class="markdown"><h2 id="Summary">Summary</h2>
<p>Introduce autoconf (<code>./configure</code>-style) build setup, refactor the Makefiles
to remove recursion, and leverage
<a href="https://bugs.openjdk.java.net/browse/JDK-8046129">JEP 139: Enhance javac to Improve Build Speed</a>.</p>
<h2 id="Goals">Goals</h2>
<p>The top level goals that we are trying to achieve are:</p>
<ol>
<li>Increase build speed radically</li>
<li>Simplify build-system source code (Makefiles, <em>etc.</em>)</li>
<li>Simplify work for developers</li>
<li>Get exact and reproducible build output</li>
<li>Simplify build-machine configurations (JPRT, <em>etc.</em>)</li>
</ol>
<p>We will address these goals by four sub-projects, which are more or less
tightly intertwined.</p>
<ol>
<li>Update the Makefile structure</li>
<li>Use autoconf (configure script)</li>
<li>Add parallel Java compilation support</li>
<li>Make Java builds incremental</li>
</ol>
<p>We need to understand properly existing developer workflows so that we can
minimize the impact of this change for everyone.</p>
<p>This project is part of a larger effort to improve the build infrastructure of
the JDK. We expect this project to be closely followed by the future steps. The
distinction between these steps is somewhat arbitrary, and is made only to
quickly benefit from the first work done on improving the JDK build
infrastructure.</p>
<h2 id="Non-Goals">Non-Goals</h2>
<p>Since we will update the Makefiles with a new structure, several issues that we
want to address in the future might turn out to work just by themselves as an
effect of the update. However, we are not specifically addressing these issues
during this project, and we will not test them nor make any guarantee that they
will work properly. (We will, however, try to make sure that we don't break
anything that works.)  These issues include:</p>
<ul>
<li>Make it easy to port to new platforms</li>
<li>Make it possible to do JDK development without a network connection</li>
<li>Provide proper support for cross-compilation, including compilation of
32-bit binaries on 64-bit hosts</li>
<li>Improve the handling of warnings</li>
</ul>
<p>We will also not address issues that are scheduled for future steps.  (However,
some of this work will lay the ground for these future improvements.)  These
issues include:</p>
<ul>
<li>Speed up Hotspot compilation</li>
<li>Upgrade compilers</li>
<li>Support IDE projects</li>
<li>Reconsider the source-drop mechanism</li>
</ul>
<h2 id="Success-Metrics">Success Metrics</h2>
<h3 id="Build-simplicity">Build simplicity</h3>
<p>Given that all prerequisites are available, building should be accomplished by:</p>
<ol>
<li>Getting the source code from the Mercurial repositories</li>
<li><code>./configure</code></li>
<li><code>make</code></li>
</ol>
<h3 id="Build-speed">Build speed</h3>
<p>Build speed depends on hardware factors, and improvements will vary. Our target
is compiling on Linux on an 8-way machine. In this case, the time spent
building the JDK after our improvements should be at most 33% of the current
time. (Typically this means going from ~15 minutes to ~5 minutes, or less). A
stretch goal is that build time should be at most 20% (~3 minutes) for the JDK.</p>
<p>Note that this is just for the JDK.  It does not include building Hotspot, nor
creating Javadoc.</p>
<h3 id="Makefile-cleanup">Makefile cleanup</h3>
<p>All small (&lt;3 kB) recursive Makefiles in the JDK (not including Hotspot) should
be removed, and the functionality collected into central Makefiles. (A small
number of Makefiles is not in itself a goal, however, having the code in one
(or a few) places helps with overview and understanding.)</p>
<h2 id="Motivation">Motivation</h2>
<p>Building the complete JDK is unnecessarily slow. This puts an extra burden on
developers and build systems. As a result, developers check out and build just
a part of the source code, since the product as a whole takes too long to
build.</p>
<p>The current implementation of the build system, with more than 350 minimal,
recursive Makefiles scattered all around the product, makes it hard to make
changes to the build system. The current solution also sometimes requires
updating Makefiles just to add new source files or directories; this should not
be needed.</p>
<p>Today the build system is configured by using several environment
variables. This is in contrast to the popular method of using <code>./configure</code> to
set up the build system. Apart from familiarity, this has several benefits over
environment variables. Arguments to configure are checked -- a misspelled
argument results in an error, whereas a misspelled environment variable is just
ignored. <code>./configure --help</code> shows a list of available arguments, whereas it
is almost impossible to get a comprehensive list of all environment variables
that affect the current build system.</p>
<h2 id="Description">Description</h2>
<p>These changes will not result in any changes in the built product; they only
affect the internal development process.</p>
<h3 id="Update-the-Makefile-structure">Update the Makefile structure</h3>
<h4 id="Background">Background</h4>
<p>Updating the old Makefiles to a new, simplified architecture will be
fundamental for all other work described here.</p>
<h4 id="Implementation">Implementation</h4>
<p>The current style of recursive makefiles with one file per directory will be
removed. Instead, the makefiles will discover files to be compiled by looking
recursively into source-code directories. Files that should not be compiled
will instead be listed as explicit exclusions. This will be needed to be able
to use the new parallel javac compiler.</p>
<p>Code common to several subsystems will be stored in a new, top-level directory
"common/make". The design idea is that these common files will provide a
library with helper functions, so that the per-subsystem Makefiles can be
written as simply and cleanly as possible. We will accept a greater code
complexity in these libraries if it allows for increased simplicity of the
per-subsystem Makefiles.</p>
<p>Since good coding practice is not automatically enforced by the Makefile
syntax, we will take extra care to make sure we write proper and readable code.</p>
<p>As part of the update, we will produce a document describing the coding
guidelines we have found useful and have followed during the rewrite process,
so as to guide future changes in the Makefiles. We will also produce a document
describing the overall architecture of the Makefiles.</p>
<p>The Makefiles do other things apart from building the resulting binary, or
build unusual variants of the binaries. Some of these targets appear arcane and
not used anymore. If all stakeholders agree then we will not port such targets
to the new system. This is a list of features we're so far considering to
remove:</p>
<ul>
<li><em>(currently empty)</em></li>
</ul>
<h4 id="Mixing-old-and-new">Mixing old and new</h4>
<p>It is probably possible to keep the old Makefile system around, in parallel
with the new rewritten Makefile system, so we have two ways of building the
product (new and old) for some time. This is not really desirable, since it
risks leading to code duplication and general confusion, and will make us miss
out the benefits of removing the old stuff. However, keeping the old system, or
having an easy way of restoring the old system, would help us manage the risk
involved.</p>
<h4 id="Transition">Transition</h4>
<p>Most developers will not have much interaction with the actual makefiles, so
there will not be any large changes in workflow.</p>
<p>Previously, sometimes the Makefiles needed to be updated whenever source files
or directories were added or deleted. This will not be needed anymore, and this
needs to be communicated to all developers.</p>
<p>Developers who want to change the actual Makefiles need to understand the
overall design and coding principles used.  This will be documented, but the
existence of these documents needs to be communicated.</p>
<h3 id="Use-autoconf-configure-script">Use autoconf (configure script)</h3>
<h4 id="Background">Background</h4>
<p>The basic idea behind autoconf is that a single, simple interface will handle
the "glue" issues between a user's system's configuration and the requirements
of the Makefiles. This interface is the <code>./configure</code> shell script.</p>
<p>Using autoconf has thus two facets -- creating and using the <code>./configure</code>
script. The configure script is generated by the autoconf tools, from the
source code in <code>configure.ac</code> (and accompanying helper files), which is written
using M4 macros. From this source code, a <code>configure</code> shell script is
generated. This script (even though it is generated) is checked in into the
repository. Whenever the <code>configure.ac</code> source code is changed, the <code>configure</code>
script needs to be regenerated and updated in the repository. To regenerate
<code>configure</code>, the autoconf tools need to be installed on the system.</p>
<p>The typical user, however, will not need to do this. Since <code>configure</code> is
checked in, he/she only needs to run <code>./configure</code>. To do this, the autoconf
tools are not needed. This results in a <code>config.spec</code> file in Makefile syntax,
which determines the build details, and which is included by the Makefile.</p>
<h4 id="Autoconf-implementation">Autoconf implementation</h4>
<p>The configure script has three major tasks:</p>
<ol>
<li>Determine that all build dependencies are present.</li>
<li>Analyze known differences between platforms and determine which applies in
the current situation.</li>
<li>Apply the arguments given by the user to specialize the build.</li>
</ol>
<p>Even though the autoconf framework helps with all of these tasks, they must all
be explicitly coded with knowledge about the specifics of OpenJDK.  This means
that we need to be clear about what build dependencies we actually have, what
differences needs to be determined, and in what ways the user can influence the
build result.</p>
<p>The build dependencies have previously been described in the README file.</p>
<p>The known differences has previously been encoded in the Makefiles, or been in
the "common knowledge".</p>
<p>The user influences have historically been by using environment variables, and
the check for these have been in the Makefiles.</p>
<p>The configure script can work like a "wrapper" for the old Makefiles, and set
up the same variables in config.spec as the Makefile have been using. In this
case, it will be almost transparent for the Makefile that the variables came
from the configure script instead of the user. However, in many cases a better
solution is probably to output a more "clean" variable, and rewrite the
corresponding parts of the Makefiles.</p>
<h4 id="Legal-status">Legal status</h4>
<p>As part of using autoconf, we need to include three files from autoconf in the
JDK 8 source repository.  The three files are <code>pkg.m4</code>, <code>config.guess</code> and
<code>config.sub</code>. Legal clearance for inclusion of these files in the OpenJDK has
been requested. We believe this should not be a problem, since the autoconf
license is explicitly written to support this use case (basically allowing us
to distribute them any way we like, as long as they are used as part of a
configure script).</p>
<h4 id="Transition">Transition</h4>
<p>The current workflow when building OpenJDK is basically:</p>
<ol>
<li>Retrieve source code from repository</li>
<li>Setup a slew of environment variables</li>
<li>Run make</li>
<li>Repeat 2 and 3 each time a rebuild is needed</li>
</ol>
<p>Many team members have created personal shell scripts and similar solutions to
help with this.</p>
<p>The new workflow using configure scripts will instead lead to:</p>
<ol>
<li>Retrieve source code from repository</li>
<li>Run <code>./configure</code>, possibly with specializing arguments</li>
<li>Run make</li>
<li>Repeat 3 each time a rebuild is needed</li>
</ol>
<p>Since step 3 is so easy, no shell scripts will be needed to rebuild. However,
if the user had heavily specialized their setup, they might want to create
scripts to help them run configure with the correct arguments.</p>
<p>We should provide a translation table from old environment variables to new
<code>configure</code> arguments.</p>
<p><strong>Discussion:</strong> Maybe we should check for some commonly used old-style
environment variables when running configure/make, and alert the user?</p>
<h3 id="Speed-up-javac-using-server-mode-supporting-parallel-compilation">Speed up javac using server mode supporting parallel compilation</h3>
<p>For <a href="https://bugs.openjdk.java.net/browse/JDK-8046129">JEP 139: Enhance javac to Improve Build Speed</a> we will write an
extension to javac which will support parallel compilation.  To use this, we
must add support for it in the makefiles.</p>
<h4 id="Transition">Transition</h4>
<p>Switching the Java compilation to using the javac server will result in no
noticeable impact for the developer (apart from the major speedup, of
course). No transition plan is needed.</p>
<h3 id="Make-Java-builds-incremental-by-enhancing-javac-with-dependency-output">Make Java builds incremental by enhancing javac with dependency output</h3>
<p>Make has the ability to make incremental builds, that is, just recompile a
subset of all files when a change have been made. Ideally, this subset should
be the minimal subset needed. For this to work make needs to have dependency
information available, in a format that it can use.</p>
<p>For <a href="https://bugs.openjdk.java.net/browse/JDK-8046129">JEP 139: Enhance javac to Improve Build Speed</a> we will write an
extension to javac which will allow for incremental builds of Java code. To use
this, we must add support for it in the makefiles.</p>
<h4 id="Transition">Transition</h4>
<p>The incremental build will be available for developers without any specific
action. In theory, the only noticeable difference for the developer should be
the increase in speed when doing recompilations. However, if the dependency
generation fails or gets confused, the build might be incorrect and a full
rebuild will be needed. This is very unlikely to happen, however it will be
useful to inform developers of this potential problem and inform them how to do
a full rebuild.</p>
<p>Also, compilation speed will now be correlated with the complexity of the
source code dependencies. Informing the developers about this might add an
incentive to write good code with less far-fetched dependencies.</p>
<h2 id="Alternatives">Alternatives</h2>
<p>Instead of making javac properly parallel, we could start several
single-threaded compilations of different and independent java packages in
parallel. This would not require any changes to javac, but it would be much
harder to get the Makefiles correct, and it would not give as much speed
improvement.</p>
<p>We could have skipped rewriting the Makefiles, but to introduce these kinds of
changes without properly cleaning up the Makefiles first would have been a
daunting and time-consuming task.</p>
<h2 id="Testing">Testing</h2>
<p>Since we will not change the resulting binary, we don't need to add or change
any tests of the product itself.</p>
<p>However, we should make sure we deliver on the promise of not changing the
resulting binary. As part of this project, we should create a build comparison
tool, which can compare the build result from the old system with the build
result from the new system, on all relevant aspects. This is a harder problem
than it sounds, since two subsequent builds, even with the same build system,
will not be bitwise identical, due to transient and irrelevant factors. To be
useful, such a tool needs to ignore such irrelevant aspects, and focus on what
should not change.</p>
<p>This tool should be run for a variety of platforms and build types, comparing
the old and the new system.</p>
<p>This tool can also be used to test that incremental builds are identical to
full rebuilds.</p>
<p><strong>Discussion:</strong> Ideally, the build system should be tested, just as properly as
the resulting product. Unfortunately, no such framework for testing the build
system exists, and creating a proper testing framework is most likely outside
the scope of this effort.</p>
<p><strong>Discussion:</strong> We should examine the possibilities of adding at least some
kind of basic testing of the Makefiles.  Testing incremental builds by
specially crafted and "evil" dependencies could be one kind of tests to add. Is
there an existing javac test suite to add such tests to?</p>
<h2 id="Risks-and-Assumptions">Risks and Assumptions</h2>
<p>Removing non-build items</p>
<ul>
<li>Risk: By mistake remove support for workflow or process needed by some
groups</li>
<li>Mitigation plan: Communicate with all groups, gather requirements</li>
<li>Contingency plan: Immediately re-implement support for workflow</li>
</ul>
<p>Problems on rare platforms</p>
<ul>
<li>Risk: In some rare circumstances, the new build system will not work</li>
<li>Mitigation plan: Test many scenarios (different hardware and software, for
different groups) before deploying; make sure we can use both new and old
system in parallel if needed</li>
<li>Contingency plan: Keep old system so both systems can be used in parallel</li>
</ul>
<p>Resulting product is incorrect</p>
<ul>
<li>Risk: Build changes causes incorrect bits to be build</li>
<li>Mitigation plan: Test resulting build properly</li>
<li>Contingency plan: Keep old system and use it instead until problem is solved</li>
</ul>
<h2 id="Dependences">Dependences</h2>
<p>As noted, this JEP depends upon
<a href="https://bugs.openjdk.java.net/browse/JDK-8046129">JEP 139: Enhance javac to Improve Build Speed</a>.</p>
<p>This JEP will make heavy changes to code which is also modified by the
BSD/MacOS X port. The build changes are likely arrive in JDK 8 before that
project, so we will have to take care of the changes they introduced. However,
most changes will be related to Hotspot, which we are not considering in this
project.</p>
<p>Future JEPs will build upon this JEP to improve the HotSpot and Javadoc build
processes.</p>
<h2 id="Impact">Impact</h2>
<p>The impact of this change on the actual resulting product is minimal.</p>
<ul>
<li>
<p>Compatibility: The way the product is built will be different. Existing
personal or group build scripts will not work without modification.</p>
</li>
<li>
<p>Portability: We must make sure that the new build system works properly on
all supported platforms. If possible, it should be written so as to
minimize porting efforts when porting to new systems.</p>
</li>
<li>
<p>Documentation: Existing documentation (like the build README) needs to be
updated.</p>
</li>
</ul>
</div></div><div id="sidebar"><div id="openjdk-sidebar-logo"><a href="/"><img alt="OpenJDK logo" src="/images/openjdk-small.png" /></a></div><div class="links"><div class="links"><a href="/workshop"><b>Workshop</b></a></div></div><div class="links"><div class="link"><a href="/faq/">OpenJDK FAQ</a></div><div class="link"><a href="/install/">Installing</a></div><div class="link"><a href="/contribute/">Contributing</a></div><div class="link"><a href="/sponsor/">Sponsoring</a></div><div class="link"><a href="/guide/">Developers' Guide</a></div><div class="link"><a href="/groups/vulnerability/report">Vulnerabilities</a></div></div><div class="links"><div class="links"><a href="//mail.openjdk.java.net">Mailing lists</a></div><div class="link"><a href="/irc">IRC</a>
                      &#183; <a href="https://wiki.openjdk.java.net">Wiki</a></div></div><div class="links"><div class="links"><a href="/bylaws">Bylaws</a> &#183; <a href="/census">Census</a></div><div class="link"><a href="/legal/">Legal</a></div></div><div class="links"><div class="links"><a href="/jeps/0"><b>JEP Process</b></a></div></div><div class="links"><div class="link search"><form method="get" action="https://www.google.com/search"><input id="searchBox" style="color: gray" type="text" name="q" size="10" maxlength="255" value="search" /><input type="hidden" name="sitesearch" value="openjdk.java.net" /></form></div></div><div class="links"><div class="about">Source code</div><div class="link"><a href="//hg.openjdk.java.net">Mercurial</a></div><div class="link">Bundles (<a href="http://download.java.net/openjdk/jdk6">6</a>)</div></div><div class="links"><div class="about">Groups</div><div class="link"><a href="/groups/">(overview)</a></div><div class="link"><a href="/groups/2d">2D Graphics</a></div><div class="link"><a href="/groups/adoption">Adoption</a></div><div class="link"><a href="/groups/awt">AWT</a></div><div class="link"><a href="/groups/build">Build</a></div><div class="link"><a href="/groups/csr">Compatibility &amp; Specification Review</a></div><div class="link"><a href="/groups/compiler">Compiler</a></div><div class="link"><a href="/groups/conformance">Conformance</a></div><div class="link"><a href="/groups/core-libs">Core Libraries</a></div><div class="link"><a href="/groups/gb">Governing Board</a></div><div class="link"><a href="/groups/hotspot">HotSpot</a></div><div class="link"><a href="/groups/ide-support">IDE Tooling &amp; Support</a></div><div class="link"><a href="/groups/i18n">Internationalization</a></div><div class="link"><a href="/groups/jmx">JMX</a></div><div class="link"><a href="/groups/members">Members</a></div><div class="link"><a href="/groups/net">Networking</a></div><div class="link"><a href="/groups/nb-projects">NetBeans Projects</a></div><div class="link"><a href="/groups/porters">Porters</a></div><div class="link"><a href="/groups/quality">Quality</a></div><div class="link"><a href="/groups/security">Security</a></div><div class="link"><a href="/groups/serviceability">Serviceability</a></div><div class="link"><a href="/groups/sound">Sound</a></div><div class="link"><a href="/groups/swing">Swing</a></div><div class="link"><a href="/groups/vulnerability">Vulnerability</a></div><div class="link"><a href="/groups/web">Web</a></div></div><div class="links"><div class="about">Projects</div><div class="link"><a href="/projects/">(overview)</a></div><div class="link"><a href="/projects/amber">Amber</a></div><div class="link"><a href="/projects/anno-pipeline">Annotations Pipeline 2.0</a></div><div class="link"><a href="/projects/audio-engine">Audio Engine</a></div><div class="link"><a href="/projects/build-infra">Build Infrastructure</a></div><div class="link"><a href="/projects/caciocavallo">Caciocavallo</a></div><div class="link"><a href="/projects/closures">Closures</a></div><div class="link"><a href="/projects/code-tools">Code Tools</a></div><div class="link"><a href="/projects/coin">Coin</a></div><div class="link"><a href="/projects/cvmi">Common VM Interface</a></div><div class="link"><a href="/projects/compiler-grammar">Compiler Grammar</a></div><div class="link"><a href="/projects/detroit">Detroit</a></div><div class="link"><a href="/projects/dio">Device I/O</a></div><div class="link"><a href="/projects/duke">Duke</a></div><div class="link"><a href="/projects/font-scaler">Font Scaler</a></div><div class="link"><a href="/projects/fbtoolkit">Framebuffer Toolkit</a></div><div class="link"><a href="/projects/graal">Graal</a></div><div class="link"><a href="/projects/graphics-rasterizer">Graphics Rasterizer</a></div><div class="link"><a href="/projects/harfbuzz">HarfBuzz Integration</a></div><div class="link"><a href="/projects/icedtea">IcedTea</a></div><div class="link"><a href="/projects/jdk6">JDK 6</a></div><div class="link"><a href="/projects/jdk7">JDK 7</a></div><div class="link"><a href="/projects/jdk7u">JDK 7 Updates</a></div><div class="link"><a href="/projects/jdk8">JDK 8</a></div><div class="link"><a href="/projects/jdk8u">JDK 8 Updates</a></div><div class="link"><a href="/projects/jdk9">JDK 9</a></div><div class="link"><a href="/projects/jdk">JDK</a>
      (&#8230;
       <a href="/projects/jdk/12">12</a>,
       <a href="/projects/jdk/13">13</a>,
       <a href="/projects/jdk/14">14</a>)</div><div class="link"><a href="/projects/jdk-updates">JDK Updates</a></div><div class="link"><a href="/projects/javadoc-next">JavaDoc.Next</a></div><div class="link"><a href="/projects/jigsaw">Jigsaw</a></div><div class="link"><a href="/projects/kona">Kona</a></div><div class="link"><a href="/projects/kulla">Kulla</a></div><div class="link"><a href="/projects/lambda">Lambda</a></div><div class="link"><a href="/projects/lanai">Lanai</a></div><div class="link"><a href="/projects/locale-enhancement">Locale Enhancement</a></div><div class="link"><a href="/projects/loom">Loom</a></div><div class="link"><a href="/projects/jmm">Memory Model Update</a></div><div class="link"><a href="/projects/metropolis">Metropolis</a></div><div class="link"><a href="/projects/jmc">Mission Control</a></div><div class="link"><a href="/projects/mobile">Mobile</a></div><div class="link"><a href="/projects/modules">Modules</a></div><div class="link"><a href="/projects/mlvm">Multi-Language VM</a></div><div class="link"><a href="/projects/nashorn">Nashorn</a></div><div class="link"><a href="/projects/nio">New I/O</a></div><div class="link"><a href="/projects/openjfx">OpenJFX</a></div><div class="link"><a href="/projects/panama">Panama</a></div><div class="link"><a href="/projects/penrose">Penrose</a></div><div class="link"><a href="/projects/aarch32-port">Port: AArch32</a></div><div class="link"><a href="/projects/aarch64-port">Port: AArch64</a></div><div class="link"><a href="/projects/bsd-port">Port: BSD</a></div><div class="link"><a href="/projects/haiku-port">Port: Haiku</a></div><div class="link"><a href="/projects/macosx-port">Port: Mac OS X</a></div><div class="link"><a href="/projects/mips-port">Port: MIPS</a></div><div class="link"><a href="/projects/ppc-aix-port">Port: PowerPC/AIX</a></div><div class="link"><a href="/projects/s390x-port">Port: s390x</a></div><div class="link"><a href="/projects/portola">Portola</a></div><div class="link"><a href="/projects/sctp">SCTP</a></div><div class="link"><a href="/projects/skara">Skara</a></div><div class="link"><a href="/projects/shenandoah">Shenandoah</a></div><div class="link"><a href="/projects/sumatra">Sumatra</a></div><div class="link"><a href="/projects/threeten">ThreeTen</a></div><div class="link"><a href="/projects/tiered-attrib">Tiered Attribution</a></div><div class="link"><a href="/projects/tsan">Tsan</a></div><div class="link"><a href="/projects/type-annotations">Type Annotations</a></div><div class="link"><a href="/projects/xrender">XRender Pipeline</a></div><div class="link"><a href="/projects/valhalla">Valhalla</a></div><div class="link"><a href="/projects/verona">Verona</a></div><div class="link"><a href="/projects/visualvm">VisualVM</a></div><div class="link"><a href="/projects/zero">Zero</a></div><div class="link"><a href="/projects/zgc">ZGC</a></div></div><div class="links"><div class="about">Tools</div><div class="link"><a href="http://java.sun.com/javase/downloads/index.jsp">Java SE</a></div><div class="link"><a href="http://mercurial-scm.org/mercurial/">Mercurial</a></div><div class="link"><a href="/jtreg/index.html">jtreg harness</a></div></div><div class="links"><div class="about">Related</div><div class="link"><a href="http://planetjdk.org">Planet JDK</a></div><div class="link"><a href="http://java.sun.com">java.sun.com</a></div><div class="link"><a href="http://jcp.org">Java Community Process</a></div><div class="link"><a href="//jdk.java.net">JDK GA/EA Builds</a></div></div><div class="buttons"><a href="http://oracle.com"><img alt="Oracle logo" src="/images/oracle.png" /></a></div></div><div id="footer">

        &#169; 2019 Oracle Corporation and/or its affiliates
        <br /><a href="/legal/tou/">Terms of Use</a>
        &#183;
        
            License: <a href="/legal/gplv2+ce.html">GPLv2</a>
        &#183; <a href="http://www.oracle.com/us/legal/privacy/">Privacy</a>
        &#183; <a href="http://www.oracle.com/us/legal/third-party-trademarks/third-party-trademarks-078568.html">Trademarks</a></div><SCRIPT type="text/javascript">
  var sc_project=2527440;
  var sc_invisible=1;
  var sc_partition=24;
  var sc_security="d832a704";
  var sc_remove_link=1;
  </SCRIPT><script type="text/javascript" src="https://www.statcounter.com/counter/counter_xhtml.js" async="yes"></script><noscript><div class="statcounter"><img class="statcounter" src="https://c.statcounter.com/2527440/0/d832a704/1/" alt="web statistics" /></div></noscript></body></html>
