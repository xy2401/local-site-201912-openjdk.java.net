<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=us-ascii" /><meta http-equiv="Content-Type" content="text/html; charset=us-ascii" /><title>JEP 331: Low-Overhead Heap Profiling</title><link rel="shortcut icon" href="/images/nanoduke.ico" /><link rel="stylesheet" type="text/css" href="/page.css" /><script type="text/javascript" src="/page.js"><noscript></noscript></script><style type="text/css" xml:space="preserve">
      TABLE { border-collapse: collapse; padding: 0px; margin: 1em 0; }
      TR:first-child TH, TR:first-child TD { padding-top: 0; }
      TH, TD { padding: 0px; padding-top: .5ex; vertical-align: baseline; text-align: left; }
      TD + TD, TH + TH { padding-left: 1em; }
      TD:first-child, TH:first-child, TD.jep { text-align: right; }
      TABLE.head TD:first-child { font-style: italic; padding-left: 2em; }
      PRE { padding-left: 2em; margin: 1ex 0; font-size: inherit; }
      TABLE PRE { padding-left: 0; margin: 0; }
      TABLE.jeps TD:first-child + TD,
      TABLE.jeps TD:first-child + TD + TD { padding-left: .5em; }
      TABLE.jeps TD:first-child,
      TABLE.jeps TD:first-child + TD,
      TABLE.jeps TD:first-child + TD + TD { font-size: smaller; }
      TABLE.jeps TD.cl { font-size: smaller; padding-right: 0; text-align: right; }
      TABLE.jeps TD.cm { font-size: smaller; padding-left: .1em; padding-right: .1em; }
      TABLE.jeps TD.cr { font-size: smaller; padding-left: 0; }
      TABLE.jeps TD.z { padding-left: 0; padding-right: 0; }
      TABLE.head TD { padding-top: 0; }
      .withdrawn { text-decoration: line-through; }
    </style></head><body><div id="main"><h1>JEP 331: Low-Overhead Heap Profiling</h1><table class="head"><tr><td>Owner</td><td>Jean Christophe Beyler</td></tr><tr><td>Type</td><td>Feature</td></tr><tr><td>Scope</td><td>JDK</td></tr><tr><td>Status</td><td>Closed&#8201;/&#8201;Delivered</td></tr><tr><td>Release</td><td>11</td></tr><tr><td>Component</td><td>hotspot&#8201;/&#8201;jvmti</td></tr><tr><td>Discussion</td><td>hotspot dash dev at openjdk dot java dot net</td></tr><tr><td>Effort</td><td>L</td></tr><tr><td>Reviewed by</td><td>Mikael Vidstedt, Robbin Ehn, Serguei Spitsyn</td></tr><tr><td>Endorsed by</td><td>Mikael Vidstedt, Vladimir Kozlov</td></tr><tr><td>Created</td><td>2016/12/12 21:31</td></tr><tr><td>Updated</td><td>2018/09/05 19:16</td></tr><tr><td>Issue</td><td><a href="https://bugs.openjdk.java.net/browse/JDK-8171119">8171119</a></td></tr></table><div class="markdown"><h2 id="Summary">Summary</h2>
<p>Provide a low-overhead way of sampling Java heap allocations, accessible via JVMTI.</p>
<h2 id="Goals">Goals</h2>
<p>Provide a way to get information about Java object heap allocations from the JVM that:</p>
<ul>
<li>Is low-overhead enough to be enabled by default continuously,</li>
<li>Is accessible via a well-defined, programmatic interface,</li>
<li>Can sample all allocations (i.e., is not limited to allocations that are in one particular heap region or that were allocated in one particular way),</li>
<li>Can be defined in an implementation-independent way (i.e., without relying on any particular GC algorithm or VM implementation), and</li>
<li>Can give information about both live and dead Java objects.</li>
</ul>
<h2 id="Motivation">Motivation</h2>
<p>There is a deep need for users to understand the contents of their heaps. Poor heap management can lead to problems such as heap exhaustion and GC thrashing. As a result, a number of tools have been developed to allow users to introspect into their heaps, such as the Java Flight Recorder, <code>jmap</code>, YourKit, and VisualVM tools.</p>
<p>One piece of information that is lacking from most of the existing tooling is the call site for particular allocations. Heap dumps and heap histograms do not contain this information. This information can be critical to debugging memory issues, because it tells developers the exact location in their code particular (and particularly bad) allocations occurred.</p>
<p>There are currently two ways of getting this information out of HotSpot:</p>
<ul>
<li>
<p>First, you can instrument all of the allocations in your application using a bytecode rewriter such as the <a href="https://github.com/google/allocation-instrumenter">Allocation Instrumenter</a>. You can then have the instrumentation take a stack trace (when you want one).</p>
</li>
<li>
<p>Second, you can use <a href="//openjdk.java.net/jeps/328">Java Flight Recorder</a>, which takes a stack trace on TLAB refills and when allocating directly into the old generation. The downsides of this are that a) it is tied to a particular allocation implementation (TLABs), and misses allocations that don&#8217;t meet that pattern; b) it doesn&#8217;t allow the user to customize the sampling interval; and c) it only logs allocations, so you cannot distinguish between live and dead objects.</p>
</li>
</ul>
<p>This proposal mitigates these problems by providing an extensible JVMTI interface that allows the user to define the sampling interval and returns a set of live stack traces.</p>
<h2 id="Description">Description</h2>
<h3 id="New-JVMTI-event-and-method">New JVMTI event and method</h3>
<p>The user facing API for the heap sampling feature proposed here consists of an extension to JVMTI that allows for heap profiling. The following systems rely on an event notification system that would provide a callback such as:</p>
<pre><code>void JNICALL
SampledObjectAlloc(jvmtiEnv *jvmti_env,
            JNIEnv* jni_env,
            jthread thread,
            jobject object,
            jclass object_klass,
            jlong size)</code></pre>
<p>where:</p>
<ul>
<li><code>thread</code> is the thread allocating the <code>jobject</code>,</li>
<li><code>object</code> is the reference to the sampled <code>jobject</code>,</li>
<li><code>object_klass</code> is the class for the <code>jobject</code>, and</li>
<li><code>size</code> is the size of the allocation.</li>
</ul>
<p>The new API also includes a single new JVMTI method:</p>
<pre><code>jvmtiError  SetHeapSamplingInterval(jvmtiEnv* env, jint sampling_interval)</code></pre>
<p>where <code>sampling_interval</code> is the average allocated bytes between a sampling. The specification of the method is:</p>
<ul>
<li>If non zero, the sampling interval is updated and will send a callback to the user with the new average sampling interval of <code>sampling_interval</code> bytes
<ul>
<li>For example, if the user wants a sample every megabyte, <code>sampling_interval</code> would be 1024 * 1024.</li>
</ul>
</li>
<li>If zero is passed to the method, the sampler samples every allocation once the new interval is taken into account, which might take a certain number of allocations</li>
</ul>
<p>Note that the sampling interval is not precise.  Each time a sample occurs, the number of bytes before the next sample will be chosen will be pseudo-random with the given average interval.  This is to avoid sampling bias; for example, if the same allocations happen every 512KB, a 512KB sampling interval will always sample the same allocations. Therefore, though the sampling interval will not always be the selected interval, after a large number of samples, it will tend towards it.</p>
<h3 id="Use-case-example">Use-case example</h3>
<p>To enable this, a user would use the usual event notification call to:</p>
<pre><code>jvmti-&gt;SetEventNotificationMode(jvmti, JVMTI_ENABLE, JVMTI_EVENT_SAMPLED_OBJECT_ALLOC, NULL)</code></pre>
<p>The event will be sent when the allocation is initialized and set up correctly, so slightly after the actual code performs the allocation. By default, the average sampling interval is 512KB.</p>
<p>The minimum required to enable the sampling event system is to call <code>SetEventNotificationMode</code> with <code>JVMTI_ENABLE</code> and the event type <code>JVMTI_EVENT_SAMPLED_OBJECT_ALLOC</code>. To modify the sampling interval, the user calls the <code>SetHeapSamplingInterval</code> method.</p>
<p>To disable the system,</p>
<pre><code>jvmti-&gt;SetEventNotificationMode(jvmti, JVMTI_DISABLE, JVMTI_EVENT_SAMPLED_OBJECT_ALLOC, NULL)</code></pre>
<p>disables the event notifications and disables the sampler automatically.</p>
<p>Calling the sampler again via <code>SetEventNotificationMode</code> will re-enable the sampler with whatever sampling interval was currently set (either 512KB by default or the last value passed by a user via <code>SetHeapSamplingInterval</code>).</p>
<h3 id="New-capability">New capability</h3>
<p>To protect the new feature and make it optional for VM implementations, a new capability named <code>can_generate_sampled_object_alloc_events</code> is introduced into the <code>jvmtiCapabilities</code>.</p>
<h3 id="Global-/-thread-level-sampling">Global / thread level sampling</h3>
<p>Using the notification system provides a direct means to send events only for specific threads. This is done via <code>SetEventNotificationMode</code> and providing a third parameter with the threads to be modified.</p>
<h3 id="A-full-example">A full example</h3>
<p>The following section provides code snippets to illustrate the sampler's API. First, the capability and the event notification is enabled:</p>
<pre><code>jvmtiEventCallbacks callbacks;
memset(&amp;callbacks, 0, sizeof(callbacks));
callbacks.SampledObjectAlloc = &amp;SampledObjectAlloc;

jvmtiCapabilities caps;
memset(&amp;caps, 0, sizeof(caps));
caps.can_generate_sampled_object_alloc_events = 1;
if (JVMTI_ERROR_NONE != (*jvmti)-&gt;AddCapabilities(jvmti, &amp;caps)) {
  return JNI_ERR;
}

if (JVMTI_ERROR_NONE != (*jvmti)-&gt;SetEventNotificationMode(jvmti, JVMTI_ENABLE,
                                       JVMTI_EVENT_SAMPLED_OBJECT_ALLOC, NULL)) {
  return JNI_ERR;
}

if (JVMTI_ERROR_NONE !=  (*jvmti)-&gt;SetEventCallbacks(jvmti, &amp;callbacks, sizeof(jvmtiEventCallbacks)) {
  return JNI_ERR;
}

// Set the sampler to 1MB.
if (JVMTI_ERROR_NONE !=  (*jvmti)-&gt;SetHeapSamplingInterval(jvmti, 1024 * 1024)) {
  return JNI_ERR;
}</code></pre>
<p>To disable the sampler (disables events and the sampler):</p>
<pre><code>if (JVMTI_ERROR_NONE != (*jvmti)-&gt;SetEventNotificationMode(jvmti, JVMTI_DISABLE,
                                       JVMTI_EVENT_SAMPLED_OBJECT_ALLOC, NULL)) {
  return JNI_ERR;
}</code></pre>
<p>To re-enable the sampler with the 1024 * 1024 byte sampling interval , a simple call to enabling the event is required:</p>
<pre><code>if (JVMTI_ERROR_NONE != (*jvmti)-&gt;SetEventNotificationMode(jvmti, JVMTI_ENABLE,
                                       JVMTI_EVENT_SAMPLED_OBJECT_ALLOC, NULL)) {
  return JNI_ERR;
}</code></pre>
<h3 id="User-storage-of-sampled-allocations">User storage of sampled allocations</h3>
<p>When an event is generated, the callback can capture a stack trace using the JVMTI <code>GetStackTrace</code> method. The jobject reference obtained by the callback can be also wrapped into a JNI weak reference to help determine when the object has been garbage collected. This approach allows the user to gather data on what objects were sampled, as well as which are still considered live, which can be a good means to understand the job's behavior.</p>
<p>For example, something like this could be done:</p>
<pre><code>extern "C" JNIEXPORT void JNICALL SampledObjectAlloc(jvmtiEnv *env,
                                                     JNIEnv* jni,
                                                     jthread thread,
                                                     jobject object,
                                                     jclass klass,
                                                     jlong size) {
  jvmtiFrameInfo frames[32];
  jint frame_count;
  jvmtiError err;

  err = global_jvmti-&gt;GetStackTrace(NULL, 0, 32, frames, &amp;frame_count);
  if (err == JVMTI_ERROR_NONE &amp;&amp; frame_count &gt;= 1) {
    jweak ref = jni-&gt;NewWeakGlobalRef(object);
    internal_storage.add(jni, ref, size, thread, frames, frame_count);
  }
}</code></pre>
<p>where internal_storage is a data structure that can handle the sampled objects, consider if there is a need to clean up any garbage collected sample, etc. The internals of that implementation are usage-specific, and out of scope of this JEP.</p>
<p>The sampling interval can be used as a means to mitigate profiling overhead. With a sampling interval of 512KB, the overhead should be low enough that a user could reasonably leave the system on by default.</p>
<h3 id="Implementation-details">Implementation details</h3>
<p>The current prototype and implementation proves the feasibility of the approach. It contains five parts:</p>
<ol>
<li>Architecture dependent changes due to a change of a field name in the <code>ThreadLocalAllocationBuffer</code> (TLAB) structure. These changes are minimal as they are just name changes.</li>
<li>The TLAB structure is augmented with a new <code>allocation_end</code> pointer, to complement the existing <code>end</code> pointer.  If the sampling is disabled, the two pointers are always equal and the code performs as before. If the sampling is enabled, <code>end</code> is modified to be where the next sample point is requested. Then, any fast path will "think" the TLAB is full at that point and go down the slow path, which is explained in (3).</li>
<li>The <code>gc/shared/collectedHeap</code> code is changed due to its usage as an entry point to the allocation slow path. When a TLAB is considered full (because allocation has passed the <code>end</code> pointer), the code enters <code>collectedHeap</code> and tries to allocate a new TLAB. At this point, the TLAB is set back to its original size and an allocation is attempted. If the allocation succeeds, the code samples the allocation, and then returns. If it does not, it means allocation has reached the end of the TLAB, and a new TLAB is needed. The code path continues its normal allocation of a new TLAB and determines if that allocation requires a sample. If the allocation is considered too big for the TLAB, the system samples the allocation as well, thus covering in TLAB and out of TLAB allocations for sampling.</li>
<li>When a sample is requested, there is a collector object set on the stack in a place safe for sending the information to the native agent. The collector keeps track of sampled allocations and, at destruction of its own frame, sends a callback to the agent. This mechanism ensures the object is initialized correctly.</li>
<li>If a JVMTI agent has registered a callback for the <code>SampledObjectAlloc</code> event, the event will be triggered and it will obtain sampled allocations.  An example implementation can be found in the <code>libHeapMonitorTest.c</code> file, which is used for JTreg testing.</li>
</ol>
<h2 id="Alternatives">Alternatives</h2>
<p>There are multiple alternatives to the system presented in this JEP. The introduction presented two already: <a href="//openjdk.java.net/jeps/328">Flight Recorder</a> provides an interesting alternative.  This implementation provides several advantages.  First, JFR does not allow the sampling size to be set or provide a callback.  Next, JFR's use of a buffer system can lead to lost allocations when the buffer is exhausted. Finally, the JFR event system does not provide a means to track objects that have been garbage collected, which means it is not possible to use it to provide information about live and garbage collected objects.</p>
<p>Another alternative is bytecode instrumentation using ASM.  Its overhead makes it prohibitive and not a workable solution.</p>
<p>This JEP adds a new feature into JVMTI, which is an important API/framework for various development and monitoring tools. With it, a JVMTI agent can use a low overhead heap profiling API along with the rest of the JVMTI functionality, which provides great flexibility to the tools. For instance, it is up to the agent to decide if a stack trace needs to be collected at each event point.</p>
<h2 id="Testing">Testing</h2>
<p>There are 16 tests in the JTreg framework for this feature that test: turning on/off with multiple threads, multiple threads allocating at the same time, testing if the data is being sampled at the right interval, and if the gathered stacks reflect the correct program information.</p>
<h2 id="Risks-and-Assumptions">Risks and Assumptions</h2>
<p>There are no performance penalties or risks with the feature disabled. A user who does not enable the system will not perceive a performance difference.</p>
<p>However, there is a potential performance/memory penalty with the feature enabled. In the initial prototype implementation, the overhead was minimal (&lt;2%).  This used a more heavyweight mechanism that modified JIT&#8217;d code. In the final version presented here, the system piggy-backs on the TLAB code, and should not experience that regression.</p>
<p>Current evaluation of the Dacapo benchmark puts the overhead at:</p>
<ul>
<li>
<p>0% when the feature is disabled</p>
</li>
<li>
<p>1% when the feature is enabled at the default 512KB interval, but no callback action is performed (i.e., the <code>SampledAllocEvent</code> method is empty but registered to the JVM).</p>
</li>
<li>
<p>3% overhead with a sampling callback that does a naive implementation to store the data (using the one in the tests)</p>
</li>
</ul>
</div></div><div id="sidebar"><div id="openjdk-sidebar-logo"><a href="/"><img alt="OpenJDK logo" src="/images/openjdk-small.png" /></a></div><div class="links"><div class="links"><a href="/workshop"><b>Workshop</b></a></div></div><div class="links"><div class="link"><a href="/faq/">OpenJDK FAQ</a></div><div class="link"><a href="/install/">Installing</a></div><div class="link"><a href="/contribute/">Contributing</a></div><div class="link"><a href="/sponsor/">Sponsoring</a></div><div class="link"><a href="/guide/">Developers' Guide</a></div><div class="link"><a href="/groups/vulnerability/report">Vulnerabilities</a></div></div><div class="links"><div class="links"><a href="//mail.openjdk.java.net">Mailing lists</a></div><div class="link"><a href="/irc">IRC</a>
                      &#183; <a href="https://wiki.openjdk.java.net">Wiki</a></div></div><div class="links"><div class="links"><a href="/bylaws">Bylaws</a> &#183; <a href="/census">Census</a></div><div class="link"><a href="/legal/">Legal</a></div></div><div class="links"><div class="links"><a href="/jeps/0"><b>JEP Process</b></a></div></div><div class="links"><div class="link search"><form method="get" action="https://www.google.com/search"><input id="searchBox" style="color: gray" type="text" name="q" size="10" maxlength="255" value="search" /><input type="hidden" name="sitesearch" value="openjdk.java.net" /></form></div></div><div class="links"><div class="about">Source code</div><div class="link"><a href="//hg.openjdk.java.net">Mercurial</a></div><div class="link">Bundles (<a href="http://download.java.net/openjdk/jdk6">6</a>)</div></div><div class="links"><div class="about">Groups</div><div class="link"><a href="/groups/">(overview)</a></div><div class="link"><a href="/groups/2d">2D Graphics</a></div><div class="link"><a href="/groups/adoption">Adoption</a></div><div class="link"><a href="/groups/awt">AWT</a></div><div class="link"><a href="/groups/build">Build</a></div><div class="link"><a href="/groups/csr">Compatibility &amp; Specification Review</a></div><div class="link"><a href="/groups/compiler">Compiler</a></div><div class="link"><a href="/groups/conformance">Conformance</a></div><div class="link"><a href="/groups/core-libs">Core Libraries</a></div><div class="link"><a href="/groups/gb">Governing Board</a></div><div class="link"><a href="/groups/hotspot">HotSpot</a></div><div class="link"><a href="/groups/ide-support">IDE Tooling &amp; Support</a></div><div class="link"><a href="/groups/i18n">Internationalization</a></div><div class="link"><a href="/groups/jmx">JMX</a></div><div class="link"><a href="/groups/members">Members</a></div><div class="link"><a href="/groups/net">Networking</a></div><div class="link"><a href="/groups/nb-projects">NetBeans Projects</a></div><div class="link"><a href="/groups/porters">Porters</a></div><div class="link"><a href="/groups/quality">Quality</a></div><div class="link"><a href="/groups/security">Security</a></div><div class="link"><a href="/groups/serviceability">Serviceability</a></div><div class="link"><a href="/groups/sound">Sound</a></div><div class="link"><a href="/groups/swing">Swing</a></div><div class="link"><a href="/groups/vulnerability">Vulnerability</a></div><div class="link"><a href="/groups/web">Web</a></div></div><div class="links"><div class="about">Projects</div><div class="link"><a href="/projects/">(overview)</a></div><div class="link"><a href="/projects/amber">Amber</a></div><div class="link"><a href="/projects/anno-pipeline">Annotations Pipeline 2.0</a></div><div class="link"><a href="/projects/audio-engine">Audio Engine</a></div><div class="link"><a href="/projects/build-infra">Build Infrastructure</a></div><div class="link"><a href="/projects/caciocavallo">Caciocavallo</a></div><div class="link"><a href="/projects/closures">Closures</a></div><div class="link"><a href="/projects/code-tools">Code Tools</a></div><div class="link"><a href="/projects/coin">Coin</a></div><div class="link"><a href="/projects/cvmi">Common VM Interface</a></div><div class="link"><a href="/projects/compiler-grammar">Compiler Grammar</a></div><div class="link"><a href="/projects/detroit">Detroit</a></div><div class="link"><a href="/projects/dio">Device I/O</a></div><div class="link"><a href="/projects/duke">Duke</a></div><div class="link"><a href="/projects/font-scaler">Font Scaler</a></div><div class="link"><a href="/projects/fbtoolkit">Framebuffer Toolkit</a></div><div class="link"><a href="/projects/graal">Graal</a></div><div class="link"><a href="/projects/graphics-rasterizer">Graphics Rasterizer</a></div><div class="link"><a href="/projects/harfbuzz">HarfBuzz Integration</a></div><div class="link"><a href="/projects/icedtea">IcedTea</a></div><div class="link"><a href="/projects/jdk6">JDK 6</a></div><div class="link"><a href="/projects/jdk7">JDK 7</a></div><div class="link"><a href="/projects/jdk7u">JDK 7 Updates</a></div><div class="link"><a href="/projects/jdk8">JDK 8</a></div><div class="link"><a href="/projects/jdk8u">JDK 8 Updates</a></div><div class="link"><a href="/projects/jdk9">JDK 9</a></div><div class="link"><a href="/projects/jdk">JDK</a>
      (&#8230;
       <a href="/projects/jdk/12">12</a>,
       <a href="/projects/jdk/13">13</a>,
       <a href="/projects/jdk/14">14</a>)</div><div class="link"><a href="/projects/jdk-updates">JDK Updates</a></div><div class="link"><a href="/projects/javadoc-next">JavaDoc.Next</a></div><div class="link"><a href="/projects/jigsaw">Jigsaw</a></div><div class="link"><a href="/projects/kona">Kona</a></div><div class="link"><a href="/projects/kulla">Kulla</a></div><div class="link"><a href="/projects/lambda">Lambda</a></div><div class="link"><a href="/projects/lanai">Lanai</a></div><div class="link"><a href="/projects/locale-enhancement">Locale Enhancement</a></div><div class="link"><a href="/projects/loom">Loom</a></div><div class="link"><a href="/projects/jmm">Memory Model Update</a></div><div class="link"><a href="/projects/metropolis">Metropolis</a></div><div class="link"><a href="/projects/jmc">Mission Control</a></div><div class="link"><a href="/projects/mobile">Mobile</a></div><div class="link"><a href="/projects/modules">Modules</a></div><div class="link"><a href="/projects/mlvm">Multi-Language VM</a></div><div class="link"><a href="/projects/nashorn">Nashorn</a></div><div class="link"><a href="/projects/nio">New I/O</a></div><div class="link"><a href="/projects/openjfx">OpenJFX</a></div><div class="link"><a href="/projects/panama">Panama</a></div><div class="link"><a href="/projects/penrose">Penrose</a></div><div class="link"><a href="/projects/aarch32-port">Port: AArch32</a></div><div class="link"><a href="/projects/aarch64-port">Port: AArch64</a></div><div class="link"><a href="/projects/bsd-port">Port: BSD</a></div><div class="link"><a href="/projects/haiku-port">Port: Haiku</a></div><div class="link"><a href="/projects/macosx-port">Port: Mac OS X</a></div><div class="link"><a href="/projects/mips-port">Port: MIPS</a></div><div class="link"><a href="/projects/ppc-aix-port">Port: PowerPC/AIX</a></div><div class="link"><a href="/projects/s390x-port">Port: s390x</a></div><div class="link"><a href="/projects/portola">Portola</a></div><div class="link"><a href="/projects/sctp">SCTP</a></div><div class="link"><a href="/projects/skara">Skara</a></div><div class="link"><a href="/projects/shenandoah">Shenandoah</a></div><div class="link"><a href="/projects/sumatra">Sumatra</a></div><div class="link"><a href="/projects/threeten">ThreeTen</a></div><div class="link"><a href="/projects/tiered-attrib">Tiered Attribution</a></div><div class="link"><a href="/projects/tsan">Tsan</a></div><div class="link"><a href="/projects/type-annotations">Type Annotations</a></div><div class="link"><a href="/projects/xrender">XRender Pipeline</a></div><div class="link"><a href="/projects/valhalla">Valhalla</a></div><div class="link"><a href="/projects/verona">Verona</a></div><div class="link"><a href="/projects/visualvm">VisualVM</a></div><div class="link"><a href="/projects/zero">Zero</a></div><div class="link"><a href="/projects/zgc">ZGC</a></div></div><div class="links"><div class="about">Tools</div><div class="link"><a href="http://java.sun.com/javase/downloads/index.jsp">Java SE</a></div><div class="link"><a href="http://mercurial-scm.org/mercurial/">Mercurial</a></div><div class="link"><a href="/jtreg/index.html">jtreg harness</a></div></div><div class="links"><div class="about">Related</div><div class="link"><a href="http://planetjdk.org">Planet JDK</a></div><div class="link"><a href="http://java.sun.com">java.sun.com</a></div><div class="link"><a href="http://jcp.org">Java Community Process</a></div><div class="link"><a href="//jdk.java.net">JDK GA/EA Builds</a></div></div><div class="buttons"><a href="http://oracle.com"><img alt="Oracle logo" src="/images/oracle.png" /></a></div></div><div id="footer">

        &#169; 2019 Oracle Corporation and/or its affiliates
        <br /><a href="/legal/tou/">Terms of Use</a>
        &#183;
        
            License: <a href="/legal/gplv2+ce.html">GPLv2</a>
        &#183; <a href="http://www.oracle.com/us/legal/privacy/">Privacy</a>
        &#183; <a href="http://www.oracle.com/us/legal/third-party-trademarks/third-party-trademarks-078568.html">Trademarks</a></div><SCRIPT type="text/javascript">
  var sc_project=2527440;
  var sc_invisible=1;
  var sc_partition=24;
  var sc_security="d832a704";
  var sc_remove_link=1;
  </SCRIPT><script type="text/javascript" src="https://www.statcounter.com/counter/counter_xhtml.js" async="yes"></script><noscript><div class="statcounter"><img class="statcounter" src="https://c.statcounter.com/2527440/0/d832a704/1/" alt="web statistics" /></div></noscript></body></html>
