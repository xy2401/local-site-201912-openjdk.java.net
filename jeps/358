<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=us-ascii" /><meta http-equiv="Content-Type" content="text/html; charset=us-ascii" /><title>JEP 358: Helpful NullPointerExceptions</title><link rel="shortcut icon" href="/images/nanoduke.ico" /><link rel="stylesheet" type="text/css" href="/page.css" /><script type="text/javascript" src="/page.js"><noscript></noscript></script><style type="text/css" xml:space="preserve">
      TABLE { border-collapse: collapse; padding: 0px; margin: 1em 0; }
      TR:first-child TH, TR:first-child TD { padding-top: 0; }
      TH, TD { padding: 0px; padding-top: .5ex; vertical-align: baseline; text-align: left; }
      TD + TD, TH + TH { padding-left: 1em; }
      TD:first-child, TH:first-child, TD.jep { text-align: right; }
      TABLE.head TD:first-child { font-style: italic; padding-left: 2em; }
      PRE { padding-left: 2em; margin: 1ex 0; font-size: inherit; }
      TABLE PRE { padding-left: 0; margin: 0; }
      TABLE.jeps TD:first-child + TD,
      TABLE.jeps TD:first-child + TD + TD { padding-left: .5em; }
      TABLE.jeps TD:first-child,
      TABLE.jeps TD:first-child + TD,
      TABLE.jeps TD:first-child + TD + TD { font-size: smaller; }
      TABLE.jeps TD.cl { font-size: smaller; padding-right: 0; text-align: right; }
      TABLE.jeps TD.cm { font-size: smaller; padding-left: .1em; padding-right: .1em; }
      TABLE.jeps TD.cr { font-size: smaller; padding-left: 0; }
      TABLE.jeps TD.z { padding-left: 0; padding-right: 0; }
      TABLE.head TD { padding-top: 0; }
      .withdrawn { text-decoration: line-through; }
    </style></head><body><div id="main"><h1>JEP 358: Helpful NullPointerExceptions</h1><table class="head"><tr><td>Authors</td><td>Goetz Lindenmaier, Ralf Schmelter</td></tr><tr><td>Owner</td><td>Goetz Lindenmaier</td></tr><tr><td>Type</td><td>Feature</td></tr><tr><td>Scope</td><td>JDK</td></tr><tr><td>Status</td><td>Integrated</td></tr><tr><td>Release</td><td>14</td></tr><tr><td>Component</td><td>hotspot&#8201;/&#8201;runtime</td></tr><tr><td>Discussion</td><td>hotspot dash runtime dash dev at openjdk dot java dot net, core dash libs dash dev at openjdk dot java dot net</td></tr><tr><td>Effort</td><td>S</td></tr><tr><td>Duration</td><td>S</td></tr><tr><td>Reviewed by</td><td>Alex Buckley, Coleen Phillimore</td></tr><tr><td>Endorsed by</td><td>Mikael Vidstedt</td></tr><tr><td>Created</td><td>2019/03/15 10:27</td></tr><tr><td>Updated</td><td>2019/11/20 18:44</td></tr><tr><td>Issue</td><td><a href="https://bugs.openjdk.java.net/browse/JDK-8220715">8220715</a></td></tr></table><div class="markdown"><h2 id="Summary">Summary</h2>
<p>Improve the usability of <code>NullPointerException</code>s generated by the JVM by
describing precisely which variable was <code>null</code>.</p>
<h2 id="Goals">Goals</h2>
<ul>
<li>
<p>Offer helpful information to developers and support staff about the premature termination of a program.</p>
</li>
<li>
<p>Improve program understanding by more clearly associating a dynamic exception with static program code.</p>
</li>
<li>
<p>Reduce the <a href="https://stackoverflow.com/questions/218384/what-is-a-nullpointerexception-and-how-do-i-fix-it">confusion and concern</a> that new developers often have about <code>NullPointerException</code>s.</p>
</li>
</ul>
<h2 id="Non-Goals">Non-Goals</h2>
<ul>
<li>
<p>It is not a goal to track down the ultimate producer of a <code>null</code> reference, only the unlucky consumer.</p>
</li>
<li>
<p>It is not a goal to throw more <code>NullPointerException</code>s, or to throw them at a different point in time.</p>
</li>
</ul>
<h2 id="Motivation">Motivation</h2>
<p>Every Java developer has encountered <code>NullPointerException</code>s (NPEs). Since NPEs can occur almost anywhere in a program, it is generally impractical to attempt to catch and recover from them. As a result, developers rely on the JVM to pinpoint the source of an NPE when it actually occurs. For example, suppose an NPE occurs in this code:</p>
<pre><code>a.i = 99;</code></pre>
<p>The JVM will print out the method, filename, and line number that caused the NPE:</p>
<pre><code>Exception in thread "main" java.lang.NullPointerException
    at Prog.main(Prog.java:5)</code></pre>
<p>Using the message, which is typically included in a bug report, the developer can locate <code>a.i = 99;</code> and infer that <code>a</code> must have been null. However, for more complex code, it is impossible to decide which variable was null without using a debugger. Suppose an NPE occurs in this code:</p>
<pre><code>a.b.c.i = 99;</code></pre>
<p>The filename and line number do not pinpoint exactly which variable was null. Was it <code>a</code> or <code>b</code> or <code>c</code>?</p>
<p>A similar problem occurs with array access and assignment. Suppose an NPE occurs in this code:</p>
<pre><code>a[i][j][k] = 99;</code></pre>
<p>The filename and line number do not pinpoint exactly which array component was null. Was it <code>a</code> or <code>a[i]</code> or <code>a[i][j]</code>?</p>
<p>A single line of code may contain several access paths, each one potentially the source of an NPE. Suppose an NPE occurs in this code:</p>
<pre><code>a.i = b.j;</code></pre>
<p>The filename and line number do not pinpoint the offending access path. Was <code>a</code> null, or <code>b</code>?</p>
<p>Finally, an NPE could stem from a method call. Suppose an NPE occurs in this code:</p>
<pre><code>x().y().i = 99;</code></pre>
<p>The filename and line number do not pinpoint which method call returned null. Was it <code>x()</code> or <code>y()</code>?</p>
<p><a href="https://stackoverflow.com/questions/410890/how-to-trace-a-nullpointerexception-in-a-chain-of-getters?rq=1">Various strategies</a> can mitigate the lack of accurate pinpointing by the JVM. For example, a developer faced with an NPE can break up the access paths by assigning to intermediate local variables. (The <code>var</code> keyword may be <a href="https://openjdk.java.net/jeps/286">helpful</a> here.) The result will be a more accurate report of the <code>null</code> variable in the JVM's message, but reformatting code to track down an exception is undesirable. In any case, most NPEs occur in production environments, where the support engineer who observes the NPE is many steps removed from the developer whose code caused it.</p>
<p>The entire Java ecosystem would benefit if the JVM could give the information needed to pinpoint the source of an NPE and then identify its root cause, without using extra tooling or shuffling code around. SAP's commercial JVM has done this since 2006, to great acclaim from developers and support engineers.</p>
<h2 id="Description">Description</h2>
<p>The JVM throws a <code>NullPointerException</code> (NPE) at the point in a program where code tries to dereference a <code>null</code> reference. By analyzing the program's bytecode instructions, the JVM will determine precisely which variable was <code>null</code>, and describe the variable (in terms of source code) with a <em>null-detail message</em> in the NPE. The null-detail message will then be shown in the JVM's message, alongside the method, filename, and line number.</p>
<blockquote>
<p><em>Note: The JVM displays an exception message on the same line as the exception type, which can result in long lines. For readability in a web browser, this JEP shows the null-detail message on a second line, after the exception type.</em></p>
</blockquote>
<p>For example, an NPE from the assignment statement <code>a.i = 99;</code> would generate this message:</p>
<pre><code>Exception in thread "main" java.lang.NullPointerException: 
        Cannot assign field "i" because "a" is null
    at Prog.main(Prog.java:5)</code></pre>
<p>If the more complex statement <code>a.b.c.i = 99;</code> throws an NPE, the message would dissect the statement and pinpoint the cause by showing the full access path which led up to the <code>null</code>:</p>
<pre><code>Exception in thread "main" java.lang.NullPointerException: 
        Cannot read field "c" because "a.b" is null
    at Prog.main(Prog.java:5)</code></pre>
<p>Giving the full access path is more helpful than giving just the name of the <code>null</code> field because it helps the developer to navigate a line of complex source code, especially if the line of code uses the same name multiple times.</p>
<p>Similarly if the array access and assignment statement <code>a[i][j][k] = 99;</code> throws an NPE:</p>
<pre><code>Exception in thread "main" java.lang.NullPointerException:
        Cannot load from object array because "a[i][j]" is null
    at Prog.main(Prog.java:5)</code></pre>
<p>Similarly if <code>a.i = b.j;</code> throws an NPE:</p>
<pre><code>Exception in thread "main" java.lang.NullPointerException:
        Cannot read field "j" because "b" is null
    at Prog.main(Prog.java:5)</code></pre>
<p>In every example, the null-detail message in conjunction with the line number is sufficient to spot the expression that is <code>null</code> in the source code. Ideally, the null-detail message would show the actual source code, but this is difficult to do given the nature of the correspondence between source code and bytecode instructions (see below). In addition, when the expression involves an array access, the null-detail message is unable to show the actual array indices which led to a <code>null</code> element, such as the run-time values of <code>i</code> and <code>j</code> when <code>a[i][j]</code> is <code>null</code>. This is because the array indices were stored on the method's operand stack, which was lost when the NPE was thrown.</p>
<p>Only NPEs that are created and thrown directly by the JVM will include the null-detail message. NPEs that are explicitly created and/or explicitly thrown by programs running on the JVM are not subject to the bytecode analysis and null-detail message creation described below. In addition, the null-detail message is not reported for NPEs caused by code in <em>hidden methods</em>, which are special-purpose low-level methods generated and called by the JVM to, e.g., optimize string concatenation. A hidden method has no filename or line number that could help to pinpoint the source of an NPE, so printing a null-detail message would be futile.</p>
<h3 id="Computing-the-null-detail-message">Computing the null-detail message</h3>
<p>Source code such as <code>a.b.c.i = 99;</code> is compiled to several bytecode instructions. When an NPE is thrown, the JVM knows exactly which bytecode instruction in which method is responsible, and uses this information to compute the null-detail message. The message has two parts:</p>
<ul>
<li>
<p>The first part -- <code>Cannot read field "c"</code> -- is the <em>consequence</em> of the NPE. It says which action could not be performed because a bytecode instruction popped a <code>null</code> reference from the operand stack.</p>
</li>
<li>
<p>The second part -- <code>because "a.b" is null</code> -- is the <em>reason</em> for the NPE. It recreates the part of the source code that pushed the <code>null</code> reference on to the operand stack.</p>
</li>
</ul>
<p>The first part of the null-detail message is computed from the bytecode instruction that popped <code>null</code>, as detailed here in Table 1:</p>
<table>
  <tbody><tr>
    <th>bytecode</th>  <th>1st part</th>
  </tr>	
  <tr>
    <td><code>aload</code></td>  <td>"Cannot load from &lt;element type&gt; array"</td>
  </tr>	
  <tr>
    <td><code>arraylength</code></td>  <td>"Cannot read the array length"</td>
  </tr>	
  <tr>
    <td><code>astore</code></td>  <td>"Cannot store to &lt;element type&gt; array"</td>
  </tr>	
  <tr>
    <td><code>athrow</code></td>  <td>"Cannot throw exception"</td>
  </tr>	
  <tr>
    <td><code>getfield</code></td>  <td>"Cannot read field "&lt;field name&gt;""</td>
  </tr>	
  <tr>
    <td><code>invokeinterface</code>, <code>invokespecial</code>, <code>invokevirtual</code></td>  <td>"Cannot invoke "&lt;method&gt;""</td>
  </tr>	
  <tr>
    <td><code>monitorenter</code></td>  <td>"Cannot enter synchronized block"</td>
  </tr>	
  <tr>
    <td><code>monitorexit</code></td>  <td>"Cannot exit synchronized block"</td>
  </tr>	
  <tr>
    <td><code>putfield</code></td>  <td>"Cannot assign field "&lt;field name&gt;""</td>
  </tr>	
  <tr>
    <td>Any other bytecode</td>  <td>No NPE possible, no message</td>
  </tr>	
</tbody></table>
<p>&lt;method&gt; breaks down to &lt;class name&gt;.&lt;method name&gt;(&lt;parameter types&gt;)</p>
<p>The second part of the null-detail message is more complex. It identifies the access path that led to a <code>null</code> reference on the operand stack, but complex access paths involve several bytecode instructions. Given a sequence of instructions in a method, it is not obvious which previous instruction pushed the <code>null</code> reference. Accordingly, a simple data flow analysis is performed on all the method's instructions. It computes which instruction pushes to which operand stack slot, and propagates this information to the instruction which pops the slot. (The analysis is linear in the number of instructions.) Given the analysis, it is possible to step back through the instructions which make up an access path in source code. The second part of the message is assembled step-by-step, given the bytecode instruction at each step as detailed here in Table 2:</p>
<table>
  <tbody><tr>
    <th>bytecode</th><th>2nd part</th>
  </tr>	
  <tr>
    <td><code>aconst</code>_null</td><td>"null"</td>
  </tr>	
  <tr>
    <td><code>aaload</code></td><td>compute the 2nd part for the instruction which pushed the array reference, then append "[", then compute the 2nd part for the instruction that pushed the index, then append "]"</td>
  </tr>	
  <tr>
    <td><code>iconst_*</code>, <code>bipush</code>, <code>sipush</code></td><td>the constant value</td>
  </tr>	
  <tr>
    <td><code>getfield</code></td><td>compute the 2nd part for the instruction which pushed the reference that is accessed by this getfield, then append ".&lt;field name&gt;"</td>
  </tr>	
  <tr>
    <td><code>getstatic</code></td><td>"&lt;class name&gt;.&lt;field name&gt;"</td>
  </tr>	
  <tr>
    <td><code>invokeinterface</code>, <code>invokevirtual</code>, <code>invokespecial</code>, <code>invokestatic</code></td>
	<td>If in the first step, "the return value of &lt;method&gt;", else "&lt;method&gt;"</td>
  </tr>	
  <tr>
    <td><code>iload*</code>, <code>aload*</code></td><td>For local variable 0, "this". For other local variables and parameters, the variable name if a local variable table is available, otherwise "&lt;parameter <em>i</em> &gt;" or "&lt;local <em>i</em> &gt;".</td>
  </tr>
  <tr>
    <td>Any other bytecode</td><td>Not applicable to the second part.</td>
</tr></tbody></table>
<p>Access paths can be made up of an arbitrary number of bytecode instructions. The null-detail message does not necessarily cover all of these. The algorithm takes only a limited number of steps back through the instructions in order to limit the complexity of the output. If the maximum number of steps is reached, placeholders such as "..." are emitted. In rare cases, stepping back over instructions is not possible, and then the null-detail message will contain only the first part ("Cannot ...", with no "because ..." explanation).</p>
<p>The null-detail message -- <code>Cannot read field "c" because "a.b" is null</code> -- is computed on demand, when the JVM calls <code>Throwable::getMessage</code> as part of its message. Usually, a message carried by an exception must be supplied
<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Throwable.html#%3Cinit%3E(java.lang.String)">when the exception object is created</a>, but the computation is expensive and may not always be needed, since many NPEs are caught and discarded by programs. The computation requires the bytecode instructions of the method which caused the NPE, and the index of the instruction which popped <code>null</code>; fortunately, the implementation of <code>Throwable</code> includes this information about the origin of the exception.</p>
<p>The feature can be toggled with the new boolean command-line option
<code>-XX:{+|-}ShowCodeDetailsInExceptionMessages</code>. The option will first
have default 'false' so that the message is not printed. It is intended to
enable code details in exception messages by default in a later release.</p>
<h3 id="Example-of-computing-the-null-detail-message">Example of computing the null-detail message</h3>
<p>Here is an example based on the following snippet of source code:</p>
<pre><code>a().b[i][j] = 99;</code></pre>
<p>The source code has the following representation in bytecode:</p>
<pre><code>5: invokestatic  #7    // Method a:()LA;
   8: getfield      #13   // Field A.b, an array
  11: iload_1             // Load local variable i, an array index
  12: aaload              // Load b[i], another array
  13: iload_2             // Load local variable j, another array index
  14: bipush        99
  16: iastore             // Store to b[i][j]</code></pre>
<p>Suppose <code>a().b[i]</code> is <code>null</code>. This will cause an NPE to be thrown when storing to <code>b[i][j]</code>. The JVM will execute bytecode <code>16: iastore</code> and throw an NPE because bytecode <code>12: aaload</code> pushed <code>null</code> on to the operand stack. The null-detail message will be computed as follows:</p>
<pre><code>Cannot store to int array because "Test.a().b[i]" is null</code></pre>
<p>The computation starts with the method containing the bytecode instructions, and the bytecode index 16. Since the instruction at index 16 is <code>iastore</code>, the first part of the message is "Cannot store to int array", per Table 1.</p>
<p>For the second part of the message, the algorithm steps back to the instruction that pushed the <code>null</code> which <code>iastore</code> was unfortunate enough to pop. Data flow analysis reveals this is <code>12: aaload</code>, an array load. Per Table 2, when an array load is responsible for a <code>null</code> array reference, we step back to the instruction which pushed the array reference (rather than the array index) on to the operand stack, <code>8: getfield</code>. Then again per Table 2, when a <code>getfield</code> is part of the access path, we step back to the instruction that pushed the reference used by <code>getfield</code>, <code>5: invokestatic</code>. We can now assemble the second part of the message:</p>
<ul>
<li>For <code>5: invokestatic</code>, emit "Test.a()"</li>
<li>For <code>8: getfield</code>, emit ".b"</li>
<li>For <code>12: aaload</code>, emit "[" and stepback  to the instruction that pushed the index, <code>11: iload_1</code>. Emit "i", the name of local variable #1, then "]".</li>
</ul>
<p>The algorithm never steps to <code>13: iload_2</code> which pushes the index <code>j</code>, or to <code>14: bipush</code> which pushes <code>99</code>, because they are not related to the cause of the NPE.</p>
<p>Files with many examples of null-detail messages are attached to this JEP: output_with_debug_info.txt lists messages when class files contain a local variable table.  and output_no_debug_info.txt messages when class files do not contain a local variable table.</p>
<h2 id="Alternatives">Alternatives</h2>
<h3 id="The-presence-of-the-null-detail-message">The presence of the null-detail message</h3>
<p>The JVM could use other means to supply null-detail information, such as writing to stdout or using a tracing or logging facility. However, exceptions are the standard way to report problems on the JVM, and NPE already gives information about where the exception was raised by including the stack trace with line number information. As this information is insufficient to locate the cause, it is natural to enhance NPE by adding the missing information.</p>
<p>The null-detail message is switched off per default and can be enabled by command-line option <code>-XX:+ShowCodeDetailsInExceptionMessages</code>. There is no way to specify that only some NPE-raising bytecodes are of interest.  For the following reasons the null-detail message might not be wanted in all circumstances:</p>
<ol>
<li>
<p>Performance. The algorithm adds some overhead to the production of a stack trace. However, this is comparable to the stack walking done when raising the exception. If an application frequently throws and prints messages so that the printing affects performance, already throwing the exception imposes an overhead that definitely should be avoided.</p>
</li>
<li>
<p>Security. The null-detail message gives insight into source code that is otherwise not easy to obtain. The message could be switched off to avoid this, but exception messages are supposed to carry information about the cause of an exception so that a problem can be fixed. If exposing this information is not acceptable, the message should not be printed by an application, but caught and discarded. This should not be handled by configuration of the JVM.</p>
</li>
<li>
<p>Compatibility. The JVM has not traditionally included a message for an NPE, and including a message now might cause problems for tools that parse stack traces in overly sensitive ways. However, Java programs have always been able to throw NPEs with messages, so tools are expected to adapt to messages on NPEs from the JVM. A related risk is that tools might depend on the precise format of the null-detail message.</p>
</li>
</ol>
<p>We intend to enable the null-detail message by default in a future release.</p>
<h3 id="The-computation-of-the-null-detail-message">The computation of the null-detail message</h3>
<p>Computing the null-detail message on demand has consequences for the message's availability in advanced scenarios:</p>
<ol>
<li>
<p>When executing remote code via RMI, any exception thrown by the remote code is delivered to the caller via serialization. Serializing an exception object does not preserve its internal data structures, so if remote code throws and thus serializes NPE, the eventual deserialization will produce an NPE for which no null-detail message can be computed on demand.</p>
</li>
<li>
<p>If the bytecode instructions of a method change while a program is running, such as due to redefinition of the method by a Java agent using JVMTI, then the original instructions are preserved for a while but can be discarded during a GC cycle. As the original instructions are required to compute the null-detail message, the null-detail message will not be computed on demand if this happens.</p>
</li>
</ol>
<p>The choice not to support serialization was made in order to minimize changes in the <code>NullPointerException</code> class itself. If persisting the null-detail message for serialization became desirable, then <code>writeReplace</code> could be implemented in that class. Alternatively, the null-detail message could be computed when the exception object is created, and this would persist the null-detail message across both serialization and method redefinition.</p>
<h3 id="The-format-of-the-null-detail-message">The format of the null-detail message</h3>
<p>The null-detail message is constructed of two parts: the first part describes an action that could not be performed (the <em>consequence</em> of the NPE) while the second part describes the expression that earlier pushed a <code>null</code> reference on to the operand stack (the <em>reason</em> for the NPE). In some cases, this results in verbose text where only a fraction of the message is really needed to pinpoint the <code>null</code> expression in source code. For example, it could be helpful to shorten the message in these two scenarios:</p>
<ol>
<li>
<p>In a failed array access -- <code>Cannot load from object array because "a[i][j]" is null.</code> -- the second part <code>"a[i][j]" is null</code> suffices to pinpoint the <code>null</code> expression in source code <code>a[i][j][k] = 99;</code>.</p>
</li>
<li>
<p>In a failed method invocation -- <code>Cannot invoke "NullPointerExceptionTest.callWithTypes(String[][], int[][][], float, long, short, boolean, byte, double, char)" because...</code> -- the method's declaring type and parameter types are often bulky, and can be omitted without seriously harming the developer's ability to pinpoint the <code>null</code> expression.</p>
</li>
</ol>
<p>Nevertheless, the null-detail message does not leave out this information. The algorithm computing the message deals with arbitrary sequences of bytecode instructions, so it does not always succeed in assembling a useful message. For example, for a failed array access, it might be unable to compute the second part altogether, so that no message would be printed at all if the first part was left out; in this case, the first part alone may be sufficient to pinpoint the <code>null</code> expression in source code. In general, due to assembling the message from individual building blocks for each instruction visited, it is not feasible to decide algorithmically whether enough information has been gathered at some point to leave out further parts without harming the usefulness of the message. Thus, the choice was made to print all the information to make the message helpful in as many situations as possible.</p>
<h2 id="Risks-and-Assumptions">Risks and Assumptions</h2>
<p>It is assumed that computation of the null-detail message will be extended if new bytecodes are added to the JVM Specification.</p>
<p>The null-detail message may contain variable names from the source code. Exposing this information might be considered a security risk. Notably, if debug information is included in the <code>class</code> file (<code>javac -g</code>), then local variable names are printed. These have not previously been available to other programs via Java's reflection APIs (although a program with suitable permissions can inspect a <code>class</code> file via <code>ClassLoader::getResourceAsStream()</code>). However, leaving out the names of local variables would limit the benefit of the message.</p>
<h2 id="Testing">Testing</h2>
<p>A prototype of this feature is implemented by <a href="https://bugs.openjdk.java.net/browse/JDK-8218628">JDK-8218628</a>. The prototype contains a unit test that exercises every message part. A predecessor implementation has been in SAP's commercial JVM since 2006 and has proven to be stable.</p>
<p>To avoid regressions some larger amounts of code should be run. The jtreg tests should be run to detect other tests that handle the message and need to be adapted.</p>
</div></div><div id="sidebar"><div id="openjdk-sidebar-logo"><a href="/"><img alt="OpenJDK logo" src="/images/openjdk-small.png" /></a></div><div class="links"><div class="links"><a href="/workshop"><b>Workshop</b></a></div></div><div class="links"><div class="link"><a href="/faq/">OpenJDK FAQ</a></div><div class="link"><a href="/install/">Installing</a></div><div class="link"><a href="/contribute/">Contributing</a></div><div class="link"><a href="/sponsor/">Sponsoring</a></div><div class="link"><a href="/guide/">Developers' Guide</a></div><div class="link"><a href="/groups/vulnerability/report">Vulnerabilities</a></div></div><div class="links"><div class="links"><a href="//mail.openjdk.java.net">Mailing lists</a></div><div class="link"><a href="/irc">IRC</a>
                      &#183; <a href="https://wiki.openjdk.java.net">Wiki</a></div></div><div class="links"><div class="links"><a href="/bylaws">Bylaws</a> &#183; <a href="/census">Census</a></div><div class="link"><a href="/legal/">Legal</a></div></div><div class="links"><div class="links"><a href="/jeps/0"><b>JEP Process</b></a></div></div><div class="links"><div class="link search"><form method="get" action="https://www.google.com/search"><input id="searchBox" style="color: gray" type="text" name="q" size="10" maxlength="255" value="search" /><input type="hidden" name="sitesearch" value="openjdk.java.net" /></form></div></div><div class="links"><div class="about">Source code</div><div class="link"><a href="//hg.openjdk.java.net">Mercurial</a></div><div class="link">Bundles (<a href="http://download.java.net/openjdk/jdk6">6</a>)</div></div><div class="links"><div class="about">Groups</div><div class="link"><a href="/groups/">(overview)</a></div><div class="link"><a href="/groups/2d">2D Graphics</a></div><div class="link"><a href="/groups/adoption">Adoption</a></div><div class="link"><a href="/groups/awt">AWT</a></div><div class="link"><a href="/groups/build">Build</a></div><div class="link"><a href="/groups/csr">Compatibility &amp; Specification Review</a></div><div class="link"><a href="/groups/compiler">Compiler</a></div><div class="link"><a href="/groups/conformance">Conformance</a></div><div class="link"><a href="/groups/core-libs">Core Libraries</a></div><div class="link"><a href="/groups/gb">Governing Board</a></div><div class="link"><a href="/groups/hotspot">HotSpot</a></div><div class="link"><a href="/groups/ide-support">IDE Tooling &amp; Support</a></div><div class="link"><a href="/groups/i18n">Internationalization</a></div><div class="link"><a href="/groups/jmx">JMX</a></div><div class="link"><a href="/groups/members">Members</a></div><div class="link"><a href="/groups/net">Networking</a></div><div class="link"><a href="/groups/nb-projects">NetBeans Projects</a></div><div class="link"><a href="/groups/porters">Porters</a></div><div class="link"><a href="/groups/quality">Quality</a></div><div class="link"><a href="/groups/security">Security</a></div><div class="link"><a href="/groups/serviceability">Serviceability</a></div><div class="link"><a href="/groups/sound">Sound</a></div><div class="link"><a href="/groups/swing">Swing</a></div><div class="link"><a href="/groups/vulnerability">Vulnerability</a></div><div class="link"><a href="/groups/web">Web</a></div></div><div class="links"><div class="about">Projects</div><div class="link"><a href="/projects/">(overview)</a></div><div class="link"><a href="/projects/amber">Amber</a></div><div class="link"><a href="/projects/anno-pipeline">Annotations Pipeline 2.0</a></div><div class="link"><a href="/projects/audio-engine">Audio Engine</a></div><div class="link"><a href="/projects/build-infra">Build Infrastructure</a></div><div class="link"><a href="/projects/caciocavallo">Caciocavallo</a></div><div class="link"><a href="/projects/closures">Closures</a></div><div class="link"><a href="/projects/code-tools">Code Tools</a></div><div class="link"><a href="/projects/coin">Coin</a></div><div class="link"><a href="/projects/cvmi">Common VM Interface</a></div><div class="link"><a href="/projects/compiler-grammar">Compiler Grammar</a></div><div class="link"><a href="/projects/detroit">Detroit</a></div><div class="link"><a href="/projects/dio">Device I/O</a></div><div class="link"><a href="/projects/duke">Duke</a></div><div class="link"><a href="/projects/font-scaler">Font Scaler</a></div><div class="link"><a href="/projects/fbtoolkit">Framebuffer Toolkit</a></div><div class="link"><a href="/projects/graal">Graal</a></div><div class="link"><a href="/projects/graphics-rasterizer">Graphics Rasterizer</a></div><div class="link"><a href="/projects/harfbuzz">HarfBuzz Integration</a></div><div class="link"><a href="/projects/icedtea">IcedTea</a></div><div class="link"><a href="/projects/jdk6">JDK 6</a></div><div class="link"><a href="/projects/jdk7">JDK 7</a></div><div class="link"><a href="/projects/jdk7u">JDK 7 Updates</a></div><div class="link"><a href="/projects/jdk8">JDK 8</a></div><div class="link"><a href="/projects/jdk8u">JDK 8 Updates</a></div><div class="link"><a href="/projects/jdk9">JDK 9</a></div><div class="link"><a href="/projects/jdk">JDK</a>
      (&#8230;
       <a href="/projects/jdk/12">12</a>,
       <a href="/projects/jdk/13">13</a>,
       <a href="/projects/jdk/14">14</a>)</div><div class="link"><a href="/projects/jdk-updates">JDK Updates</a></div><div class="link"><a href="/projects/javadoc-next">JavaDoc.Next</a></div><div class="link"><a href="/projects/jigsaw">Jigsaw</a></div><div class="link"><a href="/projects/kona">Kona</a></div><div class="link"><a href="/projects/kulla">Kulla</a></div><div class="link"><a href="/projects/lambda">Lambda</a></div><div class="link"><a href="/projects/lanai">Lanai</a></div><div class="link"><a href="/projects/locale-enhancement">Locale Enhancement</a></div><div class="link"><a href="/projects/loom">Loom</a></div><div class="link"><a href="/projects/jmm">Memory Model Update</a></div><div class="link"><a href="/projects/metropolis">Metropolis</a></div><div class="link"><a href="/projects/jmc">Mission Control</a></div><div class="link"><a href="/projects/mobile">Mobile</a></div><div class="link"><a href="/projects/modules">Modules</a></div><div class="link"><a href="/projects/mlvm">Multi-Language VM</a></div><div class="link"><a href="/projects/nashorn">Nashorn</a></div><div class="link"><a href="/projects/nio">New I/O</a></div><div class="link"><a href="/projects/openjfx">OpenJFX</a></div><div class="link"><a href="/projects/panama">Panama</a></div><div class="link"><a href="/projects/penrose">Penrose</a></div><div class="link"><a href="/projects/aarch32-port">Port: AArch32</a></div><div class="link"><a href="/projects/aarch64-port">Port: AArch64</a></div><div class="link"><a href="/projects/bsd-port">Port: BSD</a></div><div class="link"><a href="/projects/haiku-port">Port: Haiku</a></div><div class="link"><a href="/projects/macosx-port">Port: Mac OS X</a></div><div class="link"><a href="/projects/mips-port">Port: MIPS</a></div><div class="link"><a href="/projects/ppc-aix-port">Port: PowerPC/AIX</a></div><div class="link"><a href="/projects/s390x-port">Port: s390x</a></div><div class="link"><a href="/projects/portola">Portola</a></div><div class="link"><a href="/projects/sctp">SCTP</a></div><div class="link"><a href="/projects/skara">Skara</a></div><div class="link"><a href="/projects/shenandoah">Shenandoah</a></div><div class="link"><a href="/projects/sumatra">Sumatra</a></div><div class="link"><a href="/projects/threeten">ThreeTen</a></div><div class="link"><a href="/projects/tiered-attrib">Tiered Attribution</a></div><div class="link"><a href="/projects/tsan">Tsan</a></div><div class="link"><a href="/projects/type-annotations">Type Annotations</a></div><div class="link"><a href="/projects/xrender">XRender Pipeline</a></div><div class="link"><a href="/projects/valhalla">Valhalla</a></div><div class="link"><a href="/projects/verona">Verona</a></div><div class="link"><a href="/projects/visualvm">VisualVM</a></div><div class="link"><a href="/projects/zero">Zero</a></div><div class="link"><a href="/projects/zgc">ZGC</a></div></div><div class="links"><div class="about">Tools</div><div class="link"><a href="http://java.sun.com/javase/downloads/index.jsp">Java SE</a></div><div class="link"><a href="http://mercurial-scm.org/mercurial/">Mercurial</a></div><div class="link"><a href="/jtreg/index.html">jtreg harness</a></div></div><div class="links"><div class="about">Related</div><div class="link"><a href="http://planetjdk.org">Planet JDK</a></div><div class="link"><a href="http://java.sun.com">java.sun.com</a></div><div class="link"><a href="http://jcp.org">Java Community Process</a></div><div class="link"><a href="//jdk.java.net">JDK GA/EA Builds</a></div></div><div class="buttons"><a href="http://oracle.com"><img alt="Oracle logo" src="/images/oracle.png" /></a></div></div><div id="footer">

        &#169; 2019 Oracle Corporation and/or its affiliates
        <br /><a href="/legal/tou/">Terms of Use</a>
        &#183;
        
            License: <a href="/legal/gplv2+ce.html">GPLv2</a>
        &#183; <a href="http://www.oracle.com/us/legal/privacy/">Privacy</a>
        &#183; <a href="http://www.oracle.com/us/legal/third-party-trademarks/third-party-trademarks-078568.html">Trademarks</a></div><SCRIPT type="text/javascript">
  var sc_project=2527440;
  var sc_invisible=1;
  var sc_partition=24;
  var sc_security="d832a704";
  var sc_remove_link=1;
  </SCRIPT><script type="text/javascript" src="https://www.statcounter.com/counter/counter_xhtml.js" async="yes"></script><noscript><div class="statcounter"><img class="statcounter" src="https://c.statcounter.com/2527440/0/d832a704/1/" alt="web statistics" /></div></noscript></body></html>
